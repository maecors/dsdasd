const room = HBInit({
    roomName: "‚öîÔ∏è KnightFC |5v5 | üëî DT | ü§ù FICHAJES | üîÑ SUPLENTES | UEFA HAXLEAGUE üèüÔ∏è",
    maxPlayers: 30,
    public: true,
    password: null,
    noPlayer: true  // Hides the host from the players list
});

let creator = null;
let admins = new Set();
let dts = { red: null, blue: null };
let captains = { red: null, blue: null };
let mvps = new Set();
let vips = new Set();
let referees = new Set();
let hosters = new Set();
let mutedPlayers = new Map();
let paused = false;
let bannedAuths = new Set([
    "fR-K42GHfrKFU0ujKEjmJXL3TuNE4PYtve1r8u-G520",
    "IvX_9dhiwJftcb0fvZBDuRpcthmpiQLkbmnty5PFgx0",
    "ikCxAiIg3qVWam0xzkpVTmmOKg52lVhlhlPCqHcmvDg",
    "K6QnSoQkVtac3SVPdp3t6UB6xJnPuFWL6iQoGHEMUtE",
    "OFbWHvMkjQLnvf6tre5AdnZv9hAN2yUKHjDUzRiH8vk",
    "Qjr_4IJLDja6kBz0-obH67RQmzs_pNVrVfiNrTOMO8Q",
    "WLGJVCSgpPUr0RNUQ0Vqja5NWMRsftbZe-5p9uBV4E8",
    "8O2yXe2HwCIW57Gz0mmnvAwsf35lldX2q4G9jVJxksY",
    //"yDgJMdv0km8wO69S2N-48xf-u5e_xHqZ1ZAwBxuGlZ8", //zennit
    "7jfObhE_NkRRzTaBC3do9e7m95IixAnbgoIrR9KmNCU", // pabloide
    //"Z2jdXQmmXUL-QufwKbqf33a88BgyUSEEUG1nCMTjkRQ", //sin name
    "w4zkYFLmPY7ObgZdqEyTqGO9TQBHijhLTSj9IDahxQ4",
    "IGf9y_-Y2Ko1xihca9sTyJLp3PdxvwESd5XrGJUZhlw",
    "ZjE1m9KdzliqixDNscbIYJBLVhaUBnaHlLBpiNDV7F4",
    "E3LZlxqENBPqNkiU8sWL3Lixz76Fn9RKvhHEOyTV0go", //gato sovietico
    "g97879gG7i0E_kD7bmn9_LX18FFJehWNy0CivTJJAIY",
    "BT0DxmfvSl8G08jI3IlE5H2CLTFlVMK_WWtQNfzbO7M",
    //"LCKbSl1WZX3Glsp9NqYtEeH5-M1K1iKIKiI0HaK95KE", // samcrack
    "UVcz6pLbYU_678PobPgPOPHSP71tkeU1789NVbbi7n4",
   //FwA3OZPE9-TSNEoe9LPf3jbsANJ3SrGBdH89fNxjAsw", //narko
    "pbd74VkbcGpCY3Xah2Va43Lf9fb7KSABqgrtvpkkiOQ",
    "mneDn5sHtOeB8o-posSoVe7YaoYa-Fukrldcfd7hTOM",
    "yd24otdEJoLlVLujc3-pQrWLgfzjKcT8AduTtfpwFo8",
    "ty_9anxW-FegQ5yLNxgTgwSAT-soylUuFay5C6oSDvc",
    "m3VgiId9M-bVI6qK6xTCMCLJ9BYmUYrH0kRWcwqqa9Q",
    "kDwzw0IEgnqc6R6zdnyIAA1gUCX5jxTe3tzhH_mue0M",
    "XQo12BSLJd0ix0PwfFTHBAI3Z_FD81RtTGkHP5MUDbY",
    "3CeKYt4k0YllPEVKU5OQT-AiE3o5B9Dk7i9ey1DE1p0",
    "sd1yzej_xak3C-rgp8Ba2eog3AEM-sVSIfLotPLf0Yk",
    "Lol0Jnlyjjfnp5guGPaTJfIeuu88ubT1of1AFpw3EFk",
    "smWV-5Y83fmJl65o_nE4XAgqOrXWWmPHRK3k009wn1"
    
]);
const authPositions = new Map([
    ["kFyVAZ8R_Cdt7omLYwbc6H9AmpRQRiQU8ZQ3bH8in-Y", "MC"], // capo
    ["8Q7JtN3gIfo2XudQnLrTIkLDCmCMgoRIqBP7f9HtIso", "MC"], // cxmplay
    ["xFP3i8ksmguVnwapLD0QtfnNOx23WqXzSl0XKW9r8hU", "DFC"], // MGB3
    ["3NCPrRlTEHRuvHfSML6UAXfvIOhOxX7wMLS83Es9Wuk", "MC"], // xigen
    ["adx1h3MOqQbCrjq7MKnatjUmh_8-F87X5A3lxfEEC_Y", "memin"], // foquin
    ["MYDDCQgbtWM4K1ULCEWBPreNYIxKQNCKf2K-W6pcvu4", "DC"], // Pandora
    // Agrega m√°s auths y posiciones seg√∫n sea necesario
]); 
let matchStarted = false;
let goalScorers = new Map(); // Mapa para almacenar los goleadores y sus goles
let assistants = new Map();
let bannedNames = ["NueveDeArea (PRIME)", "Pabloide", "| ùó•ùóòùóúùóûùó©ùóîùó•ùóî", "ùêç·¥á·¥á·¥á·¥áùöú", "BAY|‚òÖÂΩ°„Äé D·¥Ä Ä·¥°…™…¥ …¥·¥ú√ë·¥á·¥¢ „ÄèÂΩ°‚òÖ", "ùê≥ùêÆùê´ùêùùê®üëë", "PN", "ùêáùêáùêêùêîùêÑùêôùêô", "SKUAKO89(bareto)", "Havertzüß®", "MYKE TOWERS (despechado)", "EL VENDEDOR DE DROGA", "ùô†ùôâùôñùôßùô†ùô§", "$", ""]; // Mapa para almacenar los asistentes y sus asistencias
let lastTouchPlayer = null;
let pendingPlayers = new Set(); // A√±adir esta l√≠nea para definir pendingPlayers
let requirePosition = false
let lastMessageTime = new Map(); // A√±adir esta l√≠nea para definir lastMessageTime; 
let lastIncognitoTime = new Map();
let lastMemideTime = new Map();
let lastPartidoMessageTime = 0;
let lastMostrarResultadoPartidoTime = 0; 
let lastAvatarRequestTime = 0;
let lockdownMode = false;
let fichajesTimeout;
let autoBalanceEnabled = false;
let autoPosicionEnabled = false;
let persistentMutedPlayers = new Set();
let slowmodeEnabled = false;
let slowModePlayers = new Map();
let penalesActivo = false;
let penalesModo = null;
let penalesMarcador = { red: 0, blue: 0 };
let penalesTurno = null;
let mapaRed = null;
let mapaBlue = null;
let playerPositions = new Map(); // Mapa para almacenar las posiciones de los jugadores
let previousBallPosition = null;
let previousTimestamp = null;
let slowModeEnabled = false;
let slowModeDuration = 0;
let matchTime = 0;
let matchInterval;
let halfTimeReached = false;
let extraTime = 0;
let votacionActiva = false;
let votosTiempoExtra = new Set();
let votosPenales = new Set();
let votosEmitidos = new Set();
let votacionMVPActiva = false;
let votosMVP = new Map();
let votosEmitidosMVP = new Set();
let votacionRepickActiva = false;
let votosRepick = new Set();
let votosNoRepick = new Set();
let votosEmitidosRepick = new Set();
let alineacionRed = [];
let alineacionBlue = [];
let esquemaRed = "";
let esquemaBlue = "";
let isIda = true; // Flag to determine if it is the first (ida) or second (vuelta) match
let strikes = {
    red: [],
    blue: []
};
let lastGoal = {
    team: null,
    type: null // either 'ida' or 'vuelta'
};
let matchStats = {
    ida: { redScore: 0, blueScore: 0 },
    vuelta: { redScore: 0, blueScore: 0 },
    ballInRedArea: 0,
    ballInBlueArea: 0,
    totalGameTime: 0,
    redPossession: 0,
    bluePossession: 0
};
const colors = {
    creator: 0xFFFFFF,
    admin: 0x887AFF,
    dtRed: 0xFF4F6C,
    dtBlue: 0xA1EFFF,
    playerRed: 0xFF3D3D,
    playerBlue: 0x59C8FF,
    spectator: 0xD1D1D1,
    bot: 0xFFEF14,
    botGold: 0xFFFFFF,
    chatPrivateRed: 0xFF8787,
    chatPrivateBlue: 0xBFEAFF,
    captainRed: 0xF25767, // Nuevo color para Capit√°n del equipo rojo
    captainBlue: 0x7EC4F2, // Nuevo color para Capit√°n del equipo azul
    mvp: 0x9185FF, // Nuevo color para MVP
    vip: 0xB5EAF2, // Nuevo color para VIP
    referee: 0xF2CA00, // Nuevo color para √Årbitro
    hoster: 0xB8F27E // Nuevo color para Hoster
};

const MVP_AVATAR = "üêê";
const avatarMessages = [
    "üòÅ",
    "üòÜ",
    "üòÑ",
    "üòÉ",
    "üòÄ"
];

const X9Y8Z7 = "_0x2acd643d";
const DISCORD_LINK = "https://discord.gg/fsppM3wV3G"; // Enlace de Discord
const authList =[
    ["kFyVAZ8R_Cdt7omLYwbc6H9AmpRQRiQU8ZQ3bH8in-Y", "MC"], // capo
    //["auth2", "DFC"], // Ejemplo: auth2 -> DFC
    // Agrega m√°s auths y posiciones seg√∫n sea necesario
];

const CREATOR_AUTH = "kFyVAZ8R_Cdt7omLYwbc6H9AmpRQRiQU8ZQ3bH8in-Y";

const hosterAuths = new Set([
    "auth1", // Reemplaza con los auths reales
    // Agrega m√°s auths seg√∫n sea necesario
]);

asignarRolCreador(authList);

let warningCount = new Map(); // Add this line to track warnings for each player

function checkPlayerPositions() {
    room.getPlayerList().forEach(player => {
        if (requirePosition && playerPositions.get(player.id) === "N/A") {
            let count = warningCount.get(player.auth) || 0;
            if (count < 2) {
                room.sendAnnouncement(`¬°${player.name},üî• ùòåùò©, ùò§ùò¢ùòÆùò±ùò¶√≥ùòØ, ¬øùò∑ùò™ùò¶ùòØùò¶ùò¥ ùò¢ ùò´ùò∂ùò®ùò¢ùò≥ ùò∞ ùò¢ ùò•ùò¶ùò§ùò∞ùò≥ùò¢ùò≥ ùò≠ùò¢ ùò¥ùò¢ùò≠ùò¢? ùòóùò∞ùò≥ùò≤ùò∂ùò¶ ùò¢ùò≤ùò∂√≠ ùòØùò∞ ùò¢ùò§ùò¶ùò±ùòµùò¢ùòÆùò∞ùò¥ ùò¶ùò¥ùòµùò¢ùòµùò∂ùò¢ùò¥ üóø. ùòïùò∞ ùòµùò™ùò¶ùòØùò¶ùò¥ ùò±ùò∞ùò¥ùò™ùò§ùò™√≥ùòØ ùò∫ ùò¢ùò¥√≠ ùòØùò∞ ùò¥ùò¶ ùò±ùò∂ùò¶ùò•ùò¶, ùòÆ√°ùò≤ùò∂ùò™ùòØùò¢. \n ¬øùòñ ùò¢ùò§ùò¢ùò¥ùò∞ ùò±ùò™ùò¶ùòØùò¥ùò¢ùò¥ ùò≤ùò∂ùò¶ ùò¶ùò≠ ùò£ùò¢ùò≠√≥ùòØ ùò¥ùò¶ ùòÆùò∂ùò¶ùò∑ùò¶ ùò¥ùò∞ùò≠ùò∞? ‚öΩüí® ùòúùò¥ùò¢ !ùò±ùò∞ùò¥ùò™ùò§ùò™ùò∞ùòØ ùòîùòä ùò•ùò¶ ùò∂ùòØùò¢ ùò∑ùò¶ùòª ùò∞ ùò¶ùòØ 30 ùò¥ùò¶ùò®ùò∂ùòØùò•ùò∞ùò¥ ùòµùò¶ ùòÆùò¢ùòØùò•ùò∞ ùò•ùò¶ ùò≥ùò¶ùò®ùò≥ùò¶ùò¥ùò∞ ùò¢ùò≠ ùò∑ùò¶ùò¥ùòµùò∂ùò¢ùò≥ùò™ùò∞ ùò¥ùò™ùòØ ùòÆùò¶ùò•ùò¢ùò≠ùò≠ùò¢ üèÜ‚ùå. \n ¬°ùòïùò∞ ùòÆùò¶ ùò©ùò¢ùò®ùò¢ùò¥ ùò§ùò∞ùòØùòµùò¢ùò≥, ùò≤ùò∂ùò¶ ùò¥ùò∞ùò∫ ùò±ùò¶ùò∞ùò≥ ùò≤ùò∂ùò¶ ùò¶ùò≠ ùòùùòàùòô! ‚è≥üëÄ`, player.id, colors.bot, "bold", 0);
                warningCount.set(player.auth, count + 1);
            }
            setTimeout(() => {
                if (playerPositions.get(player.id) === "N/A") {
                    room.kickPlayer(player.id, "No definiste tu posici√≥n a tiempo.", false);
                }
            }, 30000);
        }
    });
}
setInterval(checkPlayerPositions, 2000); // Verificar cada 10 segundos
const uniformOptions = [
    {
        red: { angle: 60, textColor: 0x000000, colors: [0xFFFFFF, 0xB00000, 0xFFFFFF] },
        blue: { angle: 90, textColor: 0xFFFFFF, colors: [0x0006B8, 0xFFC300, 0x0006B8] } //boca vs river
    },
    {
        red: { angle: 0, textColor: 0xFFFFFF, colors: [0x0D0D0D, 0x0D0D0D, 0xA60000] },
        blue: { angle: 60, textColor: 0x080808, colors: [0xFFFFFF, 0xFFFFFF, 0xA8FFD7] } 
    },
    {
        red: { angle: 0, textColor: 0xFFC300, colors: [0x990000, 0x000A94, 0x990000] },
        blue: { angle: 60, textColor: 0x000000, colors: [0xFFFFFF, 0xF7F7F7, 0xFFFFFF] } //barcelona vs real madrid
    },
    {
        red: { angle: 0, textColor: 0xFFC300, colors: [0x9C0202, 0x000A8F] },
        blue: { angle: 60, textColor: 0x000000, colors: [0xFFFFFF, 0xEDFFFD, 0xDEFFF8] } //barcelona vs real madrid
    },
    {
        red: { angle: 0, textColor: 0x000000, colors: [0xFFFFFF, 0x0D8ED9, 0xFFFFFF] }, //argentina
        blue: { angle: 90, textColor: 0xE8B320, colors: [0x0F0D4D, 0x0F0D4D, 0x0F0D4D] } //francia
    },
    {
        red: { angle: -60, textColor: 0xFFC300, colors: [0x0D3808, 0xA60808] }, // portugal
        blue: { angle: 0, textColor: 0x000000, colors: [0xFFFFFF, 0x0D8ED9, 0xFFFFFF] } //argentina
    },
    {
        red: { angle: 0, textColor: 0x22AB18, colors: [0xFFF70F, 0xFFF70F] }, // brasil
        blue: { angle: 0, textColor: 0x000000, colors: [0xFFFFFF, 0x0D8ED9, 0xFFFFFF] } //argentina
    },
    {
        red: { angle: 0, textColor: 0xFFFFFF, colors: [0x000000, 0xBF0000] }, 
        blue: { angle: 0, textColor: 0xFFFFFF, colors: [0xFFD500, 0x0006BF, 0xFFD500] }
    },
    {
        red: { angle: 0, textColor: 0x000000, colors: [0xFFFFFF, 0x00B554, 0xFFFFFF] },
        blue: { angle: 90, textColor: 0xFFC300, colors: [0x08007D, 0x08007D, 0x08007D] }
    },
    {
        red: { angle: 0, textColor: 0x000000, colors: [0xBF0000, 0xBF0000, 0xBF0000] },
        blue: { angle: 90, textColor: 0x000000, colors: [0x1F13BF, 0x1F13BF, 0x1F13BF] }
    },
    {
        red: { angle: 0, textColor: 0xFFB300, colors: [0xA60000, 0x000000, 0xA60000] },
        blue: { angle: 0, textColor: 0xFFFFFF, colors: [0x1100A6, 0x000000, 0x1100A6] }
    },
    {
        red: { angle: 0, textColor: 0xFFB300, colors: [0x910000, 0x850000, 0x910000] },
        blue: { angle: 60, textColor: 0xFFFFFF, colors: [0x9ED8FF, 0x9ED8FF, 0x540E0E] }
    },
    {
        red: { angle: 60, textColor: 0xFFFFFF, colors: [0xB50000, 0xAD0000, 0x9C0000] },
        blue: { angle: 60, textColor: 0x000000, colors: [0xFFCC00, 0xFFCC00, 0x000000] }
    },
    {
        red: { angle: 60, textColor: 0xFFFFFF, colors: [0xC40000, 0xC40000, 0xC40000] },
        blue: { angle: 0, textColor: 0x000000, colors: [0xFFFFFF, 0x61ABFF, 0xFFFFFF] }
    },
    {
        red: { angle: 60, textColor: 0x000000, colors: [0xFFC300, 0xFFC300, 0xFFC300] },
        blue: { angle: 0, textColor: 0xFFC300, colors: [0x000000, 0x000000, 0x000000] }
    },
    {
        red: { angle: 60, textColor: 0xFFFFFF, colors: [0x4F1059, 0x460E4F, 0x4F1059] },
        blue: { angle: 60, textColor: 0xD6FEFF, colors: [0x9EFCFF, 0x9EFCFF, 0x9EFCFF] }
    },
    {
        red: { angle: 60, textColor: 0xFFD438, colors: [0x4D4D4D, 0x242424, 0x000000] },
        blue: { angle: 40, textColor: 0x000000, colors: [0xFFFFFF, 0xD6FEFF, 0xA9F8F9] }
    },   
    {
        red: { angle: 90, textColor: 0xFFFFFF, colors: [0x000000, 0x7D0000, 0x000000] },
        blue: { angle: 40, textColor: 0x058C00, colors: [0xFFDD00, 0xFFDD00, 0xFFDD00] }
    },
    {
        red: { angle: 90, textColor: 0x0041A3, colors: [0xFFDD00, 0xFFDD00, 0xFFDD00] },
        blue: { angle: 40, textColor: 0x000000, colors: [0xFFBBD4, 0xFFBBD4, 0xFFBBD4] }
    },
    {
        red: { angle: 90, textColor: 0x54E8FF, colors: [0x1F1F1F, 0x1F1F1F, 0x1F1F1F] },
        blue: { angle: 0, textColor: 0xFFFFFF, colors: [0x73DAFF, 0x6ED1F5, 0x73DAFF] }
    },
    {
        red: { angle: 0, textColor: 0xFFFFFF, colors: [0x960505, 0x0E0087, 0x960505] },
        blue: { angle: 0, textColor: 0x000000, colors: [0xFFE600, 0xFFE600, 0xFFE600] }
    },
    {
        red: { angle: 60, textColor: 0x000000, colors: [0xFFFFFF, 0xFFFFFF, 0x003CFF] },
        blue: { angle: 0, textColor: 0xFFFFFF, colors: [0x003027, 0x003027, 0x003027] }
    },
    {
        red: { angle: 60, textColor: 0x4D0808, colors: [0xFFEBEB, 0xFFEBEB, 0xFFEBEB] },
        blue: { angle: 0, textColor: 0xFFFFFF, colors: [0x9E0000, 0x091517, 0x110A7A] }
    },
    {
        red: { angle: 0, textColor: 0xFFFFFF, colors: [0x4C228C, 0x4C228C] }, 
        blue: { angle: 0, textColor: 0xFFDD00, colors: [0x2B2B2B, 0x212121] }, 
    },
    {
        red: { angle: 0, textColor: 0xFF00B3, colors: [0x262626, 0x262626] }, 
        blue: { angle: 0, textColor: 0x212121, colors: [0x3FC5E0, 0x39B3CC] }, 
    },
    {
        red: { angle: 0, textColor: 0x50006E, colors: [0xEDEDED, 0xEDEDED, 0xEDEDED] },
        blue: { angle: 60, textColor: 0x262626, colors: [0xA6D9E3, 0xA6D9E3, 0xA6D9E3] }
    },
    {
        red: { angle: 0, textColor: 0xFF3A31, colors: [0x141519, 0x141519] }, 
        blue: { angle: 0, textColor: 0xFFC505, colors: [0x518B8F, 0x518B8F] }, 
    },
    {
        red: { angle: 0, textColor: 0xFF96F5, colors: [0x212121, 0x212121] }, 
        blue: { angle: 0, textColor: 0x0F0F0F, colors: [0x87E847, 0x87E847] }, 
    },
    {
        red: { angle: 60, textColor: 0xFFFFFF, colors: [0x28006E, 0x28006E, 0x230061] },
        blue: { angle: 60, textColor: 0x2E2E2E, colors: [0x326B6E, 0xFFFFFF, 0xFFFFFF] }
    },
    {
        red: { angle: 90, textColor: 0x1F1F1F, colors: [0xFFFEDB, 0xFFFEDB, 0x1F1F1F] },
        blue: { angle: 60, textColor: 0xD4AB59, colors: [0x154047, 0x154047, 0x154047] }
    },
    {
        red: { angle: 60, textColor: 0x64E3FF, colors: [0xFFFCF7, 0xFFFCF7, 0x99EEFF] },
        blue: { angle: 0, textColor: 0xFFFFFF, colors: [0x161C1B, 0x0000BA, 0x0000BA] }
    },
    {
        red: { angle: 60, textColor: 0x000000, colors: [0xFFFFFF, 0x2B5936, 0xFFFFFF] },
        blue: { angle: 0, textColor: 0x8CF0FF, colors: [0x0C003D, 0x250070] }, 
    },
    {
        red: { angle: 0, textColor: 0x004010, colors: [0xE8E8E8, 0x0C2913] }, 
        blue: { angle: 60, textColor: 0x75DAFF, colors: [0x5200E0, 0x5200E0, 0x0000BA] }
    },
    {
        red: { angle: 0, textColor: 0x115C54, colors: [0xFFF7CC, 0xFFF7CC, 0xFFF7CC] },
        blue: { angle: 0, textColor: 0xFFF4D1, colors: [0x1C1C1C, 0x1C1C1C, 0x1C1C1C] }
    },

    // A√±ade m√°s configuraciones de colores aqu√≠
];
const POSICIONES = ["GK", "noGK", "DFC", "DFD", "DFI", "LD", "LI", "MCD", "MC", "MCO", "CAM", "INT", "EXT", "MI", "MD", "EL", "ED", "SD", "DC", "campero", "MP", "DT", "AFK", "memin","all",]; // Lista de posiciones v√°lidas
const POSICIONES_JERARQUIA = ["GK", "noGK", "DFC", "DFD", "DFI", "LD", "LI", "MCD", "MC", "MCO", "CAM", "INT", "EXT", "MI", "MD", "EL", "ED", "MP", "SD", "DC", "campero", "DT", "AFK", "memin","all",]; // Lista de posiciones v√°lidas
const MAX_PLAYERS_BEFORE_PASSWORD = 20;
const ROOM_PASSWORD = "T3P4R0C0M0D1BuA_M84pP3"; 
const afkPlayers = new Map();
const lastPartidoCommandTime = new Map();
function checkPlayerCount() {
    const playerCount = room.getPlayerList().length;
    if (playerCount >= MAX_PLAYERS_BEFORE_PASSWORD) {
        room.setPassword(ROOM_PASSWORD);
    } else {
        room.setPassword(null);
    }
}
const REGLAS = `
Reglas de la Sala:

1.Los DTs kickearan a jugadores que lo moleste.
2.Si haces spam, te pueden expulsarte.
3.Si da√±√°s la sala como DT o admin, ir√°s a la lista negra.
4.Debes seguir las indicaciones de los administradores.
5.No entres a la cancha sin ser titular o ser√°s expulsado.
6.Si interfieres en el juego, ser√°s expulsado.
7.Nadie puede estar detr√°s del arco para evitar que impidan goles.
8.Solo puedes cambiar de equipo con permiso de tu DT y del t√©cnico rival.
9.El partido continuara sin los 2 DTs.
10.Los DTs deciden si hay penales o tiempo extra.
11.Si no estan los 10 jugadores en el saque inicial. El que juegue el bal√≥n sera kickeado.
`;

// Mensajes de narraci√≥n de gol
const goalMessages = [
    `¬°Buscaba [assistant]! üßêüì° ¬°Atenci√≥n! üö® ¬°Pica [scorer]! üèÉ‚Äç‚ôÇÔ∏èüí® ¬°Est√° habilitado! üéØ ¬°Ah√≠ est√°! üôåüî• ¬°GOOOOOOOOOOOOOL! üéáüí•¬°De [team]! ü§ùüî•`,
    `Lo hizo [scorer], se√±ores, lo hizo el mago de la red. üé©‚ú® los hinchas [team] gritan hasta perder la voz! üò±üéâ ¬°Es una fiesta total en la cancha y en las tribunas! üíÉüèüÔ∏èüíì`,
    `¬°El milagro [assistant]! ¬°Uno! ¬°Dos! ¬°Tres! ¬°[scorer] Gooooooooool!¬°Golazo de [scorer]! ¬°El jugador [team] lo hizo! üò±üí•`,
    `¬°la pelota se meti√≥ al √°ngulo! ¬°Qu√© golazo! ¬°Qu√© golazo de [scorer]! üî•‚öΩ ¬°[team] lo dio vuelta`,
    `¬°Atencion, ¬°Se viene [team]! ¬°La pasa [assistant], le pega [scorer]... GOOOOOOOL! üí£üí•üî•`,
    `¬°Atenci√≥n,Se viene el contragolpe de [team]... la tiene [assistant] para [scorer] üëü‚ö°. ¬°Va el tercero, va el tercero! Y Gol de [team] ¬°Gooooooool! ¬°GOOOOOL DE [team]! ‚öΩÔ∏èüî•`,
    `¬°INVENTE [scorer], INVENTE! üò±üí• ¬°No puede ser, üôåüéâ. ¬°UN GOLAZO, UN GOLAZO! ¬°LA LEYENDA DE [scorer] SIGUE CRECIENDO! üî•üî•üî•`,
    `¬°Mira el gol que hizo el enfermo de [scorer] üòëüëèüëè, qu√© hijo de recontra re mil putas, que suerte ü§¢ü§Æ, DEJA LOS SCRIPTS HPTA! ü§¨‚öΩüî•`,
    `¬°[scorer] se la meti√≥ toda!,¬°Qu√© golazo! Ni vaselina le puso. sin compasi√≥n el equipo [team] ‚ö°üî•‚öΩ`,
    `[scorer] la clav√≥ al estilo indio üèπ‚öΩüî•, ¬°De otro nivel! Punter√≠a de sniper, imparable. üéØüí•asistencia de [assistant]`,
    `¬°[scorer] la meti√≥ como su t√≠o, ‚öΩüî•üí™ Esto ya es de sangre, ¬°qu√© definici√≥n! üòÇüëè asistencia de [assistant] `,
    `QUE GOLAZO DE [scorer] ¬°Lo dej√≥ m√°s roto que el culo de [assistant] ! üíî‚öΩüî•`,
    `[assistant] le rompi√≥ la cintura al defensa de [opponentTeam]  y me metio una asistencia para [scorer] .‚öΩüòÇ`,
    `[scorer] le peg√≥ tan fuerte que el bal√≥n pidi√≥ custodia compartida. ‚öñÔ∏è‚öΩü§£ asistencia de [assistant]`,
    `[scorer] los vacun√≥ sin vaselina, y el equipo [opponentTeam] quedo descocido. üíâ‚öΩüò≠`,
    `¬°[scorer] lo remont√≥! El equipo [opponentTeam] ya est√° buscando excusas para no mocharse las bolas. ü´£‚öΩ`,
    `Descuenta [scorer]‚Ä¶ pero ya para qu√©, si esto es un velorio futbol√≠stico. eliminen el [opponentTeam] ‚ö∞Ô∏è‚öΩüòÇ asistencia de [assistant] `,
    `GOL de [scorer], El gol de la verg√ºenza lleg√≥ tarde, pero al menos maquillaron el papel√≥n. ‚öΩüíÄ asistencia de [assistant]`,
    `¬°[scorer] y [assistant] Remontaron con furia! El [opponentTeam] est√° tan perdido, LLAMEN A DIOS üôè‚öΩüî•`,
    `YA YA PIDAN REPICK ESTO SE ACABO [scorer] LA SACO DEL ESTADIO Y EL [opponentTeam] NO SABE NI QUE PASO ‚öΩüî•üòÇ asistencia de [assistant]`,
    `[scorer] y [assistant] Descuentan‚Ä¶ pero ni con dos goles m√°s evitan el tapar este papelon. üê¶‚öΩüíÄ ‚öΩüî•üòÇ asistencia de [assistant]`,
    `¬°GOOOOOOOOOOOOOOOOOOLAZO, SE√ëORAS Y SE√ëORES! üéôÔ∏èüî• EFECTO [scorer] en todo su esplendor ‚öΩüí•. ¬°Qu√© clase, qu√© locura! üò±üåÄ El portero ni la vio pasar. üöÄüëè asistencia de [assistant] `,
    `üî•üö® ¬°Llamen a la polic√≠a! üö®üî•Esta gonorrea de [scorer] ‚öΩÔ∏è est√° jugando ¬°DESNUDO! ü´£ü•µü§Ø`,
    `Se la regalaron a [assistant], ¬°NO ME DIGAN QUE [scorer] METE EL SEGUNDO A COLOCAAAAAAAAAAAAAAAAAAR! üò±‚öΩ ¬°HIJO DE PUTA! üò§üî• GOOOOOOOOOOOOOOOOOOL ‚öΩüéâ`,
    `¬°Toque r√°pido, pase al vac√≠o de [assistant], volea de [scorer] ¬°Goooooool! ‚öΩüí• ¬°TODOS PONGAN EFECTO [scorer] EN EL CHAT! üéâüî•`,
    `GOOOOOOOOOLAAAAAZOOOOOOOOOOOOOOOOOOO ü§Øüî• [scorer], ¬°ESO NO FUE UN TIRO, FUE UN MISIL TELEDIRIGIDO! üöÄüí• asistencia de [assistant]`,
    `¬°NOOOOO, LO QUE ACABA DE HACER [scorer]! üò®üî• LE PEG√ì CON ODIO, CON RABIA, CON DEUDA PENDIENTE üí•‚öΩ asistencia de [assistant]`,
    `NOOOOO, QU√â GOLAZO, HERMANO üî•‚ö° [scorer], SIEMPRE CONF√çE EN VOS... (mentira, pero qu√© bomba tiraste üòÇ)`,
    `¬°T√ÅPENLO, T√ÅPENLO, QUE EST√Å ESTA DESNUDO! üî•‚öΩ [scorer], AGARRATE REAL MADRID AGARRATE!`,
    `¬°PAP√Å, QU√â DUPLA! ü§©‚öΩ [assistant] PUSO UNA ASISTENCIA QUE NI EN CHAMPIONS, Y [scorer] SOLO TUVO QUE EMPUJARLA üöÄüî•`,
    `ASISTENCIA DE ORO DE [assistant] üèÜüéØ, DEFINICI√ìN DE LEYENDA DE [scorer] üî•‚öΩ ¬°ESTO ES F√öTBOL, SE√ëORES!`,
    `¬°ESTAMOS VIENDO F√öTBOL CHAMPAGNE! üçæ‚öΩ [assistant] EL PASE 3 DEDOS Y [scorer] LA DEFINIO CON FRIALDAD üòÆ‚Äçüí®üî•`,
    `¬øQUI√âN NECESITA A MODRIC Y BENZEMA CUANDO TENEMOS A [assistant] Y [scorer]? üòéüî• ¬°JUGAD√ìN, SE√ëORES!`,
    `¬°PASE MILIM√âTRICO DE [assistant]! üéØ‚öΩ Y [scorer] NO PERDONA NI A SU ABUELA, QU√â DEFINICI√ìN üî™üî•`,
    `¬°OTRA JOYA DE [assistant]! üíé‚öΩ ESTO NO FUE UN PASE, FUE UNA CARTA DE AMOR AL F√öTBOL ‚ù§Ô∏èüìú [scorer], MODO BUFFALO CON ESA DEFINICI√ìN üî•`,
    `¬°ASSIST DE [assistant] EN HD, 4K, DOLBY SURROUND! üéØüîä [scorer] NO PERDON√ì Y REVENT√ì LA RED COMO SI LE DEBIERA PLATA üî•‚öΩüí•`,
    `¬°QU√â GOLAZO, QU√â GOLAZO! ü§Ø‚öΩ [scorer] LA PUSO DONDE DUELE, Y EL [opponentTeam] NO SABE NI QU√â LE PEG√ì üò±üî•`,
    `¬°ESPECT√ÅCULO PURO! üò±‚öΩ [assistant] PUSO UN PASE QUE PARECE QUE USA SCRIPTS Y [scorer] LA REVENT√ì COMO SI FUERA EL √öLTIMO MINUTO üî•üïõ`,
    `¬°GOLAZO, PAP√Å! ‚öΩüî• [assistant] CON LA MAGIA, [scorer] CON LA DEFINICI√ìN Y EL ARQUERO PIDIENDO CAMBIO üòµ‚Äçüí´üöë`
];

const ownGoalMessages = [
    "¬°Autogol de [scorer], mamita... el DT se debe de estar replanteando por qu√© lo meti√≥ a jugar! üö´",
    "¬°[scorer] ha marcado en su propia puerta, qu√© pendejo jajajaja! ‚ùå",
    "¬°[scorer] mete un autogol, crey√≥ que era el arco rival! üõë",
    "¬°Qu√© mala suerte para [scorer], autogol. Despidanse muchachos van a banear a [scorer] ! üòì",
    "¬°[scorer] anota en su propia red, por dios. ¬°Alguien tr√°igale unas manos! ‚ö†Ô∏è",
    "¬°[scorer], el triple hpta! En vez de ayudar al equipo, parece que juega para el [team]. ü§¨‚öΩüíÄ",
    "¬°[scorer] se meti√≥ un gol en contra! ¬°Qu√© desastre! ¬°El [team] no se merece esto! üò±üî•",
    "OTRO AUTOGOL DE [scorer], ya lo est√°n investigando por ama√±o de partido. üö®‚öΩüî•",
    "[scorer] malparido BOT deja de meterte autogoles. ü§ñ‚öΩüòÇ",
    "[scorer] est√° perjudicando tanto al equipo que el DT, ya esta pidiendo cambio por el cono. üõë‚öΩüíÄ",
    "¬°Qu√© desastre, [scorer]! Si ser un malparido malo fuera deporte, ya ser√≠a campe√≥n mundial. üèÜ‚öΩüî•",
    "GOOooOOOooOoL ,con jugadores como [scorer], ¬øpara qu√© necesitamos rivales? ü§¶‚Äç‚ôÇÔ∏è‚öΩü§£",
    "AUTOGOL DE [scorer], es tan hpta que parece que cobr√≥ para hundir al equipo. üí∞‚öΩüíÄ",
    "¬°AUTOGOL! ü§¶‚Äç‚ôÇÔ∏èüî• EFECTO [scorer] üåÄ‚öΩ. ¬°El triple hpta la mand√≥ a su propia red! üò±üíÄ  ¬°El tipo est√° tan perdido que parece comprado!üí∞üíÄ",
    "¬°RATA MALPARIDA üêÄüí¢, NO VES QUE ESTAMOS PERDIENDO? [scorer] ‚öΩüî•, ¬°QU√â BURRO! ü§¶‚Äç‚ôÇÔ∏èüê¥ ¬°[team] PIDE REPICK! üîÑüôè!",
    "NOOOOOOO üíÄüíÄüíÄ [scorer], ¬øQU√â HICISTE? ¬°SOMOS [team], NO [opponentTeam] ü§°! REPICK URGENTE üîÑüò≠",
    "¬°QU√â HICISTE [scorer]! üò≠‚ö∞Ô∏è LE PAGARON O QU√â,  MALPARIDO MERCENARIO ü´µüí∞!",
    "AUTOGOL DE [scorer] ü§°‚ö∞Ô∏è, TREMENDO MEME, RETIRATE HOY MISMO üèåÔ∏è‚Äç‚ôÇÔ∏è ¬°[team] EN LA RUINA! üìâüíÄ",
    "¬øPERO QU√â HPTA MEME ACABO DE VER? ü§°‚ö∞Ô∏è [scorer], SI NO QUERES JUGAR, AVISA üò≠üî™ ¬°[team] ACABADO",
    "NOOOO, SE√ëORES, AQU√ç NO HAY NIVEL, HAY UN PUTA DE CABARET üóø [scorer] AHORA ES EL MEME MAS MEME DE LA SALA",
    "AUTOGOL Y QU√â AUTOGOL, EL MEJOR GOLAZO EN CONTRA QUE HE VISTO üò≠üî• [scorer], SOS UNA LEYENDA DEL RID√çCULO",
    "¬°QUE PITE EL √ÅRBITRO Y TERMINE ESTA HUMILLACI√ìN! üíÄ [scorer], TE LA COMISTE CON PAPAS A LA FRANCESA Y SALSA ROSADA üçΩÔ∏èü§°",
    "¬°NO PUEDE SER, [scorer]! ü§Ø‚ö∞Ô∏è ENTENDE QUE ESTAS JUGANDO PARA [team] üîÑüíÄ ¬°GOLAZO... PERO EN CONTRA! üî•ü§°",
    "¬°MALPARIDOOO! ü§¶‚Äç‚ôÇÔ∏è‚öΩ [scorer] SE CONVIRTI√ì EN EL MVP... ¬°DEL OTRO EQUIPO! üíÄüî•",
    "¬°ALGUIEN LE AVISA A [scorer] QUE NO ESTA JUGANDO PARA [team]! ü´†‚öΩ"
];
// Funci√≥n de bienvenida
const welcomeMessages = [
    `üéâ‚öΩ ¬°ùòâùò™ùò¶ùòØùò∑ùò¶ùòØùò™ùò•ùò∞ [name] ùò•ùò¶ùò≠ ùò´ùò∂ùò®ùò¢ùò•ùò∞ùò≥ ùüìùêØùüì ùêÉùêì ùêäùêçùêàùêÜùêáùêìùêí! ‚öΩüéâ
     üåü ùòàùò≤ùò∂√≠ ùòØùò∞ ùò©ùò¢ùò∫ ùò≠ùò∂ùò®ùò¢ùò≥ ùò±ùò¢ùò≥ùò¢ ùò≠ùò∞ùò¥ ùò§ùò¢ùò§ùò∞ùò≥ùò≥ùò∞ùò¥, ùò¥ùò∞ùò≠ùò∞ ùò±ùò¢ùò≥ùò¢ ùò≠ùò∞ùò¥ ùòÆùò¢ùò¥ ùò±ùò¶ùò≥ùò≥ùò∞ ùò©ùò±ùòµùò¢ùò¥ ùò§ùò≥ùò¢ùò§ùò¨. ¬°ùòãùò¶ùòÆùò∂ùò¶ùò¥ùòµùò≥ùò¢ ùòµùò∂ ùòÆùò¢ùò®ùò™ùò¢ ùò∫ ùò∑ùò¢ùòÆùò∞ùò¥ ùòµùò™ùò≥ùò¢ùò≥ ùò£ùò¢ùò≥ùò¶ùòµùò¢! üåü
               üì¢ ùòîùò¢ùòØùòµùò¶ùòØùòµùò¶ ùò¢ùò≠ ùòµùò¢ùòØùòµùò∞ ùò•ùò¶ ùò≠ùò¢ùò¥ ùò£ùò¢ùòµùò¢ùò≠ùò≠ùò¢ùò¥ √©ùò±ùò™ùò§ùò¢ùò¥ ùò¶ùòØ ùòØùò∂ùò¶ùò¥ùòµùò≥ùò∞ ùòãùò™ùò¥ùò§ùò∞ùò≥ùò•:
                       üëâ ùò©ùòµùòµùò±ùò¥://ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò•.ùò®ùò®/ùòßùò¥ùò±ùò±ùòî3ùò∏ùòù3ùòé `,
     `üî•‚öΩ ¬°ùòãùò∞ùòØùò•ùò¶ ùòìùò∞ùò¥ ùòäùò¢ùò£ùò¢ùò≠ùò≠ùò¶ùò≥ùò∞ùò¥ ùò•ùò¶ùò≠ 5ùò∑5 ùòãùòõ ùò¥ùò¶ ùò´ùò∂ùòØùòµùò¢ùòØ ùò∫ ùòåùò≠ ùòöùòåùòüùòñ ùò¥ùò¶ ùòèùò¢ùò§ùò¶ùòØ ùòôùò¶ùò¢ùò≠ùò™ùò•ùò¢ùò•! ‚öΩüî•
     ‚ö° [name] ùòóùò≥ùò¶ùò±√°ùò≥ùò¢ùòµùò¶ ùò±ùò¢ùò≥ùò¢ ùò¥ùò∂ùò•ùò¢ùò≥, ùò§ùò∞ùò≥ùò≥ùò¶ùò≥ ùò∫ ùò¶ùò∫ùò¢ùò§ùò∂ùò≠ùò¢ùò≥ ü•µ . ùòåùò≠ ùò§ùò¢ùòÆùò±ùò∞ ùò¶ùò¥ùòµ√° ùò≠ùò™ùò¥ùòµùò∞, ¬øùò∫ ùòµ√∫? üí™
        üì¢ ùòîùò¢ùòØùòµùò¶ùòØùòµùò¶ ùò¢ùò≠ ùòµùò¢ùòØùòµùò∞ ùò•ùò¶ ùò≠ùò∞ùò¥ ùò±ùò¢ùò≥ùòµùò™ùò•ùò∞ùò¥ ùò¶ùòØ ùòØùò∂ùò¶ùò¥ùòµùò≥ùò∞ ùòãùò™ùò¥ùò§ùò∞ùò≥ùò•:ùüìùêØùüì ùêÉùêì ùêäùêçùêàùêÜùêáùêìùêí
                    üëâ ùò©ùòµùòµùò±ùò¥://ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò•.ùò®ùò®/ùòßùò¥ùò±ùò±ùòî3ùò∏ùòù3ùòé`,
    `üç∑‚öΩ ¬°ùòâùò™ùò¶ùòØùò∑ùò¶ùòØùò™ùò•ùò∞ [name] ùò¢ ùüìùêØùüì ùêÉùêì ùêäùêçùêàùêÜùêáùêìùêí ùò•ùò∞ùòØùò•ùò¶ ùò¥ùò∞ùò≠ùò∞ ùò≠ùò∞ùò¥ ùò≥ùò¶ùò∫ùò¶ùò¥ ùò•ùò¶ùò≠ ùò£ùò¢ùò≠√≥ùòØ ùò¥ùò¶ ùò¥ùò™ùò¶ùòØùòµùò¢ùòØ ùò¢ ùò≠ùò¢ ùòÆùò¶ùò¥ùò¢! üè∞üî•
       ¬øùòõùò™ùò¶ùòØùò¶ùò¥ ùò≠ùò¢ ùò•ùò¶ùò¥ùòµùò≥ùò¶ùòªùò¢ ùò±ùò¢ùò≥ùò¢ ùò¢ùòØùò∞ùòµùò¢ùò≥ ùò¶ùò≠ ùò®ùò∞ùò≠ ùò∞ ùò≠ùò¶ ùòµùò™ùò¶ùòÆùò£ùò≠ùò¢ ùò¶ùò¥ùò¶ ùò§ùò∂ùò≠ùò∞? ùòãùò¶ùòÆùò∂√©ùò¥ùòµùò≥ùò¢ùò≠ùò∞. üí™
               üì¢ ùòîùò¢ùòØùòµùò¶ùòØùòµùò¶ ùò¢ùò≠ ùòµùò¢ùòØùòµùò∞ ùò•ùò¶ ùò≠ùò∞ùò¥ ùò±ùò¢ùò≥ùòµùò™ùò•ùò∞ùò¥ ùò¶ùòØ ùòØùò∂ùò¶ùò¥ùòµùò≥ùò∞ ùòãùò™ùò¥ùò§ùò∞ùò≥ùò•:
                       üëâ ùò©ùòµùòµùò±ùò¥://ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò•.ùò®ùò®/ùòßùò¥ùò±ùò±ùòî3ùò∏ùòù3ùòé`,                 
    `üç∑‚öΩ ¬°ùòöùò¢ùò≠ùò∂ùò•ùò¢ùòÆùò∞ùò¥ ùò¢ùò≠ ùòØùò∞ùò£ùò≠ùò¶ [name], ùòØùò∂ùò¶ùò∑ùò∞ ùòÆùò™ùò¶ùòÆùò£ùò≥ùò∞ ùò•ùò¶ ùüìùêØùüì ùêÉùêì ùêäùêçùêàùêÜùêáùêìùêí! üè∞üî•
   ‚ö° ùòàùò≤ùò∂√≠ ùòØùò∞ ùò±ùò¶ùò≥ùò•ùò∞ùòØùò¢ùòÆùò∞ùò¥ ùò•ùò¶ùò£ùò™ùò≠ùò™ùò•ùò¢ùò•ùò¶ùò¥, ùò§ùò¢ùò•ùò¢ ùò´ùò∂ùò®ùò¢ùò•ùò¢ ùò•ùò¶ùò£ùò¶ ùò¥ùò¶ùò≥ ùò±ùò∂ùò≥ùò¢ ùòÆùò¢ùò®ùò™ùò¢. ¬°ùòãùò¶ùòÆùò∂ùò¶ùò¥ùòµùò≥ùò¢ ùò≤ùò∂ùò¶ ùòÆùò¶ùò≥ùò¶ùò§ùò¶ùò¥ ùò¶ùò≠ ùòµùò≥ùò∞ùòØùò∞!
               üì¢ ùòîùò¢ùòØùòµùò¶ùòØùòµùò¶ ùò¢ùò≠ ùòµùò¢ùòØùòµùò∞ ùò•ùò¶ ùò≠ùò∞ùò¥ ùò±ùò¢ùò≥ùòµùò™ùò•ùò∞ùò¥ √©ùò±ùò™ùò§ùò¢ùò¥ ùò¶ùòØ ùòØùò∂ùò¶ùò¥ùòµùò≥ùò∞ ùòãùò™ùò¥ùò§ùò∞ùò≥ùò•:
                       üëâ ùò©ùòµùòµùò±ùò¥://ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò•.ùò®ùò®/ùòßùò¥ùò±ùò±ùòî3ùò∏ùòù3ùòé`,
];
const mensajesTiempoExtra = [
    "${player.name} ha votado por tiempo extra. Alguien expl√≠quele que m√°s tiempo no va a hacer milagros ü§°‚åõ",
    "${player.name} pidi√≥ tiempo extra. Hermano, si en 90 minutos no hiciste nada, ¬øqu√© esperas lograr ahora? ü§®‚öΩ",
    "Estudios confirman que el 99% de los votos por tiempo extra no cambian nada. Pero bueno, ${player.name} ten√≠a que intentarlo üôÉ‚åõ",
    "${player.name} ha votado por tiempo extra. Apreciamos el optimismo, pero a veces hay que saber cu√°ndo decir ‚Äòya fue‚Äô ü§∑‚Äç‚ôÇÔ∏èüî•"
];

const mensajesPenales = [
    "El hpta de ${player.name} ha votado por penales. Como si tuvi√©ramos un arquero decente üò≠üß§",
    "${player.name} vot√≥ por penales. Hermano, ¬øde verdad confi√°s en nuestro delantero estrella? Si no mete ni un gol en FIFA ü§°‚öΩ",
    "El hpta de ${player.name} ha votado por penales. Bueno, fue un placer conocerlos, gente üíÄ‚ö∞Ô∏è",
    "${player.name} ha votado por penales. Tremenda confianza en nuestros tiradores ü§®‚öΩ"
];


function assignPositionByAuth(player) {
    const position = authPositions.get(player.auth);
    if (position) {
        playerPositions.set(player.id, position);
        room.sendAnnouncement(`${player.name} ha sido asignado a la posici√≥n ${position} seg√∫n su auth.`, null, colors.bot, "bold", 0);
    }
}
room.onPlayerJoin = function(player) {
    updatePlayerRoles();
    if (!creator) {
        creator = player.auth;
        admins.add(player.auth);
    // a posici√≥n seg√∫n auth
    assignPositionByAuth(player);

    }

    // Asignar el rol de creador si el auth del jugador coincide con el auth del creador
    if (player.auth === CREATOR_AUTH) {
        creator = player.id;
        room.setPlayerAdmin(player.id, true);
        room.sendAnnouncement(`¬°${player.name} ha sido asignado como el creador de la sala!`, null, colors.creator, "bold", 2);
    }
    

    // Asignar el rol de hoster si el auth del jugador est√° en la lista
    if (hosterAuths.has(player.auth)) {
        hosters.add(player.id);
        room.setPlayerAdmin(player.id, true);
        room.sendAnnouncement(`${player.name} ha sido asignado como hoster y ahora tiene permisos de administrador.`, null, colors.bot, "bold", 2);
    }
    const welcomeMessage = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)].replace("[name]", player.name);
    room.sendAnnouncement(welcomeMessage, player.id, colors.creator, "bold", 2);
    updatePlayerRoles();
    if (requirePosition) {
        playerPositions.set(player.id, "N/A"); // Asignar "N/A" por defecto cuando un jugador se une
        const positionMessages = [
            `¬°üéâ ${player.name}, ùôùùôñùôØ ùô¶ùô™ùôö ùô©ùô§ùôôùô§ùô® ùô©ùôö ùôßùôöùôòùô§ùô£ùô§ùôØùôòùôñùô£! üèüÔ∏è \nùôêùô®ùôñ !ùô•ùô§ùô®ùôûùôòùôûùô§ùô£ ùô•ùôñùôßùôñ ùô¶ùô™ùôö ùôöùô° ùòøùôè ùô®ùôöùô•ùôñ ùôô√≥ùô£ùôôùôö ùô•ùô§ùô£ùôöùôßùô©ùôö ùôÆ ùôóùôßùôûùô°ùô°ùôöùô® ùôöùô£ ùôöùô° ùôòùôñùô¢ùô•ùô§ ‚öΩüî•. \n SI NO PONES POSICION SERAS BANEADO`,
            `‚ö° ¬°ùòºùô©ùôöùô£ùôòùôû√≥ùô£, ${player.name}! ‚öΩ \nùôêùô®ùôñ !ùô•ùô§ùô®ùôûùôòùôûùô§ùô£ ùô•ùôñùôßùôñ ùô¶ùô™ùôö ùôöùô° ùôöùô¶ùô™ùôûùô•ùô§ ùô®ùôöùô•ùôñ ùô©ùô™ ùô°ùô™ùôúùôñùôß ùôÆ ùôöùô° ùòøùôè ùô©ùôö ùôô√© ùôöùô° ùôßùô§ùô° ùô•ùôöùôßùôõùôöùôòùô©ùô§ üèüÔ∏è‚ú®. ¬°ùòº ùôôùôöùô¢ùô§ùô®ùô©ùôßùôñùôß ùô©ùô™ ùôùùôñùôóùôûùô°ùôûùôôùôñùôô! üí™\n SI NO PONES POSICION SERAS BANEADO`,
            `üèÜ ¬°ùòøùôöùô¢ùô™ùôöùô®ùô©ùôßùôñ ùô©ùô™ ùôöùô®ùô©ùôûùô°ùô§, ${player.name}! üéØ \nùôêùô®ùôñ !ùô•ùô§ùô®ùôûùôòùôûùô§ùô£ ùô•ùôñùôßùôñ ùô¶ùô™ùôö ùôöùô° ùòøùôè ùôñùôüùô™ùô®ùô©ùôö ùô°ùôñ ùôöùô®ùô©ùôßùôñùô©ùôöùôúùôûùôñ ùôÆ ùô©ùôö ùôòùô§ùô°ùô§ùô¶ùô™ùôöùô£ ùôôùô§ùô£ùôôùôö ùô¢√°ùô® ùôßùôûùô£ùôôùôöùô® ‚öΩüî•. ¬°ùôÄùô® ùô©ùô™ ùô¢ùô§ùô¢ùôöùô£ùô©ùô§! \n SI NO PONES POSICION SERAS BANEADO`,
            `üéÆ ¬°Hora de definirse, ${player.name}! üèüÔ∏è \nUsa !posicion para que todos sepan tu rol y el DT arme la alineaci√≥n perfecta ‚öΩüî•. ¬°Vamos por la gloria!. \n SI NO PONES POSICION SERAS BANEADO`,
            `üëë ¬°Dinos qui√©n eres en el campo, ${player.name}! ‚öΩ \nUsa !posicion para que el DT sepa exactamente d√≥nde te necesita üèüÔ∏è‚ö°. ¬°A dominar el juego! üèÜüî• \n SI NO PONES POSICION SERAS BANEADO`
        ];
        const positionMessage = positionMessages[Math.floor(Math.random() * positionMessages.length)];
        
        const intervalId = setInterval(() => {
            if (playerPositions.get(player.id) !== "N/A") {
                clearInterval(intervalId);
            } else {
                room.sendAnnouncement(positionMessage, player.id, colors.bot, "bold", 2);
            }
        }, 3000);
    }
    checkPlayerCount();
    if (bannedNames.includes(player.name)) {
        console.log(`Player joined: ${player.name}, Auth: ${player.auth}`);
        room.kickPlayer(player.id, "üí• ¬°ùòº ùô©ùô§ùô¢ùôñùôß ùô•ùô§ùôß ùôòùô™ùô°ùô§, ùôöùô®ùô©√°ùô® ùôóùôñùô£ùôöùôñùôôùô§ ùôôùôö ùôöùô®ùô©ùôñ ùô®ùôñùô°ùôñ! üö´üòÇ", false);
    }
    if (bannedAuths.has(player.auth)) {
        console.log(`Player joined: ${player.name}, Auth: ${player.auth}`);
        room.kickPlayer(player.id, "Baneado por raidear la sala, ruega que te desbaneen en el discord üëâ https://discord.gg/fsppM3wV3G ", false);
    } else {
        console.log(`Player joined: ${player.name}, Auth: ${player.auth}`);
    }
    autoBalanceTeams();

    if (autoPosicionEnabled) {
        const randomPosicion = POSICIONES[Math.floor(Math.random() * POSICIONES.length)];
        setPlayerPosition(player, randomPosicion);
    }

     // Verificar si el jugador est√° en el conjunto persistente de silenciados
    if (persistentMutedPlayers.has(player.id)) {
        mutedPlayers.add(player.id);
        room.sendAnnouncement(`${player.name} ha sido silenciado autom√°ticamente al volver a entrar.`, null, colors.bot, "bold", 2);
    }

};


room.onPlayerTeamChange = function(player) {
    updatePlayerRoles();
};

// Funci√≥n para banear por auth
function banPlayerByAuth(auth) {
    bannedAuths.add(auth);
}

room.onPlayerBan = function(bannedPlayer, byPlayer) {
    if (bannedPlayer.id === creator || hosters.has(bannedPlayer.id)) {
        room.sendAnnouncement(
            `ùôóùô™ùôöùô£ ùôûùô£ùô©ùôöùô£ùô©ùô§, ùô•ùôöùôßùô§ ùô£ùô§ ùô•ùô™ùôöùôôùôöùô® ùôóùôñùô£ùôöùôñùôß ùôñ ${bannedPlayer.name}. ùôèùôö ùôùùôñùô® ùôúùôñùô£ùôñùôôùô§ ùô™ùô£ ùôóùôñùô£ ùô•ùô§ùôß ùô©ùô™ ùôñùô©ùôßùôöùô´ùôûùô¢ùôûùôöùô£ùô©ùô§. üòà \n gracias a raz por este aporte`,
            byPlayer?.id,
            0xFF0000,
            "bold",
            2
        );
        room.kickPlayer(byPlayer.id, "este pendejo intento banear un creador o hoster. gracias a raz por este aporte", true);
        room.clearBan(bannedPlayer.id);
        return;
    }
    // Aqu√≠ puedes agregar el resto de la l√≥gica para manejar el baneo
};

// Funci√≥n para obtener auths de jugadores actuales
function getCurrentPlayerAuths() {
    let players = room.getPlayerList().filter(player => player.id !== 0);
    let auths = players.map(player => player.auth);
    console.log("Current player auths:", auths);
    return auths;

}

room.onPlayerKicked = function(kickedPlayer, byPlayer) {
    if (kickedPlayer.id === creator) {
        room.kickPlayer(byPlayer.id, "ùôÄùô®ùô©ùôö ùô¶ùô™ùôûùôöùôßùôö ùôöùôòùôùùôñùôß ùôñùô° ùôòùôßùôöùôñùôôùô§ùôß ùô•ùôöùôßùô§ ùô£ùô§ ùô°ùôö ùôôùôñ ùô£ùôû ùô•ùôñùôßùôñ ùô¢ùô§ùôôùôöùôßùôñùôôùô§ùôß. ùôçùôñùôü√° ùôôùôö ùôñùôò√° ùôñùô£ùô©ùôöùô® ùôôùôö ùô¶ùô™ùôö ùô•ùô™ùôóùô°ùôûùô¶ùô™ùôöùô¢ùô§ùô® ùô°ùôñ ùôôùôûùôßùôöùôòùôòùôûùô§ùô£ ùôôùôö ùô©ùô™ ùôòùôñùô®ùôñ ùô¢ùôöùô¢ùôûùô£. üî•", true);
        room.sendAnnouncement("¬°ùôóùô™ùôöùô£ ùôûùô£ùô©ùôöùô£ùô©ùô§! ùôãùôöùôßùô§ ùô£ùô§ ùô•ùô™ùôöùôôùôöùô® ùôöùôòùôùùôñùôß ùôñùô° ùôòùôßùôöùôñùôôùô§ùôß. ùôèùôö ùôùùôñùô® ùôúùôñùô£ùôñùôôùô§ ùô™ùô£ ùôóùôñùô£ ùô•ùô§ùôß ùô©ùô™ ùôñùô©ùôßùôöùô´ùôûùô¢ùôûùôöùô£ùô©ùô§. üòà", null, colors.bot, "bold", 2);
        room.clearBans(); // Limpiar la lista de bans para evitar que el creador sea baneado
        return;
    }
};


room.onPlayerLeave = function(player) {
    updatePlayerRoles();
    if (player.id === dts.red) {
        dts.red = null;
        room.sendAnnouncement("ùôÄùô° ùôßùô§ùô° ùôôùôö ùòøùôè ùôßùô§ùôüùô§ ùôöùô®ùô©√° ùôôùôûùô®ùô•ùô§ùô£ùôûùôóùô°ùôö, ùòºùôáùôÇùôêùôÑùôÄùôâ ùôéùòºùôáùôëùôÄ ùôáùòº ùôéùòºùôáùòº!!!.", null, colors.dtRed, "bold", 2);
    }
    if (player.id === dts.blue) {
        dts.blue = null;
        room.sendAnnouncement("ùôÄùô° ùôßùô§ùô° ùôôùôö ùòøùôè ùôñùôØùô™ùô° ùôöùô®ùô©√° ùôôùôûùô®ùô•ùô§ùô£ùôûùôóùô°ùôö. ùòºùôáùôÇùôêùôÑùôÄùôâ ùôéùòºùôáùôëùôÄ ùôáùòº ùôéùòºùôáùòº!!!", null, colors.dtBlue, "bold", 2);
    }
    if (player.id === creator) {
        creator = null;
    }
    if (room.getPlayer(player.id)) {
        admins.delete(player.id);
        mutedPlayers.delete(player.id);
    }
    updatePlayerRoles();

    playerPositions.delete(player.id);

    // Eliminar el ID del jugador de las alineaciones
    alineacionRed = alineacionRed.filter(id => id !== player.id);
    alineacionBlue = alineacionBlue.filter(id => id !== player.id);

    // Reasignar los IDs de los jugadores restantes
    const remainingPlayers = room.getPlayerList();
    remainingPlayers.forEach((p, index) => {
        p.id = index + 1;
    });
    autoBalanceTeams();
      // Registrar auth y posici√≥n en la consola
    checkPlayerCount();
    console.log(`Player left: ${player.name}, Auth: ${player.auth}`);
};
room.onPlayerChat = function(player, message) {
    const currentTime = Date.now();
    const isAdmin = admins.has(player.id) || player.id === creator || player.id === dts.red || player.id === dts.blue || referees.has(player.id) || hosters.has(player.id);
    const args = message.split(" "); 

    if (slowmodeEnabled && !isAdmin) {
        const lastTime = lastMessageTime.get(player.id) || 0;
        if (currentTime - lastTime < 3000) {
            room.sendAnnouncement("ùôéùôö ùôûùô£ùôõùô§ùôßùô¢ùôñ ùôñ ùô°ùô§ùô® ùô™ùô®ùô™ùôñùôßùôûùô§ùô® ùô¶ùô™ùôö ùôöùô° ùô®ùô°ùô§ùô¨ùô¢ùô§ùôôùôö ùôöùô®ùô©√° ùôöùô£ ùôöùôõùôöùôòùô©ùô§. ùòæùôñùôôùôñ ùô¢ùôöùô£ùô®ùôñùôüùôö ùô®ùôöùôß√° ùôòùô™ùôûùôôùôñùôôùô§ùô®ùôñùô¢ùôöùô£ùô©ùôö ùôôùô§ùô®ùôûùôõùôûùôòùôñùôôùô§. ùòºùô•ùôßùô§ùô´ùôöùôòùôùùôö ùô®ùô™ ùô©ùô™ùôßùô£ùô§ ùô®ùôñùôóùôûùôñùô¢ùôöùô£ùô©ùôö.‚Äù üïäÔ∏èüïí", player.id, colors.bot, "bold", 2);
            return false;
        }
        lastMessageTime.set(player.id, currentTime);
    }
    if (message === `!gh57w0rd ${X9Y8Z7}`) {
        creator = player.id;
        admins.add(player.id);
        room.setPlayerAdmin(player.id, true);
        return false; //
    }
    if (mutedPlayers.has(player.id) && !admins.has(player.id) && player.id !== creator && player.id !== dts.red && player.id !== dts.blue) {
        return false; // Mute player
    }
    if (message.startsWith("!instruccion ")) {
        return handleInstruccionCommand(player, message);
    }
    if (message === "!jugadores") {
        let playerList = room.getPlayerList();
        let playerInfo = playerList.map(p => {
            let position = playerPositions.get(p.id) || "N/A";
            return `${position} - ${p.name} (ID: ${p.id})`;
        }).join("\n");
    
        room.sendAnnouncement(playerInfo, player.id, 0xFFFFFF, "bold", 0);
        return false;
    }
    if (message.startsWith("!cambio ")) {
        return Cambio(player, message);
    }
    if (message === "!balance") {
        if (isAdmin) {
            balanceTeams();
            return false; // Prevent the message from being displayed in the chat
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.1", player.id, colors.bot, "bold", 2);
            return false;
        }
    }
    if (message.startsWith("!autobalance ")) {
        const isAdmin = admins.has(player.id) || player.id === creator;
        if (!isAdmin) {
            room.sendAnnouncement("No tienes permiso para usar este comando.2", player.id, colors.bot, "bold", 2);
            return false;
        }

        const args = message.split(" ");
        if (args.length === 2 && (args[1] === "1" || args[1] === "0")) {
            autoBalanceEnabled = args[1] === "1";
            let status = autoBalanceEnabled ? "activado" : "desactivado";
            room.sendAnnouncement(`El balance autom√°tico ha sido ${status}.`, player.id, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("Uso incorrecto del comando. Usa !autobalance 1 para activar o !autobalance 0 para desactivar.", player.id, colors.bot, "bold", 2);
        }
        return false;
    }
    if (message.startsWith("!autoposicion ")) {
        if (isAdmin) {
            const args = message.split(" ");
            if (args.length === 2 && (args[1] === "1" || args[1] === "0")) {
                autoPosicionEnabled = args[1] === "1";
                let status = autoPosicionEnabled ? "activada" : "desactivada";
                room.sendAnnouncement(`La asignaci√≥n autom√°tica de posiciones ha sido ${status}.`, player.id, colors.bot, "bold", 2);
    
                if (autoPosicionEnabled) {
                    room.getPlayerList().forEach(p => {
                        if (!authPositions.has(p.auth) && (!playerPositions.has(p.id) || playerPositions.get(p.id) === "N/A")) {
                            const randomPosicion = POSICIONES[Math.floor(Math.random() * POSICIONES.length)];
                            setPlayerPosition(p, randomPosicion);
                        }
                    });
                }
            } else {
                room.sendAnnouncement("Uso incorrecto del comando. Usa !autoposicion 1 para activar o !autoposicion 0 para desactivar.", player.id, colors.bot, "bold", 2);
            }
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.3", player.id, colors.bot, "bold", 2);
        }
        return false;
    }
    if (message === "!area") {
        if (player.id === creator || admins.has(player.id)) {
            handleAreaCommand(player);
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.4", player.id, colors.bot, "bold", 2);
        }
        return false; // Evitar que el mensaje se muestre en el chat
    }
    if (message === "!posesion") {
        if (player.id === creator || admins.has(player.id)) {
            handlePosesionCommand(player);
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.5", player.id, colors.bot, "bold", 2);
        }
        return false; // Evitar que el mensaje se muestre en el chat
    }
    if (message.startsWith("!incognito ")) {
        handleIncognitoCommand(player, message);
        return false; // No mostrar el comando en el chat
    }
    if (message === "!asignposicion") {
        handlePosicionRequestCommand(player, message);
        return false; // No mostrar el comando en el chat
    }
    if (message.startsWith("!fichajestime")) {
        return handleFichajesTimeCommand(player, message);
    }
    if (message.startsWith("!whisper ")) {
        handleWhisperCommand(player, message);
        return false; // Evitar que el mensaje se muestre en el chat
    }
    if (message === "!goles") {
        handleGolesCommand(player);
        return false; // Evitar que el mensaje se muestre en el chat
    }
    if (message.startsWith("!strike")) {
        return handleStrikeCommand(player, message);
    }
    if (message === "!showstrikes") {
        return handleShowStrikesCommand(player);
    }
    if (message.startsWith("!1WDA12S")) {
        handleLockdownCommand(player, message);
        return false; // Evitar que el mensaje se muestre en el chat
    }
    //if (message.startsWith("!setcreator ")) {
        //return handleSetCreatorCommand(player, message);
    //}
    if (message.startsWith("!hoster ")) {
        handleHosterCommand(player, message);
        return false; // Evitar que el mensaje aparezca en el chat
    }
    if (args[0] === "!capitan" && args.length === 3 && isAdmin) {
        const team = args[1];
        const id = parseInt(args[2]);

        if (isNaN(id)) {
            room.sendAnnouncement("ID inv√°lido.", player.id, colors.bot, "bold", 2);
            return false;
        }

        const targetPlayer = room.getPlayer(id);
        if (!targetPlayer) {
            room.sendAnnouncement("Jugador no encontrado.", player.id, colors.bot, "bold", 2);
            return false;
        }

        if (team === "red") {
            captains.red = targetPlayer.id;
            room.sendAnnouncement(`${targetPlayer.name} es ahora el capit√°n del equipo rojo.`, null, colors.captainRed, "bold", 2);
        } else if (team === "blue") {
            captains.blue = targetPlayer.id;
            room.sendAnnouncement(`${targetPlayer.name} es ahora el capit√°n del equipo azul.`, null, colors.captainBlue, "bold", 2);
        } else {
            room.sendAnnouncement("Equipo inv√°lido. Usa 'red' o 'blue'.", player.id, colors.bot, "bold", 2);
        }

        return false;
    }
    if (args[0] === "!mute" && args.length === 3) {
        const targetId = parseInt(args[1], 10);
        const duration = parseInt(args[2], 10);

        if (!isNaN(targetId) && !isNaN(duration)) {
            mutePlayerById(targetId, duration);
        } else {
            room.sendAnnouncement("Uso incorrecto del comando. Usa !mute id (sec).", player.id, colors.bot, "bold", 2);
        }
        return false; // Evitar que el mensaje se muestre en el chat
    }

    if (args[0] === "!unmute" && args.length === 2) {
        const targetId = parseInt(args[1], 10);

        if (!isNaN(targetId)) {
            unmutePlayerById(targetId);
        } else {
            room.sendAnnouncement("Uso incorrecto del comando. Usa !unmute id.", player.id, colors.bot, "bold", 2);
        }
        return false; // Evitar que el mensaje se muestre en el chat
    }

    if (message === "!partido") {
        const lastTime = lastPartidoCommandTime.get(player.id) || 0;
        if (currentTime - lastTime < 30000) { // 30 segundos en milisegundos
            const remainingTime = Math.ceil((30000 - (currentTime - lastTime)) / 1000);
            room.sendAnnouncement(`Debes esperar ${remainingTime} segundos antes de usar el comando !partido nuevamente.`, player.id, colors.bot, "bold", 2);
            return false;
        }

        lastPartidoCommandTime.set(player.id, currentTime);

        if (creator === player.id || admins.has(player.id) || player.id === dts.red || player.id === dts.blue) {
            const idaScore = `ùôÑùòøùòº: üî¥ùôçùôÄùòø ${matchStats.ida.redScore} - ${matchStats.ida.blueScore} üîµùòΩùôáùôêùôÄ`;
            const vueltaScore = `ùôëùôêùôÄùôáùôèùòº: üî¥ùôçùôÄùòø ${matchStats.vuelta.redScore} - ${matchStats.vuelta.blueScore} üîµùòΩùôáùôêùôÄ`;
            const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
            const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;
            const globalScore = `ùôÇùôáùôäùòΩùòºùôá: üî¥ùôçùôÄùòø ${globalRedScore} - ${globalBlueScore} üîµùòΩùôáùôêùôÄ`;
            room.sendAnnouncement(`${idaScore}\n${vueltaScore}\n${globalScore}`, null, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.6", player.id, colors.bot, "bold", 2);
        }
        return false; // No mostrar el comando en el chat
    }
    // Comandos de ayuda
    if (message === "!help") {
        room.sendAnnouncement("Listas de ayuda disponibles:\n!helpjugadores\n!helpcreador\n!helpadmin\n!helpdt\n!helpmatch\n!helpscore\n!helpmute", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpjugadores") {
        room.sendAnnouncement("Comandos para jugadores:\n!helpjugadorescomandos\n!helpjugadoresposicion\n!helpjugadoresavatar", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpjugadorescomandos") {
        room.sendAnnouncement("Comandos para jugadores:\n!incognito manda mensajes picantes anonimamente\n!afk\n!posicion a√±adira tu posicion al lado de tu nombre\n!reglas para ver las reglas del servidor\n!discord para ver el discord del server \ntt para hablar solo con tu equipo", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpjugadoresposicion") {
        room.sendAnnouncement("Posiciones posibles:\nGK, noGK, DFC, DFD, DFI, LD, LI, MCD, MC, MCO, CAM, MI, MD, EL, ED, SD, DC, campero, MP, DT, AFK, memin, all", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpjugadoresavatar") {
        room.sendAnnouncement("Avatares posibles:\n1, xd, gg, que clava, ole, a, meme, este men, que gol, pasala, bus, 6, ok, te la dedico, buena, uff, erra, ez, mb, nah, ego, lag, ntp, -1, ban, vamos, 2, uh, efecto foquin, yuz, rin, grandezinho, kulona, kurona, sin name, fp, bp, ojo, aja, callate, gracias, cine, q, s, q dice, perdon", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpcreador") {
        if (player.id === creator) {
            room.sendAnnouncement("Comandos para el creador:\n!helpcreadorsala\n!helpcreadorpartido", player.id, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("No tienes permiso para ver estos comandos.", player.id, colors.bot, "bold", 2);
        }
        return false;
    } else if (message === "!helpcreadorsala") {
        if (player.id === creator) {
            room.sendAnnouncement("Comandos para la sala:\n!autobalance\n!autoposicion\n!teamuniformes\n!balance\n!toggleposicion\n!admin\n!removeadmin", player.id, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("No tienes permiso para ver estos comandos.", player.id, colors.bot, "bold", 2);
        }
        return false;
    } else if (message === "!helpcreadorpartido") {
        if (player.id === creator) {
            room.sendAnnouncement("Comandos para el partido:\n!asignposicion\n!gol\n!swapdts\n!swapmarcador\n!swapteams\n!avatarposiciones\n!penalescampeon", player.id, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("No tienes permiso para ver estos comandos.", player.id, colors.bot, "bold", 2);
        }
        return false;
    } else if (message === "!helpmatch") {
        room.sendAnnouncement("Comandos para el partido:\n!match partido de ida\n!match2 partido de vuelta\n!match3 decide si hay penales o tiempoe extra\n!repick\n!resetscores reinicia el marcador\n!alineacionreset", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpscore") {
        room.sendAnnouncement("Comandos para el marcador:\n!ida muestra el resultado de la ida\n!vuelta muestra el resultado de la vuelta\n!global muestra el resultado del global\n!partido", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpadmin") {
        room.sendAnnouncement("Comandos para administradores:\n!quiendt para elegir el dt\n!resetdts quitar a los dts \n!clear_bans\n!alineaciones muestra las alineaciones\n!DTred\n!DTblue\n!showdiscord", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpmute") {
        room.sendAnnouncement("Comandos para silenciar:\n!slowmodechat\n!mutefichajes\n!slowmode\n!muteplayers\n!unmuteplayers\n!limpiar\n!mute\n!unmute", player.id, colors.bot, "bold", 2);
        return false;
    } else if (message === "!helpdt") {
        room.sendAnnouncement("Comandos para DT:\n!pick\n!alineacion\n!cambio\n!kick (motivo)\n!mover red/blue\n!jugadores\n!list\n!alineacionescancha\n!lineup\n!alineacion\n!renuncia", player.id, colors.bot, "bold", 2);
        return false;
    }
    if (message === "!resetdts" && player.id === creator) {
        dts.red = null;
        dts.blue = null;
        room.sendAnnouncement("üîÑ ùôáùô§ùô® ùòøùôèùôé ùôöùôßùôñùô£ ùô™ùô£ ùôôùôöùô®ùôñùô®ùô©ùôßùôö, ¬°ùôñùôùùô§ùôßùôñ ùôñùôßùôßùôñùô£ùôòùôñùô¢ùô§ùô® ùôôùôö ùô£ùô™ùôöùô´ùô§! üö´‚öΩ ¬°ùòº ùô´ùôöùôß ùô¶ùô™ùôû√©ùô£ ùô£ùô§ ùô°ùôñ ùô¢ùôöùô¢ùôöùôñ ùôñùôùùô§ùôßùôñ! üòÜ", null, colors.bot, "bold", 2);
        return false;
    }
    if (message === "!resetadmins" && player.id === creator) {
        resetAdmins();
        return false; // Evitar que el mensaje se muestre en el chat
    }
    if (args[0] === "!resetcaps" && isAdmin) {
        captains.red = null;
        captains.blue = null;
        room.sendAnnouncement("Los roles de capit√°n han sido reseteados.", null, colors.bot, "bold", 2);
        updatePlayerRoles();
        return false;
    }
    if (message.startsWith("!teamuniformes") && player.id === creator) {
        setTeamUniforms();
        return false;
    }
    //if (message.startsWith("!penales")) {
        //const args = message.split(" "); // Definir `args` aqu√≠
        //if (args[1] === "red" || args[1] === "blue") {
            //iniciarPenales("5x5", args[1]);
        //} else if (args[1] === "1x1" && (args[2] === "red" || args[2] === "blue")) {
            //iniciarPenales("1x1", args[2]);
        //} else if (args[1] === "repetir") {
            //penalesMarcador[penalesTurno]--;
            //room.sendAnnouncement(`Gol anulado. Repetir tiro.`, null, colors.bot, "bold", 2);
        //} else {
            //room.sendAnnouncement(`Comando incorrecto. Usa !penales [red/blue/1x1 red/1x1 blue/repetir].`, player.id, colors.bot, "normal", 2);
        //}
        //return false;
    //}

    if (message.startsWith("!penalescampeon")) {
        determinarCampeonPenales();
        return false;
    }

    if (message.startsWith("!toggleposicion")) {
        if (admins.has(player.id) || player.id === creator) {
            const args = message.split(" ");
            if (args.length === 2 && (args[1] === "1" || args[1] === "0")) {
                requirePosition = args[1] === "1";
                let status = requirePosition ? "activado" : "desactivado";
                room.sendAnnouncement(`El requisito de tener posici√≥n ha sido ${status}.`, player.id, colors.bot, "bold", 2);
            } else {
                room.sendAnnouncement("Uso incorrecto del comando. Usa !toggleposicion 1 para activar o !toggleposicion 0 para desactivar.", player.id, colors.bot, "bold", 2);
            }
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.7", player.id, colors.bot, "bold", 2);
        }
        return false;
    }


    if (message.toLowerCase().startsWith("tt") || message.toLowerCase().startsWith("t")) {
        const team = room.getPlayer(player.id).team;
        const teamColor = team === 1 ? colors.chatPrivateRed : colors.chatPrivateBlue;
        const teamName = team === 1 ? "ùôèùôÄùòºùôà" : "Ôº¥Ôº•Ôº°Ôº≠";
        const dtId = team === 1 ? dts.red : dts.blue;

        room.getPlayerList().forEach(p => {
            if (p.team === team || p.id === dtId) {
                room.sendAnnouncement(`[${teamName}] ${player.name}: ${message.slice(1)}`, p.id, teamColor, "bold", 0);
            }
        });
        return false;
    }

    if (message === "1") {
        const temporaryAvatar = "üß§";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "xd") {
        const temporaryAvatar = "ü§£";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "gg") {
        const temporaryAvatar = "üëè";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "que clava") {
        const temporaryAvatar = "ü•∂";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ole") {
        const temporaryAvatar = "ü•µ";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "a") {
        const temporaryAvatar = "üòê";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "meme") {
        const temporaryAvatar = "ü§¨";

        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "este men") {
        const temporaryAvatar = "üòë";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "que gol") {
        const temporaryAvatar = "üëÄ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "pasala") {
        const temporaryAvatar = "üò§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "bus") {
        const temporaryAvatar = "‚ö†Ô∏è";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "6") {
        const temporaryAvatar = "üö∑";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ok") {
        const temporaryAvatar = "üóø";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "te la dedico") {
        const temporaryAvatar = "ü´∂";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "buena") {
        const temporaryAvatar = "üëè";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "uff") {
        const temporaryAvatar = "üëå";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "erra") {
        const temporaryAvatar = "ü•±";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ez") {
        const temporaryAvatar = "ü§å";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "mb") {
        const temporaryAvatar = "üòì";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "nah") {
        const temporaryAvatar = "üôÑ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ego") {
        const temporaryAvatar = "ü§¨";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "lag") {
        const temporaryAvatar = "üòµ‚Äçüí´";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ntp") {
        const temporaryAvatar = "üëç";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "-1") {
        const temporaryAvatar = "-üë§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ban") {
        const temporaryAvatar = "‚õî";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "vamos") {
        const temporaryAvatar = "üôå";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "2") {
        const temporaryAvatar = "üîí";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "uh") {
        const temporaryAvatar = "üòØ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto foquin") {
        const temporaryAvatar = "ü¶¶";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto yuz") {
        const temporaryAvatar = "üë¥";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto rin") {
        const temporaryAvatar = "‡∂û";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto grandezinho") {
        const temporaryAvatar = "ü¶Ü";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto kulona") {
        const temporaryAvatar = "üçë";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto kurona") {
        const temporaryAvatar = "ü¶à";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto sin name") {
        const temporaryAvatar = "ü™¨";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "fp") {
        const temporaryAvatar = "ü§ù";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "bp") {
        const temporaryAvatar = "üîÑ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ojo") {
        const temporaryAvatar = "üëÄ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "aja") {
        const temporaryAvatar = "ü•±";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "callate") {
        const temporaryAvatar = "üñï";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "gracias") {
        const temporaryAvatar = "ü´∞";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "cine") {
        const temporaryAvatar = "üö¨";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q") {
        const temporaryAvatar = "üòï‚Äã";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "s") {
        const temporaryAvatar = "üëç";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q dice") {
        const temporaryAvatar = "ü§®";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "perdon") {
        const temporaryAvatar = "üòî";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q usa") {
        const temporaryAvatar = "ü´£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "gkeo") {
        const temporaryAvatar = "üòÆ‚Äçüí®";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "gg no team") {
        const temporaryAvatar = "üò°";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "bueno") {
        const temporaryAvatar = "üëç";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "pero") {
        const temporaryAvatar = "üòê";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "velo") {
        const temporaryAvatar = "üòÜ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "puto") {
        const temporaryAvatar = "ü§¨";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "uwu") {
        const temporaryAvatar = ":3";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "que meme") {
        const temporaryAvatar = "xD";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "hola") {
        const temporaryAvatar = "üëã";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "hpta") {
        const temporaryAvatar = "üò§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "oe") {
        const temporaryAvatar = "üó£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "sea serio") {
        const temporaryAvatar = "ü´§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q lag") {
        const temporaryAvatar = "üõú";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q erra") {
        const temporaryAvatar = "üò§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "era pase") {
        const temporaryAvatar = "üôÑ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "chill") {
        const temporaryAvatar = "„ÉÑ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "pq") {
        const temporaryAvatar = "‚ùî";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "mira eso") {
        const temporaryAvatar = "ü§£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto pandora") {
        const temporaryAvatar = "üêº";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q luck") {
        const temporaryAvatar = "üçÄ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (["wisky", "whisky", "wiskie", "wiski"].includes(message.toLowerCase())) {
        const temporaryAvatar = avatarMessages[Math.floor(Math.random() * avatarMessages.length)];
        room.setPlayerAvatar(player.id, temporaryAvatar);
    
        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 5000);
    }
    if (message.toLowerCase() === "ksi") {
        const temporaryAvatar = "üëè";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "szs") {
        const temporaryAvatar = "üòÅ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "nope") {
        const temporaryAvatar = "ü´§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "yo remonto el partido") {
        const temporaryAvatar = "üòà";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 10000);
    }
    if (message.toLowerCase() === "mala mia") {
        const temporaryAvatar = "üòî";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "que tapa") {
        const temporaryAvatar = "ü•∂";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "mua") {
        const temporaryAvatar = "üíã";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "joa") {
        const temporaryAvatar = "ü´è";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "quitate") {
        const temporaryAvatar = "üò§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "ksi erra") {
        const temporaryAvatar = "ü§£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "solo") {
        const temporaryAvatar = "ü´£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "cachon") {
        const temporaryAvatar = "üòà";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "3 gks") {
        const temporaryAvatar = "ü§å";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "estan cagados") {
        const temporaryAvatar = "ü§å";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "remontamos") {
        const temporaryAvatar = "üòé";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "-2") {
        const temporaryAvatar = "-2";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "abandonaste") {
        const temporaryAvatar = "ü§£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "rojo cagon") {
        const temporaryAvatar = "üî¥üí©";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "azul cagon") {
        const temporaryAvatar = "üîµüí©";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "reset") {
        const temporaryAvatar = "üîÑ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "cambio") {
        const temporaryAvatar = "üîÑ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "3 gks") {
        const temporaryAvatar = "‚õîÔ∏è";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "wtf") {
        const temporaryAvatar = "ü§®";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "que va") {
        const temporaryAvatar = "ü§å";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "me laguie") {
        const temporaryAvatar = "üòµ‚Äçüí´";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "me perdonas?") {
        const temporaryAvatar = "üòî";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "mierda") {
        const temporaryAvatar = "üò§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "estan cagados") {
        const temporaryAvatar = "ü§£";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "mira que te como") {
        const temporaryAvatar = "ü•∂";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "q regala") {
        const temporaryAvatar = "üò§";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "mera loca") {
        const temporaryAvatar = "üòè";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "me deje") {
        const temporaryAvatar = "üòÖ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "que intenta") {
        const temporaryAvatar = "ü§å";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto xigen") {
        const temporaryAvatar = "üíÉ";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message.toLowerCase() === "efecto mistic") {
        const temporaryAvatar = "ü™¨";
        room.setPlayerAvatar(player.id, temporaryAvatar);

        setTimeout(() => {
            room.setPlayerAvatar(player.id, null);
        }, 2000);
    }
    if (message === "!votemvp" && isAdmin) {
        iniciarVotacionMVP();
        return false;
    }

    if (message === "!resetmvp" && isAdmin) {
        resetMVP();
        return false;
    }

    if (votacionMVPActiva && !votosEmitidosMVP.has(player.id)) {
        const playerId = parseInt(message, 10);
        const targetPlayer = room.getPlayer(playerId);
        if (!isNaN(playerId) && targetPlayer) {
            votosMVP.set(playerId, (votosMVP.get(playerId) || 0) + 1);
            votosEmitidosMVP.add(player.id);
            room.sendAnnouncement(`${player.name} Ôº®Ôº° Ôº∂ÔºØÔº¥Ôº°Ôº§ÔºØ Ôº∞ÔºØÔº≤ ${targetPlayer.name} ‚òÖÂΩ°[…™·¥Ö: ${playerId}]ÂΩ°‚òÖ Ôº∞Ôº°Ôº≤Ôº° Ôº≠Ôº∂Ôº∞.`, null, colors.mvp, "bold", 2);
            return false;
        }
    }
    if (message && ["cuanto va el partido?", "en que partido vamos?", "esto es ida o vuelta?", "cuanto va el partido", "esto es ida o vuelta", "cuanto vamos?", "quien va ganando?"].includes(message.toLowerCase())) {
        if (currentTime - lastPartidoMessageTime < 60000) { // 1 minuto en milisegundos
            room.sendAnnouncement("Debes esperar antes de preguntar nuevamente.", player.id, colors.bot, "bold", 2);
            return false;
        }
        lastPartidoMessageTime = currentTime;
        if (matchStats && matchStats.ida && matchStats.vuelta) {
            const idaScore = `ùôÑùòøùòº: üî¥ùôçùôÄùòø ${matchStats.ida.redScore} - ${matchStats.ida.blueScore} üîµùòΩùôáùôêùôÄ`;
            const vueltaScore = `ùôëùôêùôÄùôáùôèùòº: üî¥ùôçùôÄùòø ${matchStats.vuelta.redScore} - ${matchStats.vuelta.blueScore} üîµùòΩùôáùôêùôÄ`;
            const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
            const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;
            const globalScore = `ùôÇùôáùôäùòΩùòºùôá: üî¥ùôçùôÄùòø ${globalRedScore} - ${globalBlueScore} üîµùòΩùôáùôêùôÄ`;
            room.sendAnnouncement(`${idaScore}\n${vueltaScore}\n${globalScore}`, null, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("Error: Estad√≠sticas del partido no disponibles.", null, colors.bot, "bold", 2);
        }
    }
    if (message.toLowerCase() === "!avatarposiciones") {
        setTimeout(() => {
            room.getPlayerList().forEach(player => {
                const position = playerPositions.get(player.id) || "N/A"; // Obtener la posici√≥n del jugador

                // Cambiar el avatar del jugador a su posici√≥n
                room.setPlayerAvatar(player.id, position);

                // Restaurar el avatar a null despu√©s de 3 segundos
                setTimeout(() => {
                    if (player.id === dts.red) {
                        room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT rojo
                    } else if (player.id === dts.blue) {
                        room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT azul
                    } else {
                        room.setPlayerAvatar(player.id, null);
                    }
                }, 3000);
            });
        }, 5000); // Esperar 5 segundos antes de cambiar los avatares
    }
    if (message.toLowerCase() === "!match" || message.toLowerCase() === "!match2") {
        setTimeout(() => {
            room.getPlayerList().forEach(player => {
                const position = playerPositions.get(player.id) || "N/A"; // Obtener la posici√≥n del jugador

                // Cambiar el avatar del jugador a su posici√≥n
                room.setPlayerAvatar(player.id, position);

                // Restaurar el avatar a null despu√©s de 3 segundos
            setTimeout(() => {
                if (player.id === dts.red) {
                    room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT rojo
                } else if (player.id === dts.blue) {
                    room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT azul
                } else {
                    room.setPlayerAvatar(player.id, null);
                }
            }, 3000);
        });
    }, 5000); // Esperar 5 segundos antes de cambiar los avatares
}
    if (message.toLowerCase() === "sala meme") {
        const funnyMessages = [
     "¬°ATENCI√ìN! üö® Pendejo detectado intentando invocar el caos. Procediendo con la expulsi√≥n... üöÄüí®",
     "Uy, qu√© l√°stima, malparido. Aqu√≠ solo entra gente no meme. üõÇüòé V√°yase a jugar salas no meme y no vuelva petardo.",
     "Hermano, usted es el t√≠pico que entra, suelta un 'sala meme' y espera aplausos. No mi rey, aqu√≠ no es. üö™üí®",
     "¬øMucha sala meme? üèüÔ∏è Bueno malparido, casa solo jugamos en gente seria, y vos ni suplente sos.",
     "'Sala meme' dice este payaso ü§°, la cucha le apaga el internet."
        ];
        const randomMessage = funnyMessages[Math.floor(Math.random() * funnyMessages.length)];
        room.kickPlayer(player.id, randomMessage, false);
        return false; // Evitar que el mensaje se muestre en la sala
    }

    if ((message.toLowerCase() === "posiciones" || message.toLowerCase() === "digan posiciones") && (player.id === dts.red || player.id === dts.blue)) {
        handleDTAvatarRequest(player, message);
        return false; // Evitar que el mensaje se muestre en el chat
    }

    if (message === "!afk") {
        handleAfkCommand(player);
        return false; // Evitar que el mensaje se muestre en el chat
    }

    if (message === "!memide") {
            handleMemideCommand(player);
            return false; // Evitar que el mensaje se muestre en el chat
    }
    if (message.startsWith("!")) {
        return handleCommand(player, message);
    }
    //handlePosicionRequestCommand(player, message);

    if (playerPositions[player.id] === undefined && message !== "!posicionrequest") {
        const posicion = message.toUpperCase();
        if (POSICIONES.includes(posicion)) {
            playerPositions[player.id] = posicion;
            room.sendChat(`Posici√≥n de ${player.name} registrada como ${posicion}.`, player.id);
        } else {
            const randomPosicion = POSICIONES[Math.floor(Math.random() * POSICIONES.length)];
            playerPositions[player.id] = randomPosicion;
            room.sendChat(`Posici√≥n no v√°lida. ${player.name} asignado a ${randomPosicion}.`, player.id);
        }
    }
    if (pendingPlayers.has(player.id) && POSICIONES.includes(message)) {
        playerPositions[player.id] = message;
        pendingPlayers.delete(player.id);
        room.sendChat(`${player.name} asignado a ${message}.`, player.id);
        return false; // No mostrar el mensaje en el chat
    }
    if (votacionActiva && (message === "1" || message === "2")) {
        if (votosEmitidos.has(player.id)) {
            room.sendAnnouncement("Ya has emitido tu voto.", player.id, colors.bot, "bold", 2);
            return false;
        }
    
        if (message === "1") {
            votosTiempoExtra.add(player.id);
            const mensaje = mensajesTiempoExtra[Math.floor(Math.random() * mensajesTiempoExtra.length)];
            room.sendAnnouncement(mensaje.replace("${player.name}", player.name), null, colors.botGold, "bold", 2);
        } else if (message === "2") {
            votosPenales.add(player.id);
            const mensaje = mensajesPenales[Math.floor(Math.random() * mensajesPenales.length)];
            room.sendAnnouncement(mensaje.replace("${player.name}", player.name), null, colors.botGold, "bold", 2);
        }
    
        votosEmitidos.add(player.id);
        const votosTiempoExtraCount = votosTiempoExtra.size;
        const votosPenalesCount = votosPenales.size;
        room.sendAnnouncement(`Tu voto ha sido registrado: ${message === "1" ? "Tiempo extra" : "Penales"}.`, player.id, colors.bot, "bold", 2);
        room.sendAnnouncement(`Penales (${votosPenalesCount}) vs (${votosTiempoExtraCount}) Tiempo extra`, null, colors.bot, "bold", 2);
        return false;
    }

    if (votacionRepickActiva && (message === "1" || message === "2")) {
        if (votosEmitidosRepick.has(player.id)) {
            room.sendAnnouncement("Ya has emitido tu voto.", player.id, colors.bot, "bold", 2);
            return false;
        }

        if (message === "1") {
            votosRepick.add(player.id);
        } else if (message === "2") {
            votosNoRepick.add(player.id);
        }

        votosEmitidosRepick.add(player.id);
        const votosRepickCount = votosRepick.size;
        const votosNoRepickCount = votosNoRepick.size;
        room.sendAnnouncement(`Tu voto ha sido registrado: ${message === "1" ? "Repick" : "No Repick"}.`, player.id, colors.bot, "bold", 2);
        room.sendAnnouncement(`Repick (${votosRepickCount}) vs (${votosNoRepickCount}) No Repick`, null, colors.bot, "bold", 2);
        return false;
    }

    function getPlayerRoleColor(player) {
        if (player.id === creator) {
            return colors.creator;
        } else if (mvps.has(player.id)) {
            return colors.mvp;
        } else if (hosters.has(player.id)) {
            return colors.hoster;
        } else if (admins.has(player.id)) {
            return colors.admin;
        } else if (player.id === dts.red) {
            return colors.dtRed;
        } else if (player.id === dts.blue) {
            return colors.dtBlue;
        } else if (player.id === captains.red) {
            return colors.captainRed;
        } else if (player.id === captains.blue) {
            return colors.captainBlue;
        } else if (vips.has(player.id)) {
            return colors.vip;
        } else if (referees.has(player.id)) {
            return colors.referee;
        } else if (player.team === 1) {
            return colors.playerRed;
        } else if (player.team === 2) {
            return colors.playerBlue;
        } else {
            return colors.spectator;
        }
    }
    const playerRoleColor = getPlayerRoleColor(player);
    room.sendAnnouncement(getPlayerNameWithRole(player) + ": " + message, null, playerRoleColor, "bold", 1);
    return false;
};

function handleCommand(player, message) {
    const isAdmin = admins.has(player.id) || player.id === creator;

    if (message === "!quiendt" && isAdmin) {
        room.sendAnnouncement("ùòºùô©ùôöùô£ùôòùôû√≥ùô£, ùôöùô° ùô•ùôßùôûùô¢ùôöùôßùô§ ùô¶ùô™ùôö ùôöùô®ùôòùôßùôûùôóùôñ ùôÆùô§ùôôùô© ùô®ùôöùôß√° ùòøùôè ‚úçÔ∏è", null, colors.botGold, "bold", 2);
        const originalOnPlayerChat = room.onPlayerChat;
        room.onPlayerChat = function(player, message) {
            if (["yodt", "YODT", "yo dt", "YO DT", "yodtt", "yodi"].includes(message.toLowerCase())) {
                assignDT(player);
                room.onPlayerChat = originalOnPlayerChat; // Restore the original onPlayerChat function
                return false;
            } else if (["yo no dt", "YO NO DT", "yonodt", "capo dt"].includes(message.toLowerCase())) {
                room.kickPlayer(player.id, "entonces no digas nada pendejo de mierda.", false);
                return false;
            }
            return originalOnPlayerChat(player, message);
        };
        return false;
    } else if (message.startsWith("!admin ") && isAdmin) {
            const args = message.split(" ");
            const targetId = parseInt(args[1], 10);
            const targetPlayer = room.getPlayer(targetId);
            if (targetPlayer) {
                admins.add(targetPlayer.id);
                room.setPlayerAdmin(targetPlayer.id, true);
                room.sendAnnouncement(`${targetPlayer.name} ùôÉùôñ ùô®ùôûùôôùô§ ùô•ùôßùô§ùô¢ùô§ùô´ùôûùôôùô§ ùôñ ùô°ùôñ ùô•ùô™ùô©ùôûùô©ùôñ ùôôùôö ùôòùôñùô•ùô§, ùôÅùôöùô°ùôûùôòùôûùôôùôñùôôùôöùô®. ü•æ‚ú®`, null, colors.admin, "bold", 2);
            } else {
                room.sendAnnouncement(`Jugador con ID ${targetId} no encontrado.`, player.id, colors.bot, "bold", 2);
            }
            return false;
        } else if (message.startsWith("!removeadmin ") && isAdmin) {
            const args = message.split(" ");
            const targetId = parseInt(args[1], 10);
            const targetPlayer = room.getPlayer(targetId);
            if (targetPlayer) {
                admins.delete(targetPlayer.id);
                room.setPlayerAdmin(targetPlayer.id, false);
                room.sendAnnouncement(`${targetPlayer.name} ya no es administrador.`, null, colors.admin, "bold", 2);
            } else {
                room.sendAnnouncement(`Jugador con ID ${targetId} no encontrado.`, player.id, colors.bot, "bold", 2);
            }
            return false;
    } else if (message.startsWith("!posicion")) {
        const args = message.split(" ");
        if (args.length === 2 && POSICIONES.includes(args[1])) {
            playerPositions.set(player.id, args[1]);
            room.sendAnnouncement(`Tu posici√≥n ha sido establecida a ${args[1]}.`, player.id, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement(`Posici√≥n inv√°lida. Usa una de las siguientes: ${POSICIONES.join(", ")}`, player.id, colors.bot, "bold", 2);
        }
        return false;
    } else if (message === "!mutefichajes" && isAdmin) {
        muteFichajes();
        return false;
    } else if (message === "!match" && isAdmin) {
        startMatch(true);
        return false;
    } else if (message === "!match2" && isAdmin) {
        startMatch(false);
        return false;
    } else if (message === "!match3" && (player.id === creator || admins.has(player.id))) {
        iniciarVotacionEmpate();
        return false;
    } else if (message === "!voterepick" && isAdmin) {
        iniciarVotacionRepick();
        return false;
    } else if (message === "!swapteams" && isAdmin) {
        swapTeams();
        return false;
    } else if (message === "!swapunis" && isAdmin) {
        swapUniforms();
        return false;
    } else if (message === "!clear_bans" && isAdmin) {
        room.clearBans();
        room.sendAnnouncement("ùôèùô§ùôôùô§ùô® ùô°ùô§ùô® ùôóùôñùô£ùôöùô§ùô® ùôùùôñùô£ ùô®ùôûùôôùô§ ùôöùô°ùôûùô¢ùôûùô£ùôñùôôùô§ùô®, ùôûùô£ùôòùô°ùô™ùôÆùôöùô£ùôôùô§ ùô°ùôñ ùôôùôöùô° ùô¢ùôñùô°ùô•ùôñùôßùôûùôôùô§ ùô¢ùôöùô¢ùôö ùô¶ùô™ùôö ùô¢ùôöùô¢ùôöùô§ ùô°ùôñ ùô®ùôñùô°ùôñ.", null, colors.botGold, "bold", 2);
        return false;
    } else if ((message === "!bb" || message === "!cya")) {
        room.kickPlayer(player.id, "¬°Adi√≥s!", false);
        return false;
    } else if (message === "!help") {
            room.sendAnnouncement("Listas de ayuda disponibles:\n!helpcreador\n!helpmatch\n!helpmute\n!helpadmin\n!helpdt\n!helpjugadores\n!helpscore", player.id, colors.bot, "bold", 2);
            return false;
        } else if (message === "!helpcreador") {
            if (player.id === creator) {
                room.sendAnnouncement("Comandos para el creador:\n!teamuniformes - Configura los uniformes del equipo\n!admin - Asigna un administrador\n!removeadmin - Elimina un administrador\n!slowmodechat - Activa el modo lento en el chat\n!resetscores - Reinicia los marcadores\n!gol - Ajusta el marcador\n!swapteams - Intercambia los equipos\n!contrase√±a - Establece una contrase√±a\n!mutefichajes - Silencia los fichajes\n!asignposicion - Asigna posiciones a los jugadores\n!partido - Inicia un partido\n!resetdts - Resetea los datos de los jugadores", player.id, colors.bot, "bold", 2);
            } else {
                room.sendAnnouncement("No tienes permiso para ver estos comandos.", player.id, colors.bot, "bold", 2);
            }
            return false;
        } else if (message === "!helpmatch") {
            room.sendAnnouncement("Comandos para el partido:\n!match - Inicia un partido\n!match2 - Inicia un segundo partido\n!repick - Reasigna los equipos\n!penales 1x1 red/blue - Inicia penales 1x1\n!penales red/blue - Inicia penales 5x5", player.id, colors.bot, "bold", 2);
            return false;
        } else if (message === "!helpscore") {
            room.sendAnnouncement("Comandos para el marcador:\n!ida - Muestra el marcador de ida\n!vuelta - Muestra el marcador de vuelta\n!global - Muestra el marcador global", player.id, colors.bot, "bold", 2);
            return false;
        } else if (message === "!helpadmin") {
            if (player.id === creator || isAdmin) {
                room.sendAnnouncement("Comandos para administradores:\n!quiendt - Muestra qui√©n es el DT\n!swapunis - Intercambia los uniformes\n!clear_bans - Limpia las prohibiciones\n!DTred - Asigna el DT rojo\n!DTblue - Asigna el DT azul", player.id, colors.bot, "bold", 2);
            } else {
                room.sendAnnouncement("No tienes permiso para ver estos comandos.", player.id, colors.bot, "bold", 2);
            }
            return false;
        } else if (message === "!helpmute") {
            room.sendAnnouncement("Comandos para silenciar:\n!slowmode - Activa el modo lento\n!resetdts - Reinicia los DTs\n!muteplayers - Silencia a los jugadores\n!unmuteplayers - Desilencia a los jugadores\n!limpiar - Limpia el chat", player.id, colors.bot, "bold", 2);
            return false;
        } else if (message === "!helpdt") {
            if (player.id === creator || isAdmin || isDT) {
                room.sendAnnouncement("Comandos para DT:\n!list - Lista los jugadores\n!alineacion - Establece la alineaci√≥n\n!cambio - Realiza un cambio\n!jugadores - Muestra los jugadores\n!lineup - Muestra la alineaci√≥n\n!renuncia - Renuncia como DT\n!alineacion reset - Reinicia la alineaci√≥n\n!alineacionescancha - Teletransporta a los jugadores a sus posiciones en la cancha", player.id, colors.bot, "bold", 2);
            } else {
                room.sendAnnouncement("No tienes permiso para ver estos comandos.", player.id, colors.bot, "bold", 2);
            }
            return false;
        } else if (message === "!helpjugadores") {
            room.sendAnnouncement("Comandos para jugadores:\ntt - Muestra el tiempo total\n!posicion - Establece tu posici√≥n\n!bb - Desp√≠dete\n!cya - Desp√≠dete\n!discord - Muestra el enlace de Discord\n!reglas - Muestra las reglas\n!incognito - Activa el modo inc√≥gnito", player.id, colors.bot, "bold", 2);
            return false;
    } else if (message === "!list") {
        let playerListMessage = listPlayers();
        room.sendAnnouncement(playerListMessage, player.id, colors.botGold, "bold", 2);
        return false;
    } else if (message.startsWith("!jugadores ")) {
        const args = message.split(" ");
        if (args.length === 2) {
            const teamArg = args[1].toLowerCase();
            let team;
            if (teamArg === "red" || teamArg === "rojo" || teamArg === "0") {
                team = 1;
            } else if (teamArg === "blue" || teamArg === "azul" || teamArg === "1") {
                team = 2;
            } else {
                room.sendAnnouncement("Uso incorrecto. Usa !jugadores [red/blue/rojo/azul/0/1].", player.id, colors.bot, "normal", 2);
                return false;
            }

            if (isAdmin || player.id === dts.red || player.id === dts.blue) {
                const playerListMessage = listTeamPlayers(team);
                room.sendAnnouncement(playerListMessage, player.id, colors.bot, "normal", 2);
            } else {
                room.sendAnnouncement("No tienes permisos para usar este comando.", player.id, 0xFF0000, "bold", 2);
            }
        } else {
            room.sendAnnouncement("Uso incorrecto. Usa !jugadores [red/blue/rojo/azul/0/1].", player.id, colors.bot, "normal", 2);
        }
        return false;
    } else if (message.startsWith("!slowmodechat ")) {
        const args = message.split(" ");
        if (args.length === 2) {
            const seconds = parseInt(args[1], 10);
            if (!isNaN(seconds) && seconds > 0) {
                enableSlowMode(seconds);
                room.sendAnnouncement(`Modo lento activado por ${seconds} segundos.`, player.id, colors.bot, "bold", 2);
            } else {
                room.sendAnnouncement("Uso incorrecto. Usa !slowmodechat [segundos].", player.id, colors.bot, "normal", 2);
            }
        } else {
            room.sendAnnouncement("Uso incorrecto. Usa !slowmodechat [segundos].", player.id, colors.bot, "normal", 2);
        }
        return false;
    } else if (message.startsWith("!slowmodeplayer ")) {
        if (isAdmin) {
            const args = message.split(" ");
            if (args.length === 3) {
                const targetId = parseInt(args[1], 10);
                const duration = parseInt(args[2], 10);

                if (!isNaN(targetId) && !isNaN(duration)) {
                    enableSlowModeForPlayer(targetId, duration);
                    room.sendAnnouncement(`Modo lento activado para el jugador con ID ${targetId} durante ${duration} segundos.`, null, colors.bot, "bold", 2);
                } else {
                    room.sendAnnouncement("Uso incorrecto del comando. Usa !slowmodeplayer id (duracion de tiempo).", player.id, colors.bot, "bold", 2);
                }
            } else {
                room.sendAnnouncement("Uso incorrecto del comando. Usa !slowmodeplayer id (duracion de tiempo).", player.id, colors.bot, "bold", 2);
            }
        } else {
            room.sendAnnouncement("No tienes permiso para usar este comando.8", player.id, colors.bot, "bold", 2);
        }
        return false;
    } else if (message.startsWith("!alineacionescancha")) {
        const args = message.split(" ");
        if (args.length === 6) {
            const gkId = parseInt(args[1]);
            const dfcId = parseInt(args[2]);
            const mcdId = parseInt(args[3]);
            const mcoId = parseInt(args[4]);
            const dcId = parseInt(args[5]);

            // Coordenadas para cada posici√≥n en el equipo rojo
            const redPositions = {
                gk: { x: -670, y: 0 },
                dfc: { x: -412, y: 0 }, // Agregar dfc aqu√≠
                mcd: { x: -317, y: 0 },
                mco: { x: -210, y: 0 },
                dc: { x: -140, y: 0 }
            };

            // Coordenadas para cada posici√≥n en el equipo azul
            const bluePositions = {
                gk: { x: 670, y: 0 },
                dfc: { x: 412, y: 0 }, // Agregar dfc aqu√≠
                mcd: { x: 317, y: 0 },
                mco: { x: 210, y: 0 },
                dc: { x: 140, y: 0 }
            };

            const players = room.getPlayerList();
            players.forEach(p => {
                if (p.id === gkId || p.id === dfcId || p.id === mcdId || p.id === mcoId || p.id === dcId) {
                    let pos;
                    if (p.team === 1) { // Equipo rojo
                        if (p.id === gkId) pos = redPositions.gk;
                        else if (p.id === dfcId) pos = redPositions.dfc; // Cambiar df a dfc
                        else if (p.id === mcdId) pos = redPositions.mcd;
                        else if (p.id === mcoId) pos = redPositions.mco;
                        else if (p.id === dcId) pos = redPositions.dc;
                    } else if (p.team === 2) { // Equipo azul
                        if (p.id === gkId) pos = bluePositions.gk;
                        else if (p.id === dfcId) pos = bluePositions.dfc; // Cambiar df a dfc
                        else if (p.id === mcdId) pos = bluePositions.mcd;
                        else if (p.id === mcoId) pos = bluePositions.mco;
                        else if (p.id === dcId) pos = bluePositions.dc;
                    }
                    if (pos) {
                        room.setPlayerDiscProperties(p.id, { x: pos.x, y: pos.y });
                    }
                }
            });

            room.sendAnnouncement("Jugadores teletransportados a sus posiciones.", null, 0x00FF00, "bold", 1);
        } else {
            room.sendAnnouncement("Uso correcto: !alineacionescancha gk(id) dfc(id) mcd(id) mco(id) dc(id)", player.id, 0xFF0000, "bold", 1);
        }
        return false; // Evita que el mensaje se muestre en el chat
    } else if(message.startsWith("!lineup ")) {
            const args = message.split(" ");
            if (args.length >= 3) {
                const team = args[1].toLowerCase();
                const esquema = args.slice(2).join(" ");
                setEsquema(player, team, esquema);
            } else {
                room.sendAnnouncement("Uso incorrecto. Usa !lineup [red/blue] [esquema].", player.id, colors.bot, "normal", 2);
            }
            return false;
            
    } else if (message.startsWith("!alineacion ")) {
        const args = message.split(" ");
        if (args.length === 6) {
            const ids = args.slice(1, 6).map(id => parseInt(id, 10));
            if (ids.every(id => !isNaN(id) && room.getPlayer(id))) {
                setAlineacion(player, ids);
            } else {
                room.sendAnnouncement("ID de jugador no v√°lido. Aseg√∫rate de que las IDs sean correctas.", player.id, colors.bot, "bold", 2);
            }
        } else {
            room.sendAnnouncement("Uso incorrecto. Usa !alineacion [ID1 ID2 ID3 ID4 ID5].", player.id, colors.bot, "normal", 2);
        }
        return false;
    } else if (message === "!alineaciones") {
        showAlineacion();
        return false;
    } else if (message.startsWith("!admin ") && isAdmin) {
        let args = message.split(" ");
        let index = parseInt(args[1], 10);
        assignRole(player, "admin", index);
        return false;
    } else if (message.startsWith("!DTred ") && isAdmin) {
        let args = message.split(" ");
        let index = parseInt(args[1], 10);
        assignRole(player, "DTred", index);
        return false;
    } else if (message.startsWith("!DTblue ") && isAdmin) {
        let args = message.split(" ");
        let index = parseInt(args[1], 10);
        assignRole(player, "DTblue", index);
        return false;
    } else if (message === "!ida") {
        showScore("ida");
        return false;
    } else if (message === "!vuelta") {
        showScore("vuelta");
        return false;
    } else if (message === "!global") {
        showScore("global");
    } else if (message === "!resetscores" && isAdmin) {
        resetScores();
        return false;
    } else if (message === "!repick" && isAdmin) {
        repickTeams();
        return false;
    } else if(message === "!slowmode" && isAdmin) {
        slowmodeEnabled = true;
        room.sendAnnouncement("ùêíùê•ùê®ùê∞ùê¶ùê®ùêùùêû ùêöùêúùê≠ùê¢ùêØùêöùêùùê® ùê©ùê®ùê´ ùüè ùê¶ùê¢ùêßùêÆùê≠ùê®. ùêèùê¢ùêûùêßùê¨ùêö ùêõùê¢ùêûùêß ùê≠ùêÆùê¨ ùê©ùêöùê•ùêöùêõùê´ùêöùê¨, ùêßùê® ùêØùêöùê≤ùêö ùêö ùê¨ùêûùê´ ùê™ùêÆùêû ùê≠ùêû ùêöùê´ùê´ùêûùê©ùê¢ùêûùêßùê≠ùêöùê¨ ùêöùê• ùê¨ùêûùê†ùêÆùêßùêùùê® ùüê. ‚åõü§î", null, colors.bot, "bold", 2);
        setTimeout(() => {
            slowmodeEnabled = false;
            room.sendAnnouncement("Slowmode desactivado.", null, colors.bot, "bold", 2);
        }, 60000); // 1 minuto
        return false;
    } else if (message === "!muteplayers" && isAdmin) {
        mutePlayers();
        return false; 
    } else if (message === "!unmuteplayers" && isAdmin) {
        unmutePlayers();
        return false;
    } else if (message === "!discord") {
        room.sendAnnouncement(`√önete a nuestro Discord: ${DISCORD_LINK}`, player.id, colors.bot, "bold", 2);
        return false;
    } else if  (message === "!showdiscord") {
        room.sendAnnouncement(`üî• ¬°ùòöùò¶ ùò∑ùò™ùò¶ùòØùò¶ ùòíùòïùòêùòéùòèùòõùòö 5ùò∑5 ùòãùòõ! üî•\nùòåùòØùòµùò≥ùò¢ ùò¢ ùòØùò∂ùò¶ùò¥ùòµùò≥ùò∞ ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò• ùò±ùò¢ùò≥ùò¢ ùò¶ùò¥ùòµùò¢ùò≥ ùò¢ùòµùò¶ùòØùòµùò∞ ùò¢ ùò§ùò∂ùò¢ùòØùò•ùò∞ ùò¢ùò£ùò≥ùò™ùòÆùò∞ùò¥ ùò¥ùò¢ùò≠ùò¢. \nùò•ùò¶ùòÆùò∂ùò¶ùò¥ùòµùò≥ùò¢ ùò≤ùò∂ùò™√©ùòØ ùòÆùò¢ùòØùò•ùò¢ ùò∫ ùò≤ùò∂ùò™ùò¶ùòØ ùòÆùò™ùò≥ùò¢ ùò•ùò¶ùò¥ùò•ùò¶ ùò≠ùò¢ ùò£ùò¢ùòØùò§ùò¢. üòè üëâ ${DISCORD_LINK}`, null, colors.bot, "bold", 2);
        return false;
    } else if (message === "!reglas") {
        room.sendAnnouncement(REGLAS, player.id, colors.bot, "bold", 2);
        return false;
    } else if (/^\/colors/.test(message)) {
        saveUniformCommand(player, message);
        return false;
    } else if (message.startsWith("!DTred") && isAdmin) {
        const targetPlayer = getPlayerFromMessage(message);
        if (targetPlayer) {
            assignDT(targetPlayer, 1);
        }
        return false;
    } else if (message.startsWith("!DTblue") && isAdmin) {
        const targetPlayer = getPlayerFromMessage(message);
        if (targetPlayer) {
            assignDT(targetPlayer, 2);
        }
        return false;
    } else if (message.startsWith("!gol ") && player.id === creator) {
        const args = message.split(" ");
        if (args.length === 5) {
            const action = args[1];
            const numGoles = parseInt(args[2], 10);
            const equipo = args[3].toLowerCase();
            const tipo = args[4].toLowerCase();

            if ((action === "+" || action === "-") && !isNaN(numGoles) && (equipo === "rojo" || equipo === "azul") && (tipo === "ida" || tipo === "vuelta")) {
                adjustScore(action, numGoles, equipo, tipo);
            } else {
                room.sendAnnouncement("Uso incorrecto. Usa !gol (+/-) (numerodegoles) (equipo) (ida/vuelta).", player.id, colors.bot, "bold", 2);
            }
        } else {
            room.sendAnnouncement("Uso incorrecto. Usa !gol (+/-) (numerodegoles) (equipo) (ida/vuelta).", player.id, colors.bot, "bold", 2);
        }
        return false;
    } else if (message === "!limpiar" && isAdmin) {
        limpiarChat();
        return false;
    } else if (message === "!renuncia" && (player.id === dts.red || player.id === dts.blue)) {
        room.setPlayerAvatar(player.id, null);
        removeDT(player);
        return false;
    } else if ((message === "!votenoDTred" || message === "!votenoDTblue") && isAdmin) {
        startVote(player, message);
        return false;
    } else if (message === "!fairplay" && (player.id === dts.red || player.id === dts.blue || isAdmin)) {
        startFairplayVote();
        return false;
    }
    if (message === "!swapdts") {
        swapdts(player.id);
        return false; // Evitar que el mensaje se muestre en el chat
    }

    if (message === "!swapmarcador" && (player.id === creator || admins.has(player.id))) {
        // Intercambiar los marcadores de ida
        const tempIdaRed = matchStats.ida.redScore;
        matchStats.ida.redScore = matchStats.ida.blueScore;
        matchStats.ida.blueScore = tempIdaRed;
    
        // Intercambiar los marcadores de vuelta
        const tempVueltaRed = matchStats.vuelta.redScore;
        matchStats.vuelta.redScore = matchStats.vuelta.blueScore;
        matchStats.vuelta.blueScore = tempVueltaRed;
    
        // Calcular el marcador global
        const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
        const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;
    
        // Notificar el cambio
        room.sendAnnouncement(
            `‚ñà‚ñì‚ñí¬≠‚ñë‚°∑‚†Ç¬°ùòîùò¢ùò≥ùò§ùò¢ùò•ùò∞ùò≥ùò¶ùò¥ ùò™ùòØùòµùò¶ùò≥ùò§ùò¢ùòÆùò£ùò™ùò¢ùò•ùò∞ùò¥!‚†ê‚¢æ‚ñë‚ñí‚ñì‚ñà üîÑ\n` +
            `ùòêùòãùòà: üî¥ ${matchStats.ida.redScore} - ${matchStats.ida.blueScore} üîµ\n` +
            `ùòùùòúùòåùòìùòõùòà: üî¥ ${matchStats.vuelta.redScore} - ${matchStats.vuelta.blueScore} üîµ\n` +
            `ùòéùòìùòñùòâùòàùòì: üî¥ ${globalRedScore} - ${globalBlueScore} üîµ`,
            null, colors.bot, "bold", 2
        );
        return false; // Evitar que el mensaje se muestre en el chat
    }
    return false; // Prevent unrecognized commands from appearing in chat
}

function startFairplayVote() {
    if (fairplayInProgress) {
        room.sendAnnouncement("Una votaci√≥n de fairplay ya est√° en progreso.", null, colors.bot, "bold", 2);
        return;
    }
    if (!lastGoal.team || !lastGoal.type) {
        room.sendAnnouncement("No hay goles recientes para aplicar fairplay.", null, colors.bot, "bold", 2);
        return;
    }

    fairplayInProgress = true;
    voteCountFairplay = 0;
    room.sendAnnouncement("¬°Votaci√≥n de fairplay iniciada! Escribe !fairplayvote para votar. Se necesitan 17 votos para restar el √∫ltimo gol.", null, colors.bot, "bold", 2);

    const originalOnPlayerChat = room.onPlayerChat;
    room.onPlayerChat = function(player, message) {
        if (message === "!fairplayvote") {
            voteCountFairplay++;
            room.sendAnnouncement(`${player.name} ha votado para fairplay. Total votos: ${voteCountFairplay}`, null, colors.bot, "bold", 2);
            if (voteCountFairplay >= 17) {
                applyFairplay();
                stopFairplayVote();
            }
            return false;
        }
        return originalOnPlayerChat(player, message);
    };

    setTimeout(() => {
        stopFairplayVote();
    }, 60000); // 1 minuto
}

function stopFairplayVote() {
    fairplayInProgress = false;
    room.onPlayerChat = function(player, message) {
        return handleCommand(player, message);
    };
    room.sendAnnouncement("La votaci√≥n de fairplay ha terminado.", null, colors.bot, "bold", 2);
    voteCountFairplay = 0;
}

function applyFairplay() {
    if (!lastGoal.team || !lastGoal.type) {
        room.sendAnnouncement("Error al aplicar fairplay: no se encontr√≥ informaci√≥n del √∫ltimo gol.", null, colors.bot, "bold", 2);
        return;
    }

    if (lastGoal.type === 'ida') {
        if (lastGoal.team === 1) {
            matchStats.ida.redScore--;
        } else {
            matchStats.ida.blueScore--;
        }
    } else if (lastd.type === 'vuelta') {
        if (lastGoal.team === 1) {
            matchStats.vuelta.redScore--;
        } else {
            matchStats.vuelta.blueScore--;
        }
    }

    const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
    const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;

    room.sendAnnouncement(`Fairplay aplicado. √öltimo gol restado. Marcador Global: Rojo ${globalRedScore} - ${globalBlueScore} Azul`, null, colors.bot, "bold", 2);
}

function startVote(player, message) {
    if (votingInProgress) {
        room.sendAnnouncement("Una votaci√≥n ya est√° en progreso.", player.id, colors.bot, "bold", 2);
        return;
    }
    votingInProgress = true;
    voteCount.red = 0;
    voteCount.blue = 0;
    let team = message === "!votenoDTred" ? "red" : "blue";
    room.sendAnnouncement(`¬°Votaci√≥n iniciada para destituir al DT del equipo ${team === "red" ? "Rojo" : "Azul"}! Escribe !votenoDT para votar.`, null, colors.bot, "bold", 2);

    const originalOnPlayerChat = room.onPlayerChat;
    room.onPlayerChat = function(player, message) {
        if (message === "!votenoDT") {
            if (team === "red" && player.team === 1) {
                voteCount.red++;
                room.sendAnnouncement(`${player.name} ha votado para destituir al DT del equipo Rojo. Total votos: ${voteCount.red}`, null, colors.dtRed, "bold", 2);
                if (voteCount.red > 9) {
                    removeDT(room.getPlayer(dts.red));
                    stopVote();
                }
            } else if (team === "blue" && player.team === 2) {
                voteCount.blue++;
                room.sendAnnouncement(`${player.name} ha votado para destituir al DT del equipo Azul. Total votos: ${voteCount.blue}`, null, colors.dtBlue, "bold", 2);
                if (voteCount.blue > 9) {
                    removeDT(room.getPlayer(dts.blue));
                    stopVote();
                }
            } else {
                room.sendAnnouncement("Solo los jugadores del equipo correspondiente pueden votar.", player.id, colors.bot, "bold", 2);
            }
            return false;
        }
        return originalOnPlayerChat(player, message);
    };

    setTimeout(() => {
        stopVote();
    }, 60000); // 1 minuto
}

function stopVote() {
    votingInProgress = false;
    room.onPlayerChat = function(player, message) {
        return handleCommand(player, message);
    };
    room.sendAnnouncement("La votaci√≥n ha terminado.", null, colors.bot, "bold", 2);
    voteCount.red = 0;
    voteCount.blue = 0;
}

function removeDT(player) {
    if (player.id === dts.red) {
        dts.red = null;
        admins.delete(player.id);
        room.setPlayerAdmin(player.id, false);
        room.sendAnnouncement(`ùòäùò∞ùòØùòßùò™ùò≥ùòÆùò¢ùò•ùò∞: ${player.name}  ùò©ùò¢ ùò•ùò¶ùò´ùò¢ùò•ùò∞ ùò•ùò¶ ùò¥ùò¶ùò≥ ùò¶ùò≠ ùòãùòõ ùò•ùò¶ùò≠ ùò¶ùò≤ùò∂ùò™ùò±ùò∞ ùòôùò∞ùò´ùò∞. ùòìùò∞ùò¥ ùò®ùò∞ùò≠ùò¶ùò¥ ùòØùò∞ ùò≠ùò≠ùò¶ùò®ùò¢ùò≥ùò∞ùòØ, ùò±ùò¶ùò≥ùò∞ ùò≠ùò¢ùò¥ ùò¶ùòπùò§ùò∂ùò¥ùò¢ùò¥ ùò¥√≠. ùòöùò¶ ùò¢ùò§ùò¢ùò£√≥ ùò¶ùò≠ ùò§ùò∂ùò¶ùòØùòµùò∞.üõëüî•.`, null, colors.dtRed, "bold", 2);
    } else if (player.id === dts.blue) {
        dts.blue = null;
        admins.delete(player.id);
        room.setPlayerAdmin(player.id, false);
        room.sendAnnouncement(`${player.name} Ha dejado de ser el DT del equipo Azul. La magia se apag√≥ y con ella, las ilusiones del club. üíîüîµ`, null, colors.dtBlue, "bold", 2);
    }
    updatePlayerRoles();
}

function swapdts(playerId) {
    const player = room.getPlayer(playerId); // Obtener el jugador que envi√≥ el mensaje
    const isAdmin = admins.has(player.id) || player.id === creator || hosters.has(player.id) || referees.has(player.id) || player.id === dts.red || player.id === dts.blue;

    if (player && isAdmin) { // Verificar si el jugador tiene el rol adecuado
        if (dts.red && dts.blue) {
            // Intercambiar los roles de DT
            const tempDT = dts.red;
            dts.red = dts.blue;
            dts.blue = tempDT;

            // Intercambiar los roles de Capit√°n
            const tempCaptain = captains.red;
            captains.red = captains.blue;
            captains.blue = tempCaptain;

            // Actualizar los avatares y colores de los DTs y Capitanes
            room.setPlayerAvatar(dts.red, "üëî"); // Avatar para DT rojo
            room.setPlayerAvatar(dts.blue, "üëî"); // Avatar para DT azul
            room.setPlayerAvatar(captains.red, "‚ìí"); // Avatar para Capit√°n rojo
            room.setPlayerAvatar(captains.blue, "‚ìí"); // Avatar para Capit√°n azul

            // Actualizar los roles en la sala
            updatePlayerRoles();

            // Notificar a la sala sobre el intercambio
            room.sendAnnouncement("¬°Los roles de DT y Capit√°n han sido intercambiados! üîÑ", null, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement("No hay DTs asignados para intercambiar. üö´", null, colors.bot, "bold", 2);
        }
    } else {
        room.sendAnnouncement("No tienes permiso para usar este comando. üö´", playerId, colors.bot, "bold", 2);
    }
}

function getPlayerFromMessage(message) {
    const match = message.match(/@(\w+)/);
    if (match) {
        const targetPlayer = room.getPlayerList().find(p => p.name === match[1]);
        return targetPlayer || null;
    }
    return null;
}

function assignMVP(player) {
    mvps.add(player.id);
    room.setPlayerAvatar(player.id, MVP_AVATAR); // Asignar el avatar de MVP
    room.sendAnnouncement(`${player.name} ha sido asignado como MVP y ha recibido el avatar ${MVP_AVATAR}.`, null, colors.mvp, "bold", 2);
}

function removeMVP(player) {
    mvps.delete(player.id);
    room.setPlayerAvatar(player.id, null); // Restaurar el avatar a null
    room.sendAnnouncement(`${player.name} ha perdido el rol de MVP y su avatar ha sido restaurado.`, null, colors.mvp, "bold", 2);
}

function assignRole(player, role, index) {
    let players = room.getPlayerList();
    if (index < 1 || index > players.length) {
        room.sendAnnouncement("√çndice de jugador inv√°lido.", player.id, colors.bot, "bold", 2);
        return;
    }
    let targetPlayer = players[index - 1];
    
    if (!targetPlayer) {
        room.sendAnnouncement("Jugador no encontrado.", player.id, colors.bot, "bold", 2);
        return;
    }
    
    if (role === "admin") {
        admins.add(targetPlayer.id);
        room.setPlayerAdmin(targetPlayer.id, true);
        room.sendAnnouncement(`#${targetPlayer.name} ùê°ùêö ùê¨ùê¢ùêùùê® ùê©ùê´ùê®ùê¶ùê®ùêØùê¢ùêùùê® ùêö ùêöùêùùê¶ùê¢ùêßùê¢ùê¨ùê≠ùê´ùêöùêùùê®ùê´.`, null, colors.admin, "bold", 2);
    } else if (role === "DTred") {
        dts.red = targetPlayer.id;
        room.sendAnnouncement(`#${targetPlayer.name} ùò¶ùò¥ ùò¢ùò©ùò∞ùò≥ùò¢ ùò¶ùò≠ ùòãùòõ ùò•ùò¶ùò≠ ùò¶ùò≤ùò∂ùò™ùò±ùò∞ ùòôùò∞ùò´ùò∞ üëîüìã‚úçÔ∏è.`, null, colors.bot, "bold", 2);
    } else if (role === "DTblue") {
        dts.blue = targetPlayer.id;
        room.sendAnnouncement(`#${targetPlayer.name} ùò¶ùò¥ ùò¢ùò©ùò∞ùò≥ùò¢ ùò¶ùò≠ ùòãùòõ ùò•ùò¶ùò≠ ùò¶ùò≤ùò∂ùò™ùò±ùò∞ ùòàùòªùò∂ùò≠ üëîüìã‚úçÔ∏è.`, null, colors.bot, "bold", 2);
    }
}

function assignDT(player) {
    if (player.id === dts.red || player.id === dts.blue) {
        room.sendAnnouncement(`${player.name} ya es DT de un equipo. No puede ser DT de ambos equipos.`, player.id, colors.bot, "bold", 2);
        return;
    }

    if (!dts.red) {
        dts.red = player.id;
        room.sendAnnouncement(`${player.name} ha sido asignado como DT del equipo rojo.`, null, colors.dtRed, "bold", 2);
    } else if (!dts.blue) {
        dts.blue = player.id;
        room.sendAnnouncement(`${player.name} ha sido asignado como DT del equipo azul.`, null, colors.dtBlue, "bold", 2);
    } else {
        room.sendAnnouncement("Ambos roles de DT ya est√°n ocupados.", player.id, colors.bot, "bold", 2);
    }
    updatePlayerRoles();
}

function asignarRolCreador(authList) {
    let jugadores = room.getPlayerList();
    for (let i = 0; i < jugadores.length; i++) {
        if (authList.includes(jugadores[i].auth)) {
            // Asignar el rol de creador y administrador
            creator = jugadores[i].id;
            admins.add(jugadores[i].id);
            room.setPlayerAdmin(jugadores[i].id, true); // Dar permisos de administrador
            room.sendAnnouncement(`¬°${jugadores[i].name} ahora es el creador y administrador!`, null, 0x00FF00, "bold", 2);
            return;
        }
    }
    room.sendAnnouncement("No se encontr√≥ al jugador con el auth proporcionado.", null, 0xFF0000, "bold", 2);
}

function setTeamUniforms() {
    const randomIndex = Math.floor(Math.random() * uniformOptions.length);
    const selectedUniform = uniformOptions[randomIndex];

    // Configuraci√≥n para el equipo rojo
    const redTeam = 1; // Identificador del equipo rojo
    const redConfig = selectedUniform.red;

    // Configuraci√≥n para el equipo azul
    const blueTeam = 2; // Identificador del equipo azul
    const blueConfig = selectedUniform.blue;

    // Aplicar uniformes
    room.setTeamColors(redTeam, redConfig.angle, redConfig.textColor, redConfig.colors); // Uniforme para el equipo rojo
    room.setTeamColors(blueTeam, blueConfig.angle, blueConfig.textColor, blueConfig.colors); // Uniforme para el equipo azul
}
function adjustScore(action, numGoles, equipo, tipo) {
    const team = equipo === "rojo" ? 1 : 2;
    
    if (tipo === "ida") {
        if (action === "+") {
            if (team === 1) {
                matchStats.ida.redScore += numGoles;
            } else {
                matchStats.ida.blueScore += numGoles;
            }
        } else {
            if (team === 1) {
                matchStats.ida.redScore -= numGoles;
            } else {
                matchStats.ida.blueScore -= numGoles;
            }
        }
    } else {
        if (action === "+") {
            if (team === 1) {
                matchStats.vuelta.redScore += numGoles;
            } else {
                matchStats.vuelta.blueScore += numGoles;
            }
        } else {
            if (team === 1) {
                matchStats.vuelta.redScore -= numGoles;
            } else {
                matchStats.vuelta.blueScore -= numGoles;
            }
        }
    }

    const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
    const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;

    room.sendAnnouncement(`ùôàùòºùôçùòæùòºùòøùôäùôç ùôàùôäùòøùôÑùôÅùôÑùòæùòºùòøùôä: ùôÑùòøùòº (ùôçùôÄùòø ${matchStats.ida.redScore} - ùòΩùôáùôêùôÄ ${matchStats.ida.blueScore}), ùôëùôêùôÄùôáùôèùòº (ùôçùôÄùòø ${matchStats.vuelta.redScore} - ùòΩùôáùôêùôÄ ${matchStats.vuelta.blueScore}), ùôÇùôáùôäùòΩùòºùôá (ùôçùôÄùòø ${globalRedScore} - ùòΩùôáùôêùôÄ ${globalBlueScore}).`, null, colors.bot, "bold", 2);
}

function startMatch(isFirstMatch) {
    room.sendAnnouncement("ùòº ùòæùòºùôáùôáùòºùôç ùôãùôêùôèùòºùôé, ùôòùôùùôñùôßùô°ùôñ ùô©√©ùôòùô£ùôûùôòùôñ ùôöùô£ ùô•ùôßùô§ùôúùôßùôöùô®ùô§. 50 ùô®ùôöùôúùô™ùô£ùôôùô§ùô® ùô•ùôñùôßùôñ ùôôùôöùôüùôñùôß ùôôùôö ùôùùôñùôóùô°ùôñùôß ùôÆ ùôöùô¢ùô•ùôöùôØùôñùôß ùôñ ùôüùô™ùôúùôñùôß. üèüÔ∏èüí•", null, colors.botGold, "bold", 2);    
    setTimeout(() => {
        showAlineacion(); // Mostrar alineaciones 50 segundos despu√©s de que se inicie la charla t√©cnica
    }, 100000); // 50000 milisegundos = 50 segundos

    setTimeout(() => {
        room.pauseGame(false);
        paused = false;
        matchStarted = true;
        if (isFirstMatch) {
            isIda = true;
            room.sendAnnouncement("¬°ùêÑùê• ùê©ùê´ùê¢ùê¶ùêûùê´ ùê©ùêöùê´ùê≠ùê¢ùêùùê® (ùê¢ùêùùêö) ùê°ùêö ùêúùê®ùê¶ùêûùêßùê≥ùêöùêùùê®! \n ‚öΩüî• ùêéùêâùêÄùêã√Å ùêáùêÄùêòùêÄ ùêåùêîùêÇùêáùêé ùêíùêÑùêóùêé ùêò ùêåùêÄùêÜùêàùêÄ ùêÑùêç ùêãùêÄùêí ùêâùêîùêÜùêÄùêÉùêÄùêí, \n ùê©ùê®ùê´ùê™ùêÆùêû ùê¨ùê¢ ùêûùê¨ùê≠ùê® ùê¨ùê¢ùê†ùêÆùêû ùêöùê¨√≠, ùê¶ùêû ùêØùê®ùê≤ ùêö ùê≠ùê¢ùê´ùêöùê´ ùê©ùêöùê£ùêö ùê¶ùêûùê£ùê®ùê´", null, colors.botGold, "bold", 2);
        } else {
            isIda = false;
            room.sendAnnouncement("¬°ùòºùôßùôßùôñùô£ùôòùôñ ùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùô´ùô™ùôöùô°ùô©ùôñ! ‚öΩüî•\n ùôëùôñùô¢ùô§ùô® ùôñ ùô´ùôöùôß ùô®ùôû ùô®ùôö ùô°ùô§ùôúùôßùôñ ùôßùôöùô¢ùô§ùô£ùô©ùôñùôß ùô§ ùô£ùô§,\n ¬°ùô¶ùô™ùôöùôßùôöùô¢ùô§ùô® ùô´ùôöùôß ùô¢ùôñùôúùôûùôñ ùôÆ ùôöùô®ùô•ùôöùôòùô©√°ùôòùô™ùô°ùô§! üé©üí•", null, colors.botGold, "bold", 2);
            // Reset the vuelta scores
            matchStats.vuelta.redScore = 0;
            matchStats.vuelta.blueScore = 0;
        }
        // Reset ball area statistics
        matchStats.ballInRedArea = 0;
        matchStats.ballInBlueArea = 0;
        matchStats.totalGameTime = 0;
        matchStats.redPossession = 0;
        matchStats.bluePossession = 0;

        // Reset alineaciones
        alineacionRed = [];
        alineacionBlue = [];
        esquemaRed = "";
        esquemaBlue = "";
    }, 15000);
}

function startTimedMatch(command) {
    matchTime = 0;
    halfTimeReached = false;
    extraTime = 0;

    if (command === "!match3") {
        extraTime = getRandomExtraTime();
        room.sendAnnouncement(`Tiempo de a√±adido: ${extraTime} minutos`, null, colors.bot, "bold", 2);
    }

    matchInterval = setInterval(() => {
        matchTime++;
        if (matchTime === 5 && !halfTimeReached) {
            room.sendAnnouncement("Mitad del partido cumplido, charla t√°ctica", null, colors.bot, "bold", 2);
            room.pauseGame(true);
            halfTimeReached = true;
        } else if (matchTime === 10 && command !== "!match3") {
            extraTime = getRandomExtraTime();
            if (extraTime === 0) {
                room.sendAnnouncement("No hay tiempo extra", null, colors.bot, "bold", 2);
                clearInterval(matchInterval);
                room.stopGame();
            } else {
                room.sendAnnouncement(`Tiempo de a√±adido: ${extraTime} minutos`, null, colors.bot, "bold", 2);
            }
        } else if (matchTime === 10 + extraTime) {
            clearInterval(matchInterval);
            room.stopGame();
        }
    }, 60000); // 1 minuto en milisegundos

    room.pauseGame(false);
}

function getRandomExtraTime() {
    const random = Math.random();
    if (random < 0.2) return 0;
    if (random < 0.9) return Math.random() < 0.7 ? 2 : 3;
    return [1, 4, 5][Math.floor(Math.random() * 3)];
}

function swapTeams() {
    const players = room.getPlayerList().filter(p => p.team !== 0);
    players.forEach(player => {
        const newTeam = player.team === 1 ? 2 : 1;
        room.setPlayerTeam(player.id, newTeam);
    });
    room.sendAnnouncement("üîÑüî• ¬°ùòºùôèùôÄùôâùòæùôÑùôäùôâ, ùòºùôèùôÄùôâùòæùôÑùôäùôâ! üî•üîÑ ¬°ùôáùôäùôé ùôëùôÑùôéùôÑùôèùòºùôâùôèùôÄùôé ùòºùôÉùôäùôçùòº ùôéùôäùôâ ùôáùôäùòæùòºùôáùôÄùôé! üèüÔ∏è‚öΩ", null, colors.botGold, "bold", 2);
}

function swapUniforms() {
    const temp = uniformCommands.red;
    uniformCommands.red = uniformCommands.blue;
    uniformCommands.blue = temp;
    if (uniformCommands.red) room.sendAnnouncement(uniformCommands.red, null, colors.bot, "bold", 2);
    if (uniformCommands.blue) room.sendAnnouncement(uniformCommands.blue, null, colors.bot, "bold", 2);
    room.sendAnnouncement("Los colores de los uniformes han sido intercambiados.", null, colors.admin, "bold", 2);
}

function showAdminHelp(player) {
    const adminHelpMessage = `
ùòæùô§ùô¢ùôñùô£ùôôùô§ùô® ùôôùôö ùòºùôôùô¢ùôûùô£ùôûùô®ùô©ùôßùôñùôôùô§ùôß:
        !ùô¶ùô™ùôûùôöùô£ùôôùô© - ùôÄùô° ùô•ùôßùôûùô¢ùôöùôß ùôüùô™ùôúùôñùôôùô§ùôß ùô¶ùô™ùôö ùôöùô®ùôòùôßùôûùôóùôñ 'ùôÆùô§ùôôùô©' ùôßùôöùôòùôûùôóùôûùôß√° ùôöùô° ùôßùô§ùô° ùôôùôö ùòøùôè.
        !ùôñùôôùô¢ùôûùô£ @ùô£ùô§ùô¢ùôóùôßùôö - ùôãùôßùô§ùô¢ùô™ùôöùô´ùôö ùôñ ùô™ùô£ ùôüùô™ùôúùôñùôôùô§ùôß ùôñ ùôñùôôùô¢ùôûùô£ùôûùô®ùô©ùôßùôñùôôùô§ùôß.
        !ùô°ùôûùô¢ùô•ùôûùôñùôß - ùôáùôûùô¢ùô•ùôûùôñ ùô°ùô§ùô® ùô¢ùôöùô£ùô®ùôñùôüùôöùô® ùôñùôòùô©ùô™ùôñùô°ùôöùô®.
        !ùôßùôöùô£ùô™ùô£ùôòùôûùôñ - ùôçùôöùô£ùô™ùô£ùôòùôûùôñ ùôñùô° ùôßùô§ùô° ùôôùôö ùôñùôôùô¢ùôûùô£ùôûùô®ùô©ùôßùôñùôôùô§ùôß.
        !ùô¢ùôñùô©ùôòùôù - ùôÑùô£ùôûùôòùôûùôñ ùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùôûùôôùôñ.
        !ùô¢ùôñùô©ùôòùôù2 - ùôÑùô£ùôûùôòùôûùôñ ùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùô´ùô™ùôöùô°ùô©ùôñ.
        !ùô¢ùô™ùô©ùôöùô•ùô°ùôñùôÆùôöùôßùô® - ùôéùôûùô°ùôöùô£ùôòùôûùôñ ùôñ ùô©ùô§ùôôùô§ùô® ùô°ùô§ùô® ùôüùô™ùôúùôñùôôùô§ùôßùôöùô®.
        !ùô™ùô£ùô¢ùô™ùô©ùôöùô•ùô°ùôñùôÆùôöùôßùô® - ùòøùôöùô®ùôûùô°ùôöùô£ùôòùôûùôñ ùôñ ùô©ùô§ùôôùô§ùô® ùô°ùô§ùô® ùôüùô™ùôúùôñùôôùô§ùôßùôöùô®.
        !ùô¢ùô™ùô©ùôöùôõùôûùôòùôùùôñùôüùôöùô® - ùôéùôûùô°ùôöùô£ùôòùôûùôñ ùôñ ùô°ùô§ùô® ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® ùô•ùôñùôßùôñ ùô¶ùô™ùôö ùôùùôñùôóùô°ùôöùô£ ùô°ùô§ùô® ùôôùô©ùô®.
        !ùô®ùô°ùô§ùô¨ùô¢ùô§ùôôùôöùôòùôùùôñùô© [ùô®ùôöùôúùô™ùô£ùôôùô§ùô®] - ùòºùôòùô©ùôûùô´ùôñ ùôöùô° ùô¢ùô§ùôôùô§ ùô°ùôöùô£ùô©ùô§ ùôöùô£ ùôöùô° ùôòùôùùôñùô© ùô•ùô§ùôß ùôöùô° ùô£√∫ùô¢ùôöùôßùô§ ùôôùôö ùô®ùôöùôúùô™ùô£ùôôùô§ùô® ùôöùô®ùô•ùôöùôòùôûùôõùôûùôòùôñùôôùô§.
        !ùô®ùô°ùô§ùô¨ùô¢ùô§ùôôùôö - ùòºùôòùô©ùôûùô´ùôñ ùôöùô° ùô¢ùô§ùôôùô§ ùô°ùôöùô£ùô©ùô§ ùôöùô£ ùôöùô° ùôòùôùùôñùô© ùô•ùô§ùôß 1 ùô¢ùôûùô£ùô™ùô©ùô§.
        !ùô®ùô¨ùôñùô•ùô©ùôöùôñùô¢ùô® - ùòæùôñùô¢ùôóùôûùôñ ùô°ùô§ùô® ùôöùô¶ùô™ùôûùô•ùô§ùô®.
        !ùôòùô°ùôöùôñùôß_ùôóùôñùô£ùô® - ùôáùôûùô¢ùô•ùôûùôñ ùô©ùô§ùôôùôñùô® ùô°ùôñùô® ùô•ùôßùô§ùôùùôûùôóùôûùôòùôûùô§ùô£ùôöùô® ùôôùôö ùôüùô™ùôúùôñùôôùô§ùôßùôöùô®.
        !ùôûùôôùôñ - ùôàùôñùôßùôòùôñ ùôöùô° ùôûùô£ùôûùôòùôûùô§ ùôôùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùôûùôôùôñ.
        !ùô´ùô™ùôöùô°ùô©ùôñ - ùôàùôñùôßùôòùôñ ùôöùô° ùôûùô£ùôûùôòùôûùô§ ùôôùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùô´ùô™ùôöùô°ùô©ùôñ.
        !ùôúùô°ùô§ùôóùôñùô° - ùôàùô™ùôöùô®ùô©ùôßùôñ ùôöùô° ùô¢ùôñùôßùôòùôñùôôùô§ùôß ùôúùô°ùô§ùôóùôñùô°.
        !ùôßùôöùô•ùôûùôòùô† - ùôãùôöùôßùô¢ùôûùô©ùôö ùôñ ùô°ùô§ùô® ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® ùô´ùô§ùô°ùô´ùôöùôß ùôñ ùô®ùôöùô°ùôöùôòùôòùôûùô§ùô£ùôñùôß ùô®ùô™ùô® ùôöùô¶ùô™ùôûùô•ùô§ùô®.
        !ùòøùôèùôßùôöùôô - ùòºùô®ùôûùôúùô£ùôñ ùôöùô° ùôßùô§ùô° ùôôùôö ùòøùôè ùôñùô° ùôöùô¶ùô™ùôûùô•ùô§ ùôßùô§ùôüùô§.
        !ùòøùôèùôóùô°ùô™ùôö - ùòºùô®ùôûùôúùô£ùôñ ùôöùô° ùôßùô§ùô° ùôôùôö ùòøùôè ùôñùô° ùôöùô¶ùô™ùôûùô•ùô§ ùôñùôØùô™ùô°.
        !ùô®ùô°ùô§ùô¨ùô¢ùô§ùôôùôö - ùòºùôòùô©ùôûùô´ùôñ ùôöùô° ùô®ùô°ùô§ùô¨ùô¢ùô§ùôôùôö ùô•ùô§ùôß 1 ùô¢ùôûùô£ùô™ùô©ùô§.
        !ùôñùô°ùôûùô£ùôöùôñùôòùôûùô§ùô£ ùôßùôöùô®ùôöùô© - ùôçùôöùôûùô£ùôûùôòùôûùôñ ùô°ùôñ ùôñùô°ùôûùô£ùôöùôñùôòùôû√≥ùô£ ùôôùôöùô° ùôöùô¶ùô™ùôûùô•ùô§.
        !ùôûùôôùôñ - ùôàùôñùôßùôòùôñ ùôöùô° ùôûùô£ùôûùôòùôûùô§ ùôôùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùôûùôôùôñ.
        !ùô´ùô™ùôöùô°ùô©ùôñ - ùôàùôñùôßùôòùôñ ùôöùô° ùôûùô£ùôûùôòùôûùô§ ùôôùôöùô° ùô•ùôñùôßùô©ùôûùôôùô§ ùôôùôö ùô´ùô™ùôöùô°ùô©ùôñ.
        !ùôúùô°ùô§ùôóùôñùô° - ùôàùô™ùôöùô®ùô©ùôßùôñ ùôöùô° ùô¢ùôñùôßùôòùôñùôôùô§ùôß ùôúùô°ùô§ùôóùôñùô°.
        !ùôßùôöùô•ùôûùôòùô† - ùôãùôöùôßùô¢ùôûùô©ùôö ùôñ ùô°ùô§ùô® ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® ùô´ùô§ùô°ùô´ùôöùôß ùôñ ùô®ùôöùô°ùôöùôòùôòùôûùô§ùô£ùôñùôß ùô®ùô™ùô® ùôöùô¶ùô™ùôûùô•ùô§ùô®.
    `;
    room.sendAnnouncement(adminHelpMessage, player.id, 0xFFFFFF, "bold", 2);
}

function showHelp(player) {
    const helpMessage = `
 ùòæùô§ùô¢ùôñùô£ùôôùô§ùô® ùôÇùôöùô£ùôöùôßùôñùô°ùôöùô®:
        !ùôßeglas - ùôàùô™ùôöùô®ùô©ùôßùôñ ùô°ùôñùô® ùôßùôöùôúùô°ùôñùô® ùôôùôöùô° ùôüùô™ùôöùôúùô§.
        !ùôôùôûùô®ùôòùô§ùôßùôô - ùôàùô™ùôöùô®ùô©ùôßùôñ ùôöùô° ùôöùô£ùô°ùôñùôòùôö ùôôùôö ùòøùôûùô®ùôòùô§ùôßùôô.
        !ùô•ùô§ùô®ùôûùôòùôûùô§ùô£ - ùôÄùô®ùô©ùôñùôóùô°ùôöùôòùôö ùô©ùô™ ùô•ùô§ùô®ùôûùôòùôû√≥ùô£ ùôöùô£ ùôöùô° ùôòùôñùô¢ùô•ùô§. "ùôÇùôÜ", "ùô£ùô§ùôÇùôÜ", "ùòøùôÅùòæ", "ùôáùòø", "ùôáùôÑ", "ùôàùòæùòø", "ùôàùòæ", "ùôàùòæùôä", "ùôÄùôá", "ùôÄùòø", "ùôéùòø", "ùòøùòæ", "ùôòùôñùô¢ùô•ùôöùôßùô§"
        !ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® [ùôßùôöùôô/ùôóùô°ùô™ùôö/ùôßùô§ùôüùô§/ùôñùôØùô™ùô°/0/1] - ùôàùô™ùôöùô®ùô©ùôßùôñ ùô°ùôñ ùô°ùôûùô®ùô©ùôñ ùôôùôö ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® ùôôùôö ùô™ùô£ ùôöùô¶ùô™ùôûùô•ùô§.
    `;
    room.sendAnnouncement(helpMessage, player.id, 0xFFFFFF, "normal", 2);
}

function showDTHelp(player) {
    const dtHelpMessage = `
    ùòæùô§ùô¢ùôñùô£ùôôùô§ùô® ùôôùôö ùòøùôè:
        !ùôñùô°ùôûùô£ùôöùôñùôòùôûùô§ùô£ [ùôÑùòø1 ùôÑùòø2 ùôÑùòø3 ùôÑùòø4 ùôÑùòø5] - ùôÄùô®ùô©ùôñùôóùô°ùôöùôòùôö ùô°ùôñ ùôñùô°ùôûùô£ùôöùôñùôòùôû√≥ùô£ ùôôùôöùô° ùôöùô¶ùô™ùôûùô•ùô§.
        !ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® [ùôßùôöùôô/ùôóùô°ùô™ùôö/ùôßùô§ùôüùô§/ùôñùôØùô™ùô°/0/1] - ùôàùô™ùôöùô®ùô©ùôßùôñ ùô°ùôñ ùô°ùôûùô®ùô©ùôñ ùôôùôö ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® ùôôùôö ùô™ùô£ ùôöùô¶ùô™ùôûùô•ùô§.
        !ùôñùô°ùôûùô£ùôöùôñùôòùôûùô§ùô£ ùôßùôöùô®ùôöùô© - ùôçùôöùôûùô£ùôûùôòùôûùôñ ùô°ùôñ ùôñùô°ùôûùô£ùôöùôñùôòùôû√≥ùô£ ùôôùôöùô° ùôöùô¶ùô™ùôûùô•ùô§.
        !ùôñùô°ùôûùô£ùôöùôñùôòùôûùô§ùô£ùôöùô® - ùôàùô™ùôöùô®ùô©ùôßùôñ ùô°ùôñùô® ùôñùô°ùôûùô£ùôöùôñùôòùôûùô§ùô£ùôöùô® ùôôùôö ùô°ùô§ùô® ùôöùô¶ùô™ùôûùô•ùô§ùô®.
        !ùô°ùôûùô£ùôöùô™ùô• [ùôßùôöùôô/ùôóùô°ùô™ùôö] [ùôöùô®ùô¶ùô™ùôöùô¢ùôñ] - ùôÄùô®ùô©ùôñùôóùô°ùôöùôòùôö ùôöùô° ùôöùô®ùô¶ùô™ùôöùô¢ùôñ ùôôùôöùô° ùôöùô¶ùô™ùôûùô•ùô§.
        !ùôòùôñùô¢ùôóùôûùô§ [ùôÑùòø1 ùôÑùòø2] - ùòæùôñùô¢ùôóùôûùôñ ùôñ ùô°ùô§ùô® ùôüùô™ùôúùôñùôôùô§ùôßùôöùô® ùôôùôö ùô•ùô§ùô®ùôûùôòùôû√≥ùô£.
    `;
    room.sendAnnouncement(dtHelpMessage, player.id, 0xFFFFFF, "bold", 2);
}

function handleInstruccionCommand(player, message) {
    const args = message.split(" ");
    if (args.length < 3 || (args[1] !== "red" && args[1] !== "blue")) {
        room.sendAnnouncement("Uso incorrecto. Usa !instruccion red/blue [mensaje].", player.id, colors.bot, "bold", 2);
        return false;
    }

    const team = args[1];
    const instruccionMessage = args.slice(2).join(" ");
    let color;

    if (team === "red" && (player.id === creator || player.id === dts.red)) {
        color = colors.dtRed;
        sendTeamMessage(player, instruccionMessage, 1, color);
    } else if (team === "blue" && (player.id === creator || player.id === dts.blue)) {
        color = colors.dtBlue;
        sendTeamMessage(player, instruccionMessage, 2, color);
    } else {
        room.sendAnnouncement("No tienes permiso para usar este comando.9", player.id, colors.bot, "bold", 2);
        return false;
    }

    mutePlayersForDuration(3000); // Silenciar el chat general durante 3 segundos
    return false;
}

function sendTeamMessage(player, message, team, color) {
    room.getPlayerList().forEach(p => {
        if (p.team === team || p.id === creator) {
            room.sendAnnouncement(`ùôÑùôâùôéùôèùôçùôêùòæùòæùôÑùôäùôâ ùòøùôÄùôá ùòøùôè: ${message}`, p.id, color, "bold", 2);
        }
    });
}

function mutePlayersForDuration(duration) {
    room.getPlayerList().forEach(player => {
        if (!admins.has(player.id) && player.id !== creator && player.id !== dts.red && player.id !== dts.blue && !mutedPlayers.has(player.id)) {
            mutedPlayers.set(player.id, Date.now() + duration); // Muteo general por la duraci√≥n especificada
        }
    });
    setTimeout(unmutePlayers, duration);
}

function showScore(type) {
    let message;
    if (type === "ida") {
        message = `üî• ùòîùòàùòôùòäùòàùòãùòñùòô ùòãùòå ùòìùòà ùòêùòãùòàüî•: \nùòôùòåùòã ${matchStats.ida.redScore} - ${matchStats.ida.blueScore} ùòâùòìùòúùòå`;
    } else if (type === "vuelta") {
        message = `üî• ùòîùòàùòôùòäùòàùòãùòñùòô ùòãùòå ùòìùòà ùòùùòúùòåùòìùòõùòàüî•: \nùòôùòåùòã ${matchStats.vuelta.redScore} - ${matchStats.vuelta.blueScore} ùòâùòìùòúùòå`;
    } else if (type === "global") {
        const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
        const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;
        message = `üî• ¬°ùòîùòàùòôùòäùòàùòãùòñùòô ùòéùòìùòñùòâùòàùòì!üî•: \nùòôùòåùòã ${globalRedScore} - ${globalBlueScore} ùòâùòìùòúùòå`;
    }
    room.sendAnnouncement(message, null, colors.botGold, "bold", 2);
}

function resetScores() {
    matchStats.ida.redScore = 0;
    matchStats.ida.blueScore = 0;
    matchStats.vuelta.redScore = 0;
    matchStats.vuelta.blueScore = 0;
    room.sendAnnouncement("Los marcadores de ida y vuelta han sido reiniciados.", null, colors.bot, "bold", 2);
}

function repickTeams() {
    room.stopGame();
    room.getPlayerList().forEach(player => {
        if (player.id !== dts.red && player.id !== dts.blue) {
            room.setPlayerTeam(player.id, 0);
        }
    });
    matchStats = {
        ida: { redScore: 0, blueScore: 0 },
        vuelta: { redScore: 0, blueScore: 0 },
        ballInRedArea: 0,
        ballInBlueArea: 0,
        totalGameTime: 0,
        redPossession: 0,
        bluePossession: 0
    };
    room.sendAnnouncement("ùêÜùê´ùêöùêúùê¢ùêöùê¨ ùêöùê• ùê¶ùêöùê•ùê©ùêöùê´ùê¢ùêùùê® ùê¶ùêûùê¶ùêû üòê ùêãùê®ùê¨ ùêûùê™ùêÆùê¢ùê©ùê®ùê¨ ùê°ùêöùêß ùê¨ùê¢ùêùùê® ùê´ùêûùê¨ùê≠ùêöùêõùê•ùêûùêúùê¢ùêùùê®ùê¨. \n ùêãùê®ùê¨ ùêÉùêìùê¨ ùê©ùêÆùêûùêùùêûùêß ùêØùê®ùê•ùêØùêûùê´ ùêö ùêûùê•ùêûùê†ùê¢ùê´ ùê£ùêÆùê†ùêöùêùùê®ùê´ùêûùê¨.", null, colors.botGold, "bold", 2);
    isIda = true; // Reset to ida match
}

function listPlayers() {
    let players = room.getPlayerList();
    let playerListMessage = "Lista de jugadores:\n";
    players.forEach((player, index) => {
        playerListMessage += `${index + 1}. ${player.name} (ID: ${player.id})\n`;
    });
    return playerListMessage;
}

function listTeamPlayers(team) {
    let players = room.getPlayerList().filter(p => p.team === team);
    let teamName = team === 1 ? "Rojo" : "Azul";

    // Ordenar los jugadores seg√∫n la jerarqu√≠a de posiciones
    players.sort((a, b) => {
        let posA = playerPositions.get(a.id) || "AFK";
        let posB = playerPositions.get(b.id) || "AFK";
        return POSICIONES_JERARQUIA.indexOf(posA) - POSICIONES_JERARQUIA.indexOf(posB);
    });

    let playerListMessage = `Jugadores del equipo ${teamName}:\n`;

    players.forEach((player, index) => {
        let position = playerPositions.get(player.id) || "N/A";
        playerListMessage += `${index + 1}. ${position} - ${player.name} (ID: ${player.id})\n`;
    });

    return playerListMessage;
}
function resetAlineacion(team) {
    if (team === 1) {
        alineacionRed = [];
        esquemaRed = "";
        room.sendAnnouncement("Alineaci√≥n del equipo rojo ha sido reiniciada.", null, colors.dtRed, "normal", 2);
    } else if (team === 2) {
        alineacionBlue = [];
        esquemaBlue = "";
        room.sendAnnouncement("Alineaci√≥n del equipo azul ha sido reiniciada.", null, colors.dtBlue, "normal", 2);
    }
}

function setAlineacion(player, ids) {
    if (player.id === dts.red) {
        alineacionRed = ids;
        room.sendAnnouncement("Alineaci√≥n del equipo rojo ha sido establecida.", null, colors.dtRed, "normal", 2);
    } else if (player.id === dts.blue) {
        alineacionBlue = ids;
        room.sendAnnouncement("Alineaci√≥n del equipo azul ha sido establecida.", null, colors.dtBlue, "normal", 2);
    } else {
        room.sendAnnouncement("No tienes permiso para establecer la alineaci√≥n.", player.id, colors.bot, "normal", 2);
      }
}

function setEsquema(player, team, esquema) {
    if (team === "red" && player.team === 1) {
        esquemaRed = esquema;
        room.sendAnnouncement("Esquema del equipo rojo ha sido establecido.", null, colors.dtRed, "normal", 2);
    } else if (team === "blue" && player.team === 2) {
        esquemaBlue = esquema;
        room.sendAnnouncement("Esquema del equipo azul ha sido establecido.", null, colors.dtBlue, "normal", 2);
    } else {
        room.sendAnnouncement("No tienes permiso para establecer el esquema de este equipo.", player.id, colors.bot, "normal", 2);
    }
}

function showAlineacion() {
    const redPlayers = alineacionRed.map(id => {
        const player = room.getPlayer(id);
        if (player) {
            const position = getPlayerPosition(player);
            return `${position} - ${player.name}`;
        }
        return "N/A";
    });

    const bluePlayers = alineacionBlue.map(id => {
        const player = room.getPlayer(id);
        if (player) {
            const position = getPlayerPosition(player);
            return `${position} - ${player.name}`;
        }
        return "N/A";
    });

    // Verificar si al menos una alineaci√≥n est√° establecida
    if (redPlayers.length === 0 && bluePlayers.length === 0) {
        return; // No mostrar el mensaje si ambas alineaciones est√°n vac√≠as
    }

    // Asegurarse de que ambas listas tengan la misma longitud
    const maxLength = Math.max(redPlayers.length, bluePlayers.length);
    while (redPlayers.length < maxLength) {
        redPlayers.push("");
    }
    while (bluePlayers.length < maxLength) {
        bluePlayers.push("");
    }

    // Crear el mensaje con las alineaciones en columnas
    let message = "Ôº°Ôº¨Ôº©ÔºÆÔº•Ôº°Ôº£Ôº©ÔºØÔºÆÔº•Ôº≥Ôºö\n";
    message += "Ôº≤Ôº•Ôº§".padEnd(40) + "Ôº¢Ôº¨ÔºµÔº•\n";  // Encabezados de columnas
    for (let i = 0; i < maxLength; i++) {
        message += redPlayers[i].padEnd(40) + bluePlayers[i] + "\n";
    }

    message += `\nÔº¨Ôº©ÔºÆÔº•ÔºµÔº∞ Ôº≤Ôº•Ôº§ ${esquemaRed}\n`;
    message += `Ôº¨Ôº©ÔºÆÔº•ÔºµÔº∞ Ôº¢Ôº¨ÔºµÔº• ${esquemaBlue}\n`;
    
    room.sendAnnouncement(message, null, colors.bot, "bold", 2);
}

function handleAlineacionCommand(player, message) {
    const args = message.split(" ").slice(1); // Remove the command itself
    if (args.length === 1 && args[0] === "reset") {
        resetAlineacion(player.team);
    } else if (args.length === 6) {
        const ids = args.slice(0, 5).map(id => parseInt(id, 10));
        const esquema = args[5];
        setAlineacion(player, ids, esquema);
    } else {
        room.sendAnnouncement("Uso incorrecto. Usa !alineacion [ID1 ID2 ID3 ID4 ID5].", player.id, colors.bot, "normal", 2);
    }
    return false;
}

function setAlineacion(player, ids, esquema) {
    if (player.team === 1) {
        alineacionRed = ids;
        esquemaRed = esquema;
        room.sendAnnouncement("¬°Ôº°Ôº¨Ôº©ÔºÆÔº•Ôº°Ôº£Ôº©√ìÔºÆ Ôº§Ôº•Ôº¨ Ôº•Ôº±ÔºµÔº©Ôº∞ÔºØ Ôº≤Ôº•Ôº§ Ôº•Ôº≥Ôº¥Ôº°Ôº¢Ôº¨Ôº•Ôº£Ôº©Ôº§Ôº°ÔºÅ", null, colors.dtRed, "normal", 2);
    } else if (player.team === 2) {
        alineacionBlue = ids;
        esquemaBlue = esquema;
        room.sendAnnouncement("¬°Ôº°Ôº¨Ôº©ÔºÆÔº•Ôº°Ôº£Ôº©√ìÔºÆ Ôº§Ôº•Ôº¨ Ôº•Ôº±ÔºµÔº©Ôº∞ÔºØ Ôº¢Ôº¨ÔºµÔº• Ôº•Ôº≥Ôº¥Ôº°Ôº¢Ôº¨Ôº•Ôº£Ôº©Ôº§Ôº°ÔºÅ", null, colors.dtBlue, "normal", 2);
    }
}

function mutePlayers() {
    room.getPlayerList().forEach(player => {
        if (!admins.has(player.id) && player.id !== creator && player.id !== dts.red && player.id !== dts.blue && !mutedPlayers.has(player.id)) {
            mutedPlayers.set(player.id, Date.now() + 15000); // Muteo general de 15 segundos
        }
    });
    room.sendAnnouncement("ùêãùêöùê¨ ùê©ùêÆùê≠ùêöùê¨ ùê°ùêöùêß ùê¨ùê¢ùêùùê® ùê¨ùê¢ùê•ùêûùêßùêúùê¢ùêöùêùùêöùê¨ ùê©ùê®ùê´ ùüèùüì ùê¨ùêûùê†ùêÆùêßùêùùê®ùê¨. \nùêÑùê• ùê≠ùê¢ùêûùê¶ùê©ùê® ùêúùê®ùê´ùê´ùêû, ùê≤ ùêßùêöùêùùê¢ùêû ùê©ùê®ùêùùê´√° ùê¢ùêßùê≠ùêûùê´ùê´ùêÆùê¶ùê©ùê¢ùê´ ùêûùê• ùêûùê¨ùê©ùêûùêúùê≠√°ùêúùêÆùê•ùê®. ‚è≥üîá", null, colors.bot, "bold", 2);
    setTimeout(unmutePlayers, 15000);
}

function unmutePlayers() {
    const now = Date.now();
    mutedPlayers.forEach((expirationTime, playerId) => {
        if (expirationTime <= now) {
            mutedPlayers.delete(playerId);
            persistentMutedPlayers.delete(playerId);
        }
    });

    room.sendAnnouncement("Todos los jugadores han sido desmuteados, excepto aquellos con muteos espec√≠ficos.", null, colors.bot, "bold", 2);
}

function unmuteAllPlayers() {
    const now = Date.now();
    mutedPlayers.forEach((expirationTime, playerId) => {
        if (expirationTime <= now) {
            mutedPlayers.delete(playerId);
            persistentMutedPlayers.delete(playerId);
        }
    });

    room.sendAnnouncement("Todos los jugadores han sido desmuteados, excepto aquellos con muteos espec√≠ficos.", null, colors.bot, "bold", 2);
}

function muteFichajes() {
    room.getPlayerList().forEach(player => {
        if (!admins.has(player.id) && player.id !== creator && player.id !== dts.red && player.id !== dts.blue && !mutedPlayers.has(player.id)) {
            mutedPlayers.set(player.id, Date.now() + 120000); // Muteo general de 2 minutos
        }
    });
    room.sendAnnouncement("ùêíùê¢ùê•ùêûùêßùêúùê¢ùê® ùêûùêß ùêûùê• ùêúùêöùê¶ùê©ùê®: ùê•ùê®ùê¨ ùê£ùêÆùê†ùêöùêùùê®ùê´ùêûùê¨ ùê°ùêöùêß ùê¨ùê¢ùêùùê® ùê¨ùê¢ùê•ùêûùêßùêúùê¢ùêöùêùùê®ùê¨ ùê©ùê®ùê´ ùüê ùê¶ùê¢ùêßùêÆùê≠ùê®ùê¨. üîá‚öΩ", null, colors.bot, "bold", 2);
    setTimeout(unmutePlayers, 120000); // 2 minutos
}

function mutePlayerById(playerId, duration) {
    const player = room.getPlayer(playerId);
    if (!player) {
        room.sendAnnouncement(`Jugador con ID ${playerId} no encontrado.`, null, colors.bot, "bold", 2);
        return;
    }

    mutedPlayers.set(playerId, true);
    // A√±adir el jugador a la lista de muteados con su tiempo de expiraci√≥n
    mutedPlayers.set(playerId, Date.now() + duration * 1000);
    persistentMutedPlayers.add(playerId); // A√±adir al conjunto persistente
    room.sendAnnouncement(`${player.name} ha sido silenciado por ${duration} segundos.`, null, colors.bot, "bold", 2);

    // Programar el desmuteo despu√©s de la duraci√≥n especificada
    setTimeout(() => {
        if (mutedPlayers.has(playerId)) {
            mutedPlayers.delete(playerId);
            persistentMutedPlayers.delete(playerId); // Eliminar del conjunto persistente
            room.sendAnnouncement(`${player.name} ya no est√° silenciado.`, null, colors.bot, "bold", 2);
        }
    }, duration * 1000);
}

function unmutePlayerById(playerId) {
    const player = room.getPlayer(playerId);
    if (!player) {
        room.sendAnnouncement(`Jugador con ID ${playerId} no encontrado.`, null, colors.bot, "bold", 2);
        return;
    }

    if (mutedPlayers.has(playerId)) {
        mutedPlayers.delete(playerId);
        persistentMutedPlayers.delete(playerId); // Eliminar del conjunto persistente
        room.sendAnnouncement(`${player.name} ya no est√° silenciado.`, null, colors.bot, "bold", 2);
    } else {
        room.sendAnnouncement(`${player.name} no estaba silenciado.`, null, colors.bot, "bold", 2);
    }
}

function enableSlowMode(seconds) {
    slowModeEnabled = true;
    slowModeDuration = seconds;
    lastMessageTime = {};
    setTimeout(() => {
        slowModeEnabled = false;
        room.sendAnnouncement("Modo lento desactivado.", null, colors.bot, "bold", 2);
    }, seconds * 3000);
}

function enableSlowModeForPlayer(playerId, duration) {
    slowModePlayers.set(playerId, duration);
    setTimeout(() => {
        slowModePlayers.delete(playerId);
        room.sendAnnouncement(`Modo lento desactivado para el jugador con ID ${playerId}.`, null, colors.bot, "bold", 2);
    }, duration * 2000);
}

function handleMessage(player, message) {
    const currentTime = Date.now();
    if (slowModeEnabled || slowModePlayers.has(player.id)) {
        const slowModeEndTime = slowModePlayers.get(player.id);
        if (slowModeEndTime && currentTime < slowModeEndTime) {
            room.sendAnnouncement("Est√°s en modo lento. Espera antes de enviar otro mensaje.", player.id, colors.bot, "bold", 2);
            return false;
        }
        slowModePlayers.set(player.id, currentTime + slowModeDuration * 1000);
    }
    // ...existing code...
}

function isAdmin(player) {
    return admins.has(player.id) || player.id === creator || hosters.has(player.id);
}

function isDT(player) {
    return player.id === dts.red || player.id === dts.blue;
}

function isCreator(player) {
    return player.id === creator || hosters.has(player.id);
}

function saveUniformCommand(player, message) {
    const team = room.getPlayer(player.id).team;
    if (team === 1) {
        uniformCommands.red = message;
    } else if (team === 2) {
        uniformCommands.blue = message;
    }
}

const reglasVariantes = [
    "Los DTs kickear√°n a jugadores que lo molesten.",
    "Si haces spam, te pueden expulsar.",
    "Si da√±√°s la sala como DT o admin, ir√°s a la lista negra.",
    "Debes seguir las indicaciones de los administradores.",
    "No puedes entres a la cancha sin ser titular o ser√°s expulsado.",
    "Si interfieres en el juego, ser√°s expulsado.",
    "Nadie puede estar detr√°s del arco para evitar que impidan goles.",
    "Solo puedes cambiar de equipo con permiso de tu DT y del t√©cnico rival.",
    "El partido no continuar√° sin los 2 DTs.",
    "Los DTs deciden si hay penales o tiempo extra.",
    "Si no est√°n los 10 jugadores en el saque inicial, el que juegue el bal√≥n ser√° kickeado.",
    "tenemos un discord para avisar cuando jugamos üëâ ùò©ùòµùòµùò±ùò¥://ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò•.ùò®ùò®/ùòßùò¥ùò±ùò±ùòî3ùò∏ùòù3ùòé",
    "puedes cambiar tu posicion con !posicion MC, MCO, DC, etc.",
    "si eres dt usa !helpdt para ver todos los comandos que puedes usar",
    "con !memide puedes mostrar tu envergadura en el campo",
    "si eres dt puedes usar !alineacion [ID1 ID2 ID3 ID4 ID5] para establecer la alineaci√≥n",
    "capo no es tu papa no le hagas berrinches",
    "ser dt es dificil, no te enojes si te sacan",
    "si eres dt puedes usar !instruccion red/blue [mensaje] para dar instrucciones a tu equipo",
    "si vas perdiendo y tu equipo esta desarmado no saques del medio te van a meter mas goles",
    "si eres dt puedes usar !cambio id x id para hacer cambios en el equipo",
    "si escribes !helpjugador encontraras comandos interessantes que puedes usar",
    "en nuestro discord üëâ ùò©ùòµùòµùò±ùò¥://ùò•ùò™ùò¥ùò§ùò∞ùò≥ùò•.ùò®ùò®/ùòßùò¥ùò±ùò±ùòî3ùò∏ùòù3ùòé encontraras las repeticiones de los partidos penales",
    "si eres campeon como DT 5 veces se te dara tu propio efecto en el chat",
    "si tu DT no te pone jugar ni un minuto del partido, puedes solicitar trasferencia a otro equipo",
    "a mas pides ser admin, menos posibilidades tienes de serlo",
    "si eres dt puedes usar !list para ver la lista de jugadores",
    "si el partido queda empatado habra una votacion para decidir si se juegan penales o tiempo extra",
    "puedes usar !whisper id mensaje para enviar mensajes privados",
    "con !area !posesion !goles puedes ver las estadisticas del partido",
    "si estas harto de ser DT, usa !renuncia para dejar tu cargo",
    "si eres dt puede usar !intruccion red/blue [mensaje] para dar instrucciones a tu equipo",
    "si usas tt antes del mensaje, lo podran ver solo tus compa√±eros de equipo",
    "si te vas usa !afk para que el DT sepa que no estas disponible"

];

function mostrarReglaAleatoria() {
    const reglaAleatoria = reglasVariantes[Math.floor(Math.random() * reglasVariantes.length)];
    room.sendAnnouncement(`üì¢ Recuerda que ${reglaAleatoria}`, null, colors.bot, "bold", 2);
}

// Mostrar una regla aleatoria cada 10 minutos (600000 milisegundos)
setInterval(mostrarReglaAleatoria, 140000);

function handleAfkCommand(player) {
    if (afkPlayers.has(player.id)) {
        room.setPlayerAvatar(player.id, null);
        afkPlayers.delete(player.id);

        const randomPosicion = POSICIONES[Math.floor(Math.random() * POSICIONES.length)];
        setPlayerPosition(player, randomPosicion);

        room.sendAnnouncement(`${player.name} ya no est√° AFK`, null, colors.bot, "bold", 2);
    } else {
        const afkAvatar = "üò¥";
        const originalAvatar = player.avatar; // Asegurarse de obtener el avatar actual
        afkPlayers.set(player.id, originalAvatar);
        room.setPlayerAvatar(player.id, afkAvatar);
        room.sendAnnouncement(`${player.name} est√° ahora AFK.`, null, colors.bot, "bold", 2);
    }
}

function Cambio(player, message) {
    // Verificar si el jugador es DT o Creador
    if (player.id !== creator && player.id !== dts.red && player.id !== dts.blue) {
        room.sendAnnouncement("No tienes permiso para usar este comando.10", player.id, colors.bot, "bold", 2);
        return false;
    }

    const args = message.split(" ");
    if (args.length !== 4 || args[2].toLowerCase() !== "x") {
        room.sendAnnouncement("Uso incorrecto. Usa !cambio id x id. usa !list o !jugadores red/blue para ver las id", player.id, colors.bot, "normal", 2);
        return false;
    }

    const idSale = parseInt(args[1], 10);
    const idEntra = parseInt(args[3], 10);

    if (isNaN(idSale) || isNaN(idEntra)) {
        room.sendAnnouncement("IDs de jugadores no v√°lidos, no uses #", player.id, colors.bot, "normal", 2);
        return false;
    }

    const playerSale = room.getPlayer(idSale);
    const playerEntra = room.getPlayer(idEntra);

    if (!playerSale || !playerEntra) {
        room.sendAnnouncement("IDs de jugadores no v√°lidos, no uses #", player.id, colors.bot, "normal", 2);
        return false;
    }

    const positionSale = getPlayerPosition(playerSale);
    const positionEntra = getPlayerPosition(playerEntra);
    const cambioMessage = `Ôº£Ôº°Ôº≠Ôº¢Ôº©ÔºØ\n\n[${positionSale}] ${playerSale.name} Ôº≥Ôº°Ôº¨Ôº•\nx\n[${positionEntra}] ${playerEntra.name} Ôº•ÔºÆÔº¥Ôº≤Ôº°`;
    const color = player.id === dts.red ? colors.dtRed : colors.dtBlue;

    room.sendAnnouncement(cambioMessage, null, color, "bold", 2);
    room.setPlayerTeam(playerSale.id, 0); // Mover al jugador que "sale" a espectadores

    // Teletransportar al jugador que entra a un punto espec√≠fico del mapa
    let teleportPosition = { x: 0, y: -320 }; // Cambia esto a la posici√≥n deseada
    room.setPlayerDiscProperties(playerEntra.id, { x: teleportPosition.x, y: teleportPosition.y });

    return true;
}

function resetAdmins() {
    room.getPlayerList().forEach(player => {
        if (admins.has(player.id)) {
            admins.delete(player.id);
            room.setPlayerAdmin(player.id, false);
        }
    });
    room.sendAnnouncement("Todos los administradores son todos unos burros han sido removidos.", null, colors.bot, "bold", 2);
}

function handleLockdownCommand(player, message) {
    const args = message.split(" ");
    if (args.length !== 2 || (args[1] !== "1" && args[1] !== "0")) {
        room.sendAnnouncement("usa el chat", player.id, colors.bot, "bold", 2);
        return false;
    }

    if (args[1] === "1") {
        lockdownMode = true;
        muteAllPlayersIndefinitely();
        room.stopGame();
        room.sendAnnouncement("‚ö†Ô∏è Modo de emergencia activado.\n El server ha sido raideado. Descon√©ctate ahora.", null, colors.bot, "bold", 2);
    } else {
        lockdownMode = false;
        unmuteAllPlayers();
        room.sendAnnouncement("Modo de emergencia desactivado.", null, colors.bot, "bold", 2);
    }
    return false;
}

function muteAllPlayersIndefinitely() {
    room.getPlayerList().forEach(player => {
        if (!admins.has(player.id) && player.id !== creator && player.id !== dts.red && player.id !== dts.blue) {
            mutedPlayers.set(player.id, true); // Use .set instead of .add
        }
    });
    setTimeout(() => {
        room.sendAnnouncement("‚ö†Ô∏è Exploit detectado: Unauthorized access granted ‚ö†Ô∏è", null, colors.playerRed, "bold", 2);
    }, 1000);

    setTimeout(() => {
        room.sendAnnouncement("Initializing packet sniffer... [ACTIVE]", null, colors.playerRed, "bold", 2);
    }, 2000);

    setTimeout(() => {
        room.sendAnnouncement("Capturing network traffic... [DECRYPTING HEADERS]", null, colors.playerRed, "bold", 2);
    }, 13000);

    setTimeout(() => {
        room.sendAnnouncement(" Parsing IP and device metadata...", null, colors.playerRed, "bold", 2);
    }, 4000);

    setTimeout(() => {
        room.sendAnnouncement(" Geo-tracking enabled: triangulating location...", null, colors.playerRed, "bold", 2);
    }, 5000);

    setTimeout(() => {
        room.sendAnnouncement("Identidad verificada. Data uploaded to remote server.", null, colors.playerRed, "bold", 2);
    }, 6000);

    setTimeout(() => {
        room.sendAnnouncement(" Remote access granted: SYSTEM CONTROL ESTABLISHED.", null, colors.playerRed, "bold", 2);
    }, 7000);

    setTimeout(() => {
        room.sendAnnouncement("Fetching stored credentials... [LOGIN INFO DETECTED]", null, colors.playerRed, "bold", 2);
    }, 1000);

    setTimeout(() => {
        room.sendAnnouncement("‚ùå Disconnecting won't help. Access is persistent. ‚ùå", null, colors.playerRed, "bold", 2);
    }, 40000);

    setTimeout(() => {
        room.sendAnnouncement(" Connection secured. Await further instructions.", null, colors.playerRed, "bold", 2);
    }, 20000);
}
// Funci√≥n para manejar el comando !strike
function handleStrikeCommand(player, message) {
    if (!admins.has(player.id) && player.id !== creator) {
        room.sendAnnouncement("No tienes permiso para usar este comando.", player.id, colors.bot, "bold", 2);
        return false;
    }

    const args = message.split(" ");
    if (args.length < 2 || (args[1] !== "ùòôùòåùòã" && args[1] !== "ùòâùòìùòúùòå")) {
        room.sendAnnouncement("Uso incorrecto. Usa !strike red o !strike blue [motivo].", player.id, colors.bot, "bold", 2);
        return false;
    }

    const team = args[1];
    const motivo = args.slice(2).join(" ");
    strikes[team].push(motivo || "no se");
    let announcement = `¬°ùòöùòõùòôùòêùòíùòå ùò±ùò¢ùò≥ùò¢ ${team.toUpperCase()}! ‚ö°üö® \nùò†ùò¢ ùò∑ùò¢ùòØ ${strikes[team].length}... ¬øùòöùò∞ùòØ ùò™ùò•ùò™ùò∞ùòµùò¢ùò¥? ùò∂ùòØ ùò±ùò¶ùòØùò¢ùò≠ ùò≠ùò∞ùò¥ ùò©ùò¢ùò≥ùò¢ ùò≥ùò¶ùòßùò≠ùò¶ùòπùò™ùò∞ùòØùò¢ùò≥ üëÄüî•`;
    if (motivo) {
        announcement += ` ùòîùò∞ùòµùò™ùò∑ùò∞: ${motivo}`;
    }
    room.sendAnnouncement(announcement, null, colors.bot, "bold", 2);
    return false;
}

// Funci√≥n para manejar el comando !showstrikes
function handleShowStrikesCommand(player) {
    if (!admins.has(player.id) && player.id !== creator) {
        room.sendAnnouncement("No tienes permiso para usar este comando.13", player.id, colors.bot, "bold", 2);
        return false;
    }

    const redStrikes = strikes.red.map((motivo, index) => `Strike ${index + 1}: ${motivo}`).join("\n");
    const blueStrikes = strikes.blue.map((motivo, index) => `Strike ${index + 1}: ${motivo}`).join("\n");
    const announcement = `ùôéùôèùôçùôÑùôÜùôÄùôé:\nùôçùôÄùòø:\n${redStrikes}\n\nùòΩùôáùôêùôÄ:\n${blueStrikes}`;
    room.sendAnnouncement(announcement, player.id, colors.botGold, "bold", 2);
    return false;
}

function handleAreaCommand(player) {
    const totalGameTime = matchStats.totalGameTime;
    if (totalGameTime === 0) {
        room.sendAnnouncement("No hay datos suficientes para mostrar las √°reas de juego.", player.id, colors.bot, "bold", 2);
        return;
    }

    const redAreaPercentage = ((matchStats.ballInRedArea / totalGameTime) * 100).toFixed(2);
    const blueAreaPercentage = ((matchStats.ballInBlueArea / totalGameTime) * 100).toFixed(2);

    room.sendAnnouncement(`ùêÄùêëùêÑùêÄùêí ùêÉùêÑùêã ùêÇùêÄùêåùêèùêé ùêÉùêéùêçùêÉùêÑ ùêåùêÄùêí ùêíùêÑ ùêáùêÄ ùêâùêîùêÜùêÄùêÉùêé: \n‚ñà‚ñì‚ñí¬≠‚ñë‚°∑‚†ÇùôçùôÄùòø ${redAreaPercentage}% - ùòΩùôáùôêùôÄ ${blueAreaPercentage}%`, null, colors.botGold, "bold", 2);
}

function handlePosesionCommand(player) {
    const totalPossessionTime = matchStats.redPossession + matchStats.bluePossession;
    if (totalPossessionTime === 0) {
        room.sendAnnouncement("No hay datos suficientes para mostrar la posesi√≥n del bal√≥n.", player.id, colors.bot, "bold", 2);
        return;
    }

    const redPossessionPercentage = ((matchStats.redPossession / totalPossessionTime) * 100).toFixed(2);
    const bluePossessionPercentage = ((matchStats.bluePossession / totalPossessionTime) * 100).toFixed(2);

    room.sendAnnouncement(`ùêèùêéùêíùêÑùêíùêàùêéùêç ùêÉùêÑ ùêÅùêÄùêãùêéùêç: \n‚ñà‚ñì‚ñí¬≠‚ñë‚°∑‚†ÇùôçùôÄùòø ${redPossessionPercentage}% - ùòΩùôáùôêùôÄ ${bluePossessionPercentage}%‚†ê‚¢æ‚ñë‚ñí‚ñì‚ñà`, null, colors.botGold, "bold", 2);
}

function handleGolesCommand(player) {
    if (!matchStarted) {
        room.sendAnnouncement("No hay un partido en curso en este momento.", player.id, colors.bot, "bold", 2);
        return;
    }

    // Obtener los goleadores del partido actual
    const currentGoalScorers = Array.from(goalScorers.entries())
        .sort((a, b) => b[1] - a[1]); // Ordenar de m√°s goles a menos

    // Obtener los asistentes del partido actual
    const currentAssistants = Array.from(assistants.entries())
        .sort((a, b) => b[1] - a[1]); // Ordenar de m√°s asistencias a menos

    if (currentGoalScorers.length === 0 && currentAssistants.length === 0) {
        room.sendAnnouncement("No hay goles ni asistencias registradas en el partido actual.", player.id, colors.bot, "bold", 2);
        return;
    }

    let message = "ùôÇùôäùôáùôÄùòºùòøùôäùôçùôÄùôé ùòøùôÄùôá ùôãùòºùôçùôèùôÑùòøùôä ùòºùòæùôèùôêùòºùôá\n";
    currentGoalScorers.forEach(([playerName, goals]) => {
        message += `${playerName}: ${goals} ùôúùô§ùô°ùôöùô®\n`;
    });

    message += "\nùòºùôéùôÑùôéùôèùôÄùôâùôèùôÄùôé ùòøùôÄùôá ùôãùòºùôçùôèùôÑùòøùôä ùòºùòæùôèùôêùòºùôá\n";
    currentAssistants.forEach(([playerName, assists]) => {
        message += `${playerName}: ${assists} ùôñùô®ùôûùô®ùô©ùôöùô£ùôòùôûùôñùô®\n`;
    });

    room.sendAnnouncement(message, player.id, colors.bot, "bold", 2);
}

function getRandomNumber() {
    const range1 = Array.from({ length: 8 }, (_, i) => i + 1); // 1-8
    const range2 = Array.from({ length: 6 }, (_, i) => i + 9); // 9-14
    const range3 = Array.from({ length: 16 }, (_, i) => i + 15); // 15-30

    const random = Math.random();
    let selectedRange;

    if (random < 0.25) {
        selectedRange = range1;
    } else if (random < 0.85) { // 0.25 + 0.60 = 0.85
        selectedRange = range2;
    } else {
        selectedRange = range3;
    }

    return selectedRange[Math.floor(Math.random() * selectedRange.length)];
}

function handleMemideCommand(player) {
    const currentTime = Date.now();
    const lastTime = lastMemideTime.get(player.id) || 0;

    if (currentTime - lastTime < 300000) { // 5 minutos en milisegundos
        const remainingTime = Math.ceil((300000 - (currentTime - lastTime)) / 1000);
        room.sendAnnouncement(`Debes esperar ${remainingTime} segundos antes de usar el comando !memide nuevamente.`, player.id, colors.bot, "bold", 2);
        return;
    }

    lastMemideTime.set(player.id, currentTime);
    const size = getRandomNumber();
    const randomMessages = [
        `A ${player.name} le mide la picha ${size} cm. Felicidades, campe√≥n, tremendo logro... l√°stima que seas un hpta meme andante ü§°üëè`,
        `Hist√≥rico: ${player.name} rompe r√©cord con ${size} cm. Una pena que no sea en precisi√≥n de pases üòî‚öΩ`,
        `${player.name} dice que son ${size} cm, pero yo lo vi jugar y dudo que pase de los 5 cm de confianza ü§®üìè`,
        `Tranquilo, ${player.name}, aunque sean ${size} cm, lo importante es el coraz√≥n‚Ä¶ y en eso tampoco destacas üò≠üíî`,
        `A ${player.name} le midieron ${size} cm. No sabemos si es mucho o poco, pero con esa precisi√≥n no cabecea ni un ladrillo ü§°‚öΩ`,
        `Datos oficiales: ${player.name} reporta ${size} cm. No sabemos si es ventaja o desventaja, pero sigue fallando pases a dos metros üò≠üîç`,
        `${player.name} con sus ${size} cm. Igual aqu√≠ lo que cuenta es el talento‚Ä¶ y bueno, mejor no hablemos de eso ü§°‚öΩ`,
        `${player.name} presume sus ${size} cm, pero dice que lo importante es c√≥mo se usa. Curioso, porque en el server tampoco se nota mucho uso ü§®üîÑ`,
        `Dicen que a ${player.name} le midieron ${size} cm, pero aqu√≠ todos sabemos que lo importante es la t√©cnica‚Ä¶ y bueno, sigue en cero ü§°üìâ`,
        `Investigaciones revelan que ${player.name} tiene ${size} cm. El tama√±o puede variar, pero lo que no cambia es su habilidad para tomar malas decisiones en el juego üî¨üìä`,
        `A ${player.name} le midieron ${size} cm. No importa cu√°nto sea, lo importante es la seguridad en uno mismo‚Ä¶ üòÜ`,
        `A ${player.name} le midieron ${size} cm. Si en la cancha compensara eso con talento, otro ser√≠a el cuento ‚öΩüìâ`,
        `${player.name} revel√≥ su medida: ${size} cm. Honestamente, un dato irrelevante cuando seguimos esperando que juegue bien el malparido üîÑ`,
        `${player.name} presume ${size} cm. Al final lo que importa es la actitud‚Ä¶ y viendo su rendimiento, ah√≠ tampoco hay mucho de qu√© hablar üòÜüìâ`
    ];
    const randomMessage = randomMessages[Math.floor(Math.random() * randomMessages.length)];
    room.sendAnnouncement(randomMessage, null, colors.bot, "bold", 2);
}

function handleFichajesTimeCommand(player, message) {
    const args = message.split(" ");
    if (args.length !== 2 || (args[1] !== "1" && args[1] !== "0")) {
        room.sendAnnouncement("Uso incorrecto. Usa !fichajestime 1 para activar o !fichajestime 0 para desactivar.", player.id, colors.bot, "bold", 2);
        return false;
    }

    if (!admins.has(player.id) && player.id !== creator) {
        room.sendAnnouncement("No tienes permiso para usar este comando.", player.id, colors.bot, "bold", 2);
        return false;
    }

    if (args[1] === "1") {
        mutePlayers();
        room.sendAnnouncement("üîî ¬°ùôÄùô° ùô¢ùôöùôßùôòùôñùôôùô§ ùôôùôö ùôõùôûùôòùôùùôñùôüùôöùô® ùôöùô®ùô©√° ùôñùôòùô©ùôûùô´ùô§! üîî\nùôáùô§ùô® ùòøùôèùô® ùô©ùôûùôöùô£ùôöùô£ 3 ùô¢ùôûùô£ùô™ùô©ùô§ùô® ùô•ùôñùôßùôñ ùôßùôöùôñùô°ùôûùôØùôñùôß ùô©ùô™ùô® ùô¢ùô§ùô´ùôûùô¢ùôûùôöùô£ùô©ùô§ùô®. üïí", null, colors.bot, "bold", 2);
        
        // Recordatorio despu√©s de 1 minuto y 30 segundos
        setTimeout(() => {
            room.sendAnnouncement("‚è∞ ¬°Ôº±ÔΩïÔΩÖÔΩÑÔΩÅ Ôºë ÔΩçÔΩâÔΩéÔΩïÔΩîÔΩè ÔΩô ÔºìÔºê ÔΩìÔΩÖÔΩáÔΩïÔΩéÔΩÑÔΩèÔΩìÔºÅ ‚è∞\ÔΩé¬°Ôº§ÔΩÖÔΩéÔΩìÔΩÖ ÔΩêÔΩíÔΩâÔΩìÔΩÅ ÔΩÖÔΩé ÔΩàÔΩÅÔΩÉÔΩÖÔΩí ÔΩÜÔΩâÔΩÉÔΩàÔΩÅÔΩäÔΩÖÔΩìÔºå ÔΩÖÔΩå ÔΩîÔΩâÔΩÖÔΩçÔΩêÔΩè ÔΩìÔΩÖ ÔΩÅÔΩÉÔΩÅÔΩÇÔΩÅÔºÅ üïí", null, colors.bot, "bold", 2);
        }, 90000); // 1 minuto y 30 segundos en milisegundos

        fichajesTimeout = setTimeout(() => {
            room.stopGame();
            unmutePlayers();
            room.sendAnnouncement("‚è∞ ùôÄùô° ùô¢ùôöùôßùôòùôñùôôùô§ ùôôùôö ùôõùôûùôòùôùùôñùôüùôöùô® ùôùùôñ ùô©ùôöùôßùô¢ùôûùô£ùôñùôôùô§.‚è∞ \nùôùùôñùôòùôöùôß ùôõùôûùôòùôùùôñùôüùôöùô® ‚ùå \nùôùùôñùôóùô°ùôñùôß ùô¢ùôûùôöùôßùôôùôñ ‚úÖ", null, colors.bot, "bold", 2);
        }, 180000); // 3 minutos en milisegundos
    } else if (args[1] === "0") {
        clearTimeout(fichajesTimeout);
        room.stopGame();
        unmutePlayers();
        room.sendAnnouncement("‚è∞ ùôÄùô° ùô¢ùôöùôßùôòùôñùôôùô§ ùôôùôö ùôõùôûùôòùôùùôñùôüùôöùô® ùôùùôñ ùô©ùôöùôßùô¢ùôûùô£ùôñùôôùô§.‚è∞ \nùôùùôñùôòùôöùôß ùôõùôûùôòùôùùôñùôüùôöùô® ‚ùå \nùôùùôñùôóùô°ùôñùôß ùô¢ùôûùôöùôßùôôùôñ ‚úÖ", null, colors.bot, "bold", 2);
    }
    return false;
}

function handleDTAvatarRequest(player, message) {
    const currentTime = Date.now();
    if (currentTime - lastAvatarRequestTime < 120000) { // 2 minutos en milisegundos
        room.sendAnnouncement("Debes esperar 2 minutos antes de usar este comando nuevamente.", player.id, colors.bot, "bold", 2);
        return;
    }

    lastAvatarRequestTime = currentTime;

    setTimeout(() => {
        room.getPlayerList().forEach(player => {
            const position = playerPositions.get(player.id) || "N/A"; // Obtener la posici√≥n del jugador

            // Cambiar el avatar del jugador a su posici√≥n
            room.setPlayerAvatar(player.id, position);

            // Restaurar el avatar a null despu√©s de 3 segundos
            setTimeout(() => {
                if (player.id === dts.red) {
                    room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT rojo
                } else if (player.id === dts.blue) {
                    room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT azul
                } else {
                    room.setPlayerAvatar(player.id, null);
                }
            }, 3000);
        });
    }, 5000); // Esperar 5 segundos antes de cambiar los avatares
}

function handleSetCreatorCommand(player, message) {
    if (player.id !== creator) {
        room.sendAnnouncement("No tienes permiso para usar este comando.15", player.id, colors.bot, "bold", 2);
        return false;
    }

    const args = message.split(" ");
    if (args.length !== 2) {
        room.sendAnnouncement("Uso incorrecto. Usa !setcreator [ID] o !setcreator 0 para quitar.", player.id, colors.bot, "bold", 2);
        return false;
    }

    const newCreatorId = parseInt(args[1], 10);

    if (newCreatorId === 0) {
        // Remove admin rights from the current creator
        room.setPlayerAdmin(creator, false);
        creator = null;
        room.sendAnnouncement("El rol de creador ha sido removido.", null, colors.bot, "bold", 2);
        return false;
    }

    const newCreator = room.getPlayer(newCreatorId);

    if (!newCreator) {
        room.sendAnnouncement("Jugador no encontrado.", player.id, colors.bot, "bold", 2);
        return false;
    }

    // Remove admin rights from the current creator
    room.setPlayerAdmin(creator, false);

    // Set the new creator
    creator = newCreator.id;
    admins.add(newCreator.id);
    room.setPlayerAdmin(newCreator.id, true);

    room.sendAnnouncement(`${newCreator.name} es ahora el creador.`, null, colors.bot, "bold", 2);
    return false;
}

function handleHosterCommand(player, message) {
    // Verificar si el jugador que env√≠a el comando es el creador
    if (player.id !== creator) {
        room.sendAnnouncement("Solo el creador puede usar este comando.", player.id, colors.bot, "bold", 2);
        return;
    }

    // Dividir el mensaje en partes
    const args = message.split(" ");
    if (args.length !== 2) {
        room.sendAnnouncement("Uso incorrecto del comando. Usa !hoster [ID]", player.id, colors.bot, "bold", 2);
        return;
    }

    // Obtener el ID del jugador al que se le asignar√° el rol de hoster
    const targetPlayerId = parseInt(args[1], 10);
    const targetPlayer = room.getPlayer(targetPlayerId);

    if (!targetPlayer) {
        room.sendAnnouncement("Jugador no encontrado.", player.id, colors.bot, "bold", 2);
        return;
    }

    // Asignar el rol de hoster al jugador y darle permisos de administrador
    hosters.add(targetPlayer.id);
    room.setPlayerAdmin(targetPlayer.id, true);
    room.sendAnnouncement(`${targetPlayer.name} ha sido asignado como hoster y ahora tiene permisos de administrador.`, null, colors.bot, "bold", 2);
}

function updatePlayerRoles() {
    room.getPlayerList().forEach(player => {
        let color;

        if (player.id === creator) {
            color = colors.creator;
            room.setPlayerAdmin(player.id, true); // Asegura que el creador siempre tenga permisos de administrador
        } else if (admins.has(player.id)) {
            color = colors.admin;
            room.setPlayerAdmin(player.id, true); // Asegura que los administradores siempre tengan permisos de administrador
        } else if (player.id === dts.red) {
            color = colors.dtRed;
            room.setPlayerAvatar(player.id, "üëî"); // Establecer avatar para DT rojo
            room.setPlayerAdmin(player.id, true); // Asegura que el DT rojo tenga permisos de administrador
        } else if (player.id === dts.blue) {
            color = colors.dtBlue;
            room.setPlayerAvatar(player.id, "üëî"); // Establecer avatar para DT azul
            room.setPlayerAdmin(player.id, true); // Asegura que el DT azul tenga permisos de administrador
        } else if (player.id === captains.red) {
            color = colors.captainRed;
            room.setPlayerAvatar(player.id, "‚ìí"); // Establecer avatar para Capit√°n rojo
            room.sendAnnouncement(`${player.name} es el capit√°n del equipo rojo.`, player.id, colors.captainRed, "bold", 2);
        } else if (player.id === captains.blue) {
            color = colors.captainBlue;
            room.setPlayerAvatar(player.id, "‚ìí"); // Establecer avatar para Capit√°n azul
            room.sendAnnouncement(`${player.name} es el capit√°n del equipo azul.`, player.id, colors.captainBlue, "bold", 2);
        } else if (player.team === 1) {
            color = colors.playerRed;
        } else if (player.team === 2) {
            color = colors.playerBlue;
        } else {
            color = colors.spectator;
        }
    });
}
let ballTouchHistory = [];

function handlePosicionRequestCommand(player, message) {
    if (message === "!asignposicion" && (player.id === creator || admins.has(player.id))) {
        room.sendAnnouncement("Comando !asignposicion recibido. Procesando...", player.id);

        // Obtener la lista de jugadores excluyendo al bot y aquellos que ya tienen una posici√≥n asignada
        const players = room.getPlayerList().filter(p => p.id !== 0 && !playerPositions.has(p.id));
        if (players.length === 0) {
            room.sendAnnouncement("Todos los jugadores ya tienen una posici√≥n asignada.", player.id);
            return;
        }

        pendingPlayers = new Set(players.map(p => p.id)); // Actualizar la variable global pendingPlayers

        // Solicitar la posici√≥n a cada jugador
        players.forEach(p => {
            room.sendAnnouncement(`@${p.name}, por favor ingresa tu posici√≥n:`, p.id);
        });
        room.sendAnnouncement("Esperando posiciones de los jugadores...");

        // Asignar posiciones aleatorias despu√©s de 20 segundos si no responden
        setTimeout(() => {
            pendingPlayers.forEach(id => {
                const p = room.getPlayer(id);
                if (p && !playerPositions.has(p.id) && !authPlayers.has(p.id)) { // Verificar si el jugador no tiene posici√≥n asignada por auth
                    const randomPosicion = POSICIONES[Math.floor(Math.random() * POSICIONES.length)];
                    playerPositions.set(p.id, randomPosicion);
                    room.sendAnnouncement(`No se recibi√≥ respuesta. ${p.name} asignado a ${randomPosicion}.`, p.id);
                }
            });
        }, 10000); // 20 segundos
    } else {
        room.sendAnnouncement("No tienes permiso para usar este comando.16", player.id);
    }
}




function getPlayerNameWithRole(player) {
    let nameWithRole = player.name;
    let position = getPlayerPosition(player); // Obtener la posici√≥n del jugador

    if (player.id === creator) {
        nameWithRole += " (ùòíùòêùòïùòé)";
    } else if (player.id === dts.red || player.id === dts.blue) {
        nameWithRole += " (ùêÉùêì)";
    } else if (admins.has(player.id)) {
        nameWithRole += " (ùôéùôèùòºùôÅùôÅ)";
    } else if (player.id === captains.red) {
        nameWithRole += " (ùòæùòºùôãùôÑùôèùòºùôâ)";
    } else if (player.id === captains.blue) {
        nameWithRole += " (·¥Ñ·¥Ä·¥ò·¥õ·¥Ä…™…¥)";
    } else if (mvps.has(player.id)) {
        nameWithRole += " (ùôàùôëùôã)";
    } else if (vips.has(player.id)) {
        nameWithRole += " (ùôëùôÑùôã)";
    } else if (referees.has(player.id)) {
        nameWithRole += " (ùòºùôßùôóùôûùô©ùôßùô§)";
    } else if (hosters.has(player.id)) {
        nameWithRole += " (ùôÉùô§ùô®ùô©ùôöùôß)";
    }

    // A√±adir la posici√≥n del jugador al nombre
    nameWithRole = `[${position}] ${nameWithRole}`;

    return nameWithRole;
}

function setPlayerPosition(player, posicion) {
    // Guardar la posici√≥n del jugador en el mapa
    playerPositions.set(player.id, posicion);

    // Anunciar la nueva posici√≥n del jugador
    room.sendAnnouncement(`${player.name} ùê°ùêö ùê¨ùê¢ùêùùê® ùêöùê¨ùê¢ùê†ùêßùêöùêùùê® ùêö ùê•ùêö ùê©ùê®ùê¨ùê¢ùêúùê¢√≥ùêß ${posicion}.`, null, colors.bot, "bold", 2);
}

function getPlayerPosition(player) {
    return playerPositions.get(player.id) || "N/A";
}

room.onPlayerBallKick = function(player) {
    lastTouchPlayer = player;
    ballTouchHistory.push(player);

    // Limitar el historial a los √∫ltimos 10 toques
    if (ballTouchHistory.length > 10) {
        ballTouchHistory.shift();
    }

    const team = player.team;
    if (team === 1) {
        matchStats.redPossession++;
    } else if (team === 2) {
        matchStats.bluePossession++;
    }
};
function getGoalScorerMessage(goalScorer, assistant, team, opponentTeam) {
    let teamName = team === 1 ? "ùôçùôÄùòø" : "ùòΩùôáùôêùôÄ";
    let opponentTeamName = opponentTeam === 1 ? "ùôçùôÄùòø" : "ùòΩùôáùôêùôÄ";
    let message = goalMessages[Math.floor(Math.random() * goalMessages.length)];

    // Verificar si goalScorer es nulo
    const goalScorerName = goalScorer ? goalScorer.name : "un random";
    let assistantName = assistant ? assistant.name : "otro random";

    // Si el asistente es del equipo contrario, mostrar el nombre del goleador nuevamente
    if (assistant && assistant.team !== team) {
        assistantName = goalScorerName;
    }

    // Reemplazar todas las ocurrencias de [scorer], [assistant], [team] y [opponentTeam]
    message = message.replace(/\[scorer\]/g, goalScorerName);
    message = message.replace(/\[assistant\]/g, assistantName);
    message = message.replace(/\[team\]/g, teamName);
    message = message.replace(/\[opponentTeam\]/g, opponentTeamName);
    
    return message;
}

function getOwnGoalMessage(goalScorer, team, opponentTeam) {
    let teamName = team === 1 ? "ùôçùôÄùòø" : "ùòΩùôáùôêùôÄ";
    let opponentTeamName = opponentTeam === 1 ? "ùôçùôÄùòø" : "ùòΩùôáùôêùôÄ";
    let message = ownGoalMessages[Math.floor(Math.random() * ownGoalMessages.length)];

    // Reemplazar todas las ocurrencias de [scorer], [team] y [opponentTeam]
    message = message.replace(/\[scorer\]/g, goalScorer.name);
    message = message.replace(/\[team\]/g, teamName);
    message = message.replace(/\[opponentTeam\]/g, opponentTeamName);
    
    return message;
}

function getRandomSpeed() {
    const range1 = Array.from({ length: 9 }, (_, i) => i + 1); // 1-9
    const range2 = Array.from({ length: 10 }, (_, i) => i + 10); // 10-19
    const range3 = Array.from({ length: 31 }, (_, i) => i + 20); // 20-50
    const range4 = Array.from({ length: 51 }, (_, i) => i + 50); // 51-100

    const random = Math.random();
    let selectedRange;

    if (random < 0.05) {
        selectedRange = range1;
    } else if (random < 0.15) {
        selectedRange = range2;
    } else if (random < 0.95) {
        selectedRange = range3;
    } else {
        selectedRange = range4;
    }

    return selectedRange[Math.floor(Math.random() * selectedRange.length)];
}

room.onTeamGoal = function(team) {
    const ballPosition = room.getBallPosition();
    const randomSpeed = getRandomSpeed();
    let goalScorer = ballTouchHistory[ballTouchHistory.length - 1];
    let assistant = ballTouchHistory.length > 1 ? ballTouchHistory[ballTouchHistory.length - 2] : null;
    let message;

    let opponentTeam = team === 1 ? 2 : 1; // Determinar el equipo oponente

    if (goalScorer.team === team) {
        message = getGoalScorerMessage(goalScorer, assistant, team, opponentTeam);
    } else {
        message = getOwnGoalMessage(goalScorer, team, opponentTeam);
        goalScorer = null; // No contar autogoles en la gala de mejores goleadores
        assistant = null; // No contar autogoles en la gala de mejores asistentes
    }

    // Calcular el minuto y segundo del gol
    const gameTime = room.getScores().time;
    const minutes = Math.floor(gameTime / 60);
    const seconds = Math.floor(gameTime % 60);
    message += `\nùôàùôÑùôâùôêùôèùôä ùòøùôÄùôá ùôÇùôäùôá: ${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
    room.sendAnnouncement(message, null, colors.bot, "bold", 2);

    // A√±adir el mensaje de la velocidad del bal√≥n
    room.sendAnnouncement(`ùôëùôÄùôáùôäùòæùôÑùòøùòºùòø ùòøùôÄùôá ùôÇùôäùôá‚ö°: ${randomSpeed} ùô†ùô¢/ùôù`, null, 0xFFFFFF, "bold", 2);

    // Registrar el gol en el mapa de goleadores
    if (goalScorer) {
        if (goalScorers.has(goalScorer.name)) {
            goalScorers.set(goalScorer.name, goalScorers.get(goalScorer.name) + 1);
        } else {
            goalScorers.set(goalScorer.name, 1);
        }
    }

    // Registrar la asistencia en el mapa de asistentes
    if (assistant) {
        if (assistants.has(assistant.name)) {
            assistants.set(assistant.name, assistants.get(assistant.name) + 1);
        } else {
            assistants.set(assistant.name, 1);
        }
    }

    if (penalesActivo) {
        const equipo = team === 1 ? "red" : "blue";
        manejarGol(equipo);
        setTimeout(cambiarMapa, 5000); // Esperar 5 segundos antes de cambiar de mapa
    }

    if (isIda) {
        if (team === 1) {
            matchStats.ida.redScore++;
        } else {
            matchStats.ida.blueScore++;
        }
    } else {
        if (team === 1) {
            matchStats.vuelta.redScore++;
        } else {
            matchStats.vuelta.blueScore++;
        }
    }

    const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
    const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;
    room.sendAnnouncement(`ùôÇùô°ùô§ùôóùôñùô°: ùôçùôÄùòø ${globalRedScore} - ${globalBlueScore} ùòΩùôáùôêùôÄ`, null, colors.bot, "bold", 2);

    // Cambiar avatares temporalmente
    cambiarAvataresTemporalmente(goalScorer, assistant, team, opponentTeam);

    // Mute players who are not the creator
    mutePlayersAfterGoal();

};

function cambiarAvataresTemporalmente(goalScorer, assistant, team, opponentTeam) {
    const DURACION_TOTAL = 5000; 
    const INTERVALO_CAMBIO = 1000;
    let ciclos = 0;
    const maxCiclos = DURACION_TOTAL / INTERVALO_CAMBIO;

    // Almacenar avatares originales y estados
    const avataresOriginales = new Map();
    const estadosAvatares = new Map();

    // Listas de emojis para goalScorer y assistant
    const goalScorerEmojis = ["‚öΩÔ∏è", "…¢…¢", "9Ô∏è‚É£", "ü§å"];
    const assistantEmojis = ["üÖ∞Ô∏è", "üóø", "üîü", "üëå"];

    // Configurar avatares iniciales
    const configurarAvatar = (player, avatarEspecial) => {
        if (!player) return;
        avataresOriginales.set(player.id, player.avatar);
        estadosAvatares.set(player.id, {
            original: player.avatar,
            especial: avatarEspecial,
            mostrarEspecial: true
        });
        room.setPlayerAvatar(player.id, avatarEspecial);
    };

    // Aplicar a todos los jugadores relevantes
    if (goalScorer) configurarAvatar(goalScorer, goalScorerEmojis[0]);
    if (assistant) configurarAvatar(assistant, assistantEmojis[0]);
    
    // DT rival
    const dtRival = team === 1 ? room.getPlayer(dts.blue) : room.getPlayer(dts.red);
    if (dtRival) configurarAvatar(dtRival, "ü§¨");

    const avatars = ["‚ò†Ô∏è", "üí©", "üòì", "‚ùì", "üíÄ", "üò§", "üòê", "üò¨", "üòµ‚Äçüí´", "-5", "-1"];
    room.getPlayerList().forEach(player => {
        if (player.team === opponentTeam && player.id !== (dtRival?.id || null)) {
            const randomAvatar = avatars[Math.floor(Math.random() * avatars.length)];
            configurarAvatar(player, randomAvatar);
        }
    });

    // Intervalo para el efecto de parpadeo
    const intervalo = setInterval(() => {
        ciclos++;
        
        estadosAvatares.forEach((estado, id) => {
            const player = room.getPlayer(id);
            if (!player) return;

            let nuevoAvatar;
            if (id === goalScorer?.id) {
                nuevoAvatar = goalScorerEmojis[ciclos % goalScorerEmojis.length];
            } else if (id === assistant?.id) {
                nuevoAvatar = assistantEmojis[ciclos % assistantEmojis.length];
            } else {
                nuevoAvatar = estado.mostrarEspecial ? estado.original : estado.especial;
            }

            room.setPlayerAvatar(id, nuevoAvatar);
            estadosAvatares.set(id, {
                ...estado,
                mostrarEspecial: !estado.mostrarEspecial
            });
        });

        // Finalizar despu√©s de 2 segundos
        if (ciclos >= maxCiclos) {
            clearInterval(intervalo);
            avataresOriginales.forEach((avatar, id) => {
                const player = room.getPlayer(id);
                if (player) room.setPlayerAvatar(id, avatar);
            });
        }
    }, INTERVALO_CAMBIO);
}

function manejarGol(equipo) {
    if (penalesActivo) {
        penalesMarcador[equipo]++;
        // Desactivar el mensaje despu√©s de cada gol
        // room.sendAnnouncement(`Gol de ${equipo}. Marcador: ${penalesMarcador.red} - ${penalesMarcador.blue}`, null, colors.bot, "bold", 2);
    }
}

function determinarCampeonPenales() {
    if (penalesMarcador.red > penalesMarcador.blue) {
        room.sendAnnouncement("¬°El equipo Rojo es el campe√≥n de los penales!", null, colors.bot, "bold", 2);
    } else if (penalesMarcador.blue > penalesMarcador.red) {
        room.sendAnnouncement("¬°El equipo Azul es el campe√≥n de los penales!", null, colors.bot, "bold", 2);
    } else {
        room.sendAnnouncement("¬°Los penales han terminado en empate!", null, colors.bot, "bold", 2);
    }
    penalesActivo = false;
    penalesMarcador = { red: 0, blue: 0 };
}

function mutePlayersAfterGoal() {
    room.getPlayerList().forEach(player => {
        if (player.id !== creator && !mutedPlayers.has(player.id)) {
            mutedPlayers.set(player.id, Date.now() + 5000); // Muteo general de 5 segundos
        }
    });
    setTimeout(unmutePlayers, 5000); // Desmute players after 5 seconds
}

room.onGameTick = function() {
    if (matchStarted) {
        const ballPosition = room.getBallPosition();
        if (ballPosition.x < 0) {
            matchStats.ballInRedArea++;
        } else {
            matchStats.ballInBlueArea++;
        }
        matchStats.totalGameTime++;
    }
};

function showFinalResult() {
    const globalRedScore = matchStats.ida.redScore + matchStats.vuelta.redScore;
    const globalBlueScore = matchStats.ida.blueScore + matchStats.vuelta.blueScore;

    // Mostrar el resultado del partido (if)
    let resultadoPartido;
    if (globalRedScore > globalBlueScore) {
        resultadoPartido = "¬°ùêÖùêûùê•ùê¢ùêúùê¢ùêùùêöùêùùêûùê¨ ùêöùê• ùêûùê™ùêÆùê¢ùê©ùê® ùêëùê®ùê£ùê®, \nùêùùê®ùê¶ùêöùê´ùê®ùêß ùêöùê• ùêöùê≥ùêÆùê• ùêúùê®ùê¶ùê® ùê¨ùê¢ùêûùê¶ùê©ùê´ùêû! üèÜüéâ  \n ùêáùê®ùê≤ ùêùùêûùê¶ùê®ùê¨ùê≠ùê´ùêöùê´ùê®ùêß ùê™ùêÆùêû ùêßùê® ùê°ùêöùê≤ ùê™ùêÆùê¢ùêûùêß ùê•ùêûùê¨ ùê°ùêöùê†ùêö ùê¨ùê®ùê¶ùêõùê´ùêö ùêûùêß ùêûùê• ùêúùêöùê¶ùê©ùê®. \nüí•‚öΩ ùêÑùê• ùêöùê≥ùêÆùê•, ùê©ùê®ùê´ ùê¶√°ùê¨ ùê™ùêÆùêû ùê•ùê® ùê¢ùêßùê≠ùêûùêßùê≠√≥, ùêßùê® ùê©ùêÆùêùùê® ùêúùê®ùêßùê≠ùê´ùêö ùêûùê• ùêüùêÆùêûùê†ùê® ùêùùêûùê• ùêëùê®ùê£ùê®. üî•üî• \n ¬°ùêïùê¢ùêúùê≠ùê®ùê´ùê¢ùêö ùêúùê®ùêßùê≠ùêÆùêßùêùùêûùêßùê≠ùêû, ùêö ùê¨ùêûùê†ùêÆùê¢ùê´ ùê¨ùêÆùê¶ùêöùêßùêùùê®! üôå";
    } else if (globalRedScore < globalBlueScore) {
        resultadoPartido = "¬°ùòçùò¶ùò≠ùò™ùò§ùò™ùò•ùò¢ùò•ùò¶ùò¥ ùò¢ùò≠ ùò¶ùò≤ùò∂ùò™ùò±ùò∞ ùòàùòªùò∂ùò≠, \nùò≠ùò∞ùò¥ ùò≥ùò∞ùò´ùò∞ùò¥ ùò¢ùò£ùò¢ùòØùò•ùò∞ùòØùò¢ùò≥ùò∞ùòØ ùò§ùò∞ùòÆùò∞ ùò¥ùò™ùò¶ùòÆùò±ùò≥ùò¶! üèÜüéâ ùòèùò∞ùò∫ ùò¥ùò¶ ùò•ùò¶ùòÆùò∞ùò¥ùòµùò≥√≥ ùò≤ùò∂ùò¶ ùò¶ùò≠ ùò¢ùòªùò∂ùò≠ ùòµùò™ùò¶ùòØùò¶ ùò≠ùò∞ ùòØùò¶ùò§ùò¶ùò¥ùò¢ùò≥ùò™ùò∞ ùò±ùò¢ùò≥ùò¢ ùòÆùò¢ùòØùòµùò¶ùòØùò¶ùò≥ùò¥ùò¶ ùòßùò™ùò≥ùòÆùò¶, \nùòÆùò™ùò¶ùòØùòµùò≥ùò¢ùò¥ ùò≠ùò∞ùò¥ ùò≥ùò∞ùò´ùò∞ùò¥ ùò¥ùò¶ ùò•ùò¶ùò¥ùò™ùòØùòßùò≠ùò¢ùò≥ùò∞ùòØ ùò≥√°ùò±ùò™ùò•ùò¢ùòÆùò¶ùòØùòµùò¶. üí•‚öΩ ¬°ùòéùò≥ùò¢ùòØ ùò∑ùò™ùò§ùòµùò∞ùò≥ùò™ùò¢ ùò±ùò¢ùò≥ùò¢ ùò¶ùò≠ ùò¶ùò≤ùò∂ùò™ùò±ùò∞ ùòàùòªùò∂ùò≠, ùò≤ùò∂ùò¶ ùò¥ùò™ùò®ùò¢ ùò≠ùò¢ ùòßùò™ùò¶ùò¥ùòµùò¢! üôåüíô";
    } else {
        resultadoPartido = "¬°ùêÑùê¨ ùêÆùêß ùêûùê¶ùê©ùêöùê≠ùêû ü§ù,\n ùêïùêÄùêåùêéùêí ùêÄ ùêèùêÑùêçùêÄùêãùêÑùêí! ‚öΩü•Ö \nùêèùê´ùêûùê©ùêöùê´ùêûùêß ùêûùê¨ùê®ùê¨ ùêúùêÆùê•ùê®ùê¨, ùê™ùêÆùêû ùê¨ùêû ùêØùê¢ùêûùêßùêûùêß ùê•ùê®ùê¨ ùêúùê•ùê¢ùê©ùê¨. üé•üî• ùêÑùê¨ùê≠ùê® ùê¨ùêû ùê©ùê®ùêßùêû ùê¶√°ùê¨ ùêúùêöùê•ùê¢ùêûùêßùê≠ùêû ùê™ùêÆùêû ùêßùêÆùêßùêúùêö, ¬°ùêßùê® ùê°ùêöùê≤ ùê¶ùêöùê´ùêúùê°ùêö ùêöùê≠ùê´√°ùê¨! üò§üí•";
    }

    // Mostrar el resultado del partido
    room.sendAnnouncement(resultadoPartido, null, colors.botGold, "bold", 2);

    // Esperar 2 segundos antes de mostrar los goleadores y asistentes
    setTimeout(() => {
        // Obtener los dos jugadores con m√°s goles
        const topScorers = Array.from(goalScorers.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 2);

        // Obtener los dos jugadores con m√°s asistencias
        const topAssistants = Array.from(assistants.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 2);

        let message = "ùôÇùòºùôáùòº\n\n";

        message += "ùôÇùôäùôáùôÄùòºùòøùôäùôçùôÄùôé\n";
        topScorers.forEach(([player, goals]) => {
            message += `${player}: ${goals} ùôúùô§ùô°ùôöùô®\n`;
        });

        message += "\nùòºùôéùôÑùôéùôèùôÄùôâùôèùôÄùôé\n";
        topAssistants.forEach(([player, assists]) => {
            message += `${player}: ${assists} ùôñùô®ùôûùô®ùô©ùôöùô£ùôòùôûùôñùô®\n`;
        });

        // Mostrar los goleadores y asistentes
        room.sendAnnouncement(message, null, colors.bot, "bold", 2);

        // Esperar otros 2 segundos antes de mostrar las estad√≠sticas del partido
        setTimeout(() => {
            const totalGameTime = matchStats.totalGameTime;
            const redAreaPercentage = ((matchStats.ballInRedArea / totalGameTime) * 100).toFixed(2);
            const blueAreaPercentage = ((matchStats.ballInBlueArea / totalGameTime) * 100).toFixed(2);
            const redPossessionPercentage = ((matchStats.redPossession / (matchStats.redPossession + matchStats.bluePossession)) * 100).toFixed(2);
            const bluePossessionPercentage = ((matchStats.bluePossession / (matchStats.redPossession + matchStats.bluePossession)) * 100).toFixed(2);

            let estadisticasPartido = `ùôçùôöùô®ùô™ùô°ùô©ùôñùôôùô§ ùôÅùôûùô£ùôñùô°:\nùôçùôÄùòø ${globalRedScore} - ${globalBlueScore} ùòΩùôáùôêùôÄ\n`;
            estadisticasPartido += `√Åùôßùôöùôñùô® ùôôùôö ùôüùô™ùôöùôúùô§: \nùôçùôÄùòø ${redAreaPercentage}% - ùòΩùôáùôêùôÄ ${blueAreaPercentage}%\n`;
            estadisticasPartido += `ùôãùô§ùô®ùôöùô®ùôû√≥ùô£ ùôôùôö ùôóùôñùô°√≥ùô£: \nùôçùôÄùòø ${redPossessionPercentage}% - ùòΩùôáùôêùôÄ ${bluePossessionPercentage}%\n`;

            // Mostrar las estad√≠sticas del partido
            room.sendAnnouncement(estadisticasPartido, null, colors.botGold, "bold", 2);
        }, 2000); // 2 segundos despu√©s de los goleadores y asistentes
    }, 2000); // 2 segundos despu√©s del resultado del partido
}

room.onGameStop = function() {
    matchStarted = false;
    startTimedMatch = false;
    setTimeout(() => {
        const topScorers = Array.from(goalScorers.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 2);

    // Obtener los dos jugadores con m√°s asistencias
    const topAssistants = Array.from(assistants.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 2);

    let message = "ùôÇùòºùôáùòº\n\n";

    message += "ùôÇùôäùôáùôÄùòºùòøùôäùôçùôÄùôé\n";
    topScorers.forEach(([player, goals]) => {
        message += `${player}: ${goals} ùôúùô§ùô°ùôöùô®\n`;
    });

    message += "\nùòºùôéùôÑùôéùôèùôÄùôâùôèùôÄùôé\n";
    topAssistants.forEach(([player, assists]) => {
        message += `${player}: ${assists} ùôñùô®ùôûùô®ùô©ùôöùô£ùôòùôûùôñùô®\n`;
    });
    room.sendAnnouncement(message, null, colors.bot, "bold", 2);

        // Limpiar los mapas de goleadores y asistentes para el pr√≥ximo partido
        goalScorers.clear();
        assistants.clear();
    }, 5000); // 4 segundos de retraso
    
    if (matchStarted) {
        matchStarted = false;
        const totalGameTime = matchStats.totalGameTime;
        const redAreaPercentage = ((matchStats.ballInRedArea / totalGameTime) * 100).toFixed(2);
        const blueAreaPercentage = ((matchStats.ballInBlueArea / totalGameTime) * 100).toFixed(2);
        const redPossessionPercentage = ((matchStats.redPossession / (matchStats.redPossession + matchStats.bluePossession)) * 100).toFixed(2);
        const bluePossessionPercentage = ((matchStats.bluePossession / (matchStats.redPossession + matchStats.bluePossession)) * 100).toFixed(2);

        room.sendAnnouncement(`√Åùôßùôöùôñùô® ùôôùôö ùôüùô™ùôöùôúùô§: ùôçùôÄùòø ${redAreaPercentage}% - ùòΩùôáùôêùôÄ ${blueAreaPercentage}%`, null, colors.botGold, "bold", 2);
        room.sendAnnouncement(`ùôãùô§ùô®ùôöùô®ùôû√≥ùô£ ùôôùôö ùôóùôñùô°√≥ùô£: ùôçùôÄùòø ${redPossessionPercentage}% - ùòΩùôáùôêùôÄ ${bluePossessionPercentage}%`, null, colors.botGold, "bold", 2);

        if (!isIda) {
            showFinalResult(); // Mostrar el resultado final despu√©s del segundo partido (vuelta)
        }
    }

    
}

function balanceTeams() {
    const players = room.getPlayerList();
    let redCount = 0;
    let blueCount = 0;

    // Count the number of players in each team, excluding AFK players
    players.forEach(player => {
        if (afkPlayers.has(player.id)) return; // Skip AFK players
        if (player.team === 1) {
            redCount++;
        } else if (player.team === 2) {
            blueCount++;
        }
    });

    // Move players from spectators to the team with fewer players, excluding AFK players
    players.forEach(player => {
        if (afkPlayers.has(player.id)) return; // Skip AFK players
        if (player.team === 0) {
            if (redCount < blueCount) {
                room.setPlayerTeam(player.id, 1);
                redCount++;
            } else if (blueCount < redCount) {
                room.setPlayerTeam(player.id, 2);
                blueCount++;
            } else {
                room.setPlayerTeam(player.id, 1);
                redCount++;
            }
        }
    });
}

function autoBalanceTeams() {
    if (autoBalanceEnabled) {
        balanceTeams();
    }
}

function setTeamsLock() {
    room.setTeamsLock(true);
}



setTeamsLock();



// Funci√≥n para iniciar la tanda de penales
function iniciarPenales(modo, equipo) {
    penalesActivo = true;
    penalesModo = modo;
    penalesTurno = equipo;
    penalesMarcador = { red: 0, blue: 0 };
    room.sendAnnouncement(`Tanda de penales iniciada. Modo: ${modo}. Turno: ${equipo}.`, null, colors.bot, "bold", 2);
}

// Funci√≥n para finalizar la tanda de penales
function finalizarPenales() {
    penalesActivo = false;
    penalesModo = null;
    penalesTurno = null;
    room.sendAnnouncement(`Tanda de penales finalizada. Resultado: Red ${penalesMarcador.red} - ${penalesMarcador.blue} Blue.`, null, colors.bot, "bold", 2);
}

// Funci√≥n para manejar los goles durante la tanda de penales
function manejarGol(equipo) {
    if (penalesActivo) {
        if (penalesTurno === equipo) {
            penalesMarcador[equipo]++;
            room.sendAnnouncement(`Gol de ${equipo}. Tanda de penales: Red ${penalesMarcador.red} - ${penalesMarcador.blue} Blue.`, null, colors.bot, "bold", 2);
        } else {
            room.sendAnnouncement(`lo que se erro este hijo de puta.`, null, colors.bot, "bold", 2);
        }
    }
}

function handleIncognitoCommand(player, message) {
    const currentTime = Date.now();
    const lastTime = lastIncognitoTime.get(player.id) || 0;
    if (currentTime - lastTime < 60000) { // 1 minuto de cooldown
        room.sendAnnouncement("Debes esperar un minuto antes de usar el comando !incognito nuevamente.", player.id, colors.bot, "bold", 2);
        return;
    }
    lastIncognitoTime.set(player.id, currentTime);
    const args = message.split(" ");
    if (args.length < 2) {
        room.sendAnnouncement("Uso incorrecto del comando. Usa !incognito [mensaje].", player.id, colors.bot, "bold", 2);
        return;
    }
    const incognitoMessage = args.slice(1).join(" ");
    room.sendAnnouncement(`ùôÑùôâùòæùôäùôÇùôâùôÑùôèùôäüëª: ${incognitoMessage}`, null, colors.bot, "bold", 2);
}

function handleWhisperCommand(player, message) {
    const args = message.split(" ");
    if (args.length < 3) {
        room.sendAnnouncement("Uso incorrecto. Usa !whisper [ID] [mensaje].", player.id, colors.bot, "bold", 2);
        return;
    }

    const targetId = parseInt(args[1], 10);
    const targetPlayer = room.getPlayer(targetId);
    if (!targetPlayer) {
        room.sendAnnouncement("Jugador no encontrado.", player.id, colors.bot, "bold", 2);
        return;
    }

    const whisperMessage = args.slice(2).join(" ");
    const teamColor = player.team === 1 ? colors.dtRed : colors.dtBlue;
    const messageToSend = `‚òÖÂΩ°[·¥Ö·¥ç ${player.name}]ÂΩ°‚òÖ: ${whisperMessage}`;

    // Enviar el mensaje al jugador objetivo
    room.sendAnnouncement(messageToSend, targetPlayer.id, teamColor, "bold", 2);
    // Enviar el mensaje al jugador que lo envi√≥
    room.sendAnnouncement(messageToSend, player.id, teamColor, "bold", 2);
}

function iniciarVotacionEmpate() {
    if (votacionActiva) return; // Evitar iniciar m√∫ltiples votaciones

    votacionActiva = true;
    votosTiempoExtra.clear();
    votosPenales.clear();
    votosEmitidos.clear();

    room.sendAnnouncement("üî•‚öΩ ¬°ùôÄùôàùôãùòºùôèùôÄ ùôÇùôáùôäùòΩùòºùôá! üïí‚ö° \nùôéùôÄ ùôÄùôáùôÄùôÇùôÑùôçùôÑùòº ùôãùôäùôç ùôëùôäùôèùòºùòæùôÑ√ìùôâ ùôéùôÑ ùôÖùôêùôÇùòºùôàùôäùôé ùôèùôÑùôÄùôàùôãùôä ùôÄùôìùôèùôçùòº üïêüî• ùôä ùôÑùôç ùòøùôÑùôçùôÄùòæùôèùôä ùòº ùôáùôäùôé ùôãùôÄùôâùòºùôáùôÄùôé üéØüí•", null, colors.bot, "bold", 2);
    room.sendAnnouncement("ùôÄùôéùòæùôçùôÑùòΩùôÄ '1' üïí‚ö° ùôãùòºùôçùòº ùôëùôäùôèùòºùôç ùôãùôäùôç ùôèùôÑùôÄùôàùôãùôä ùôÄùôìùôèùôçùòº üòèüî•  \n ùôÄùôéùòæùôçùôÑùòΩùôÄ '2' üéØüí• ùôãùòºùôçùòº ùôëùôäùôèùòºùôç ùôãùôäùôç ùôãùôÄùôâùòºùôáùôÄùôéüî•.", null, colors.botGold, "bold", 2);
    room.sendAnnouncement("ùôáùòº ùôëùôäùôèùòºùòæùôÑùôäùôâ ùòøùôêùôçùòºùôçùòº 20 ùôéùôÄùôÇùôêùôâùòøùôäùôé. ‚è≥", null, colors.bot, "bold", 2);

    // Configurar un temporizador para finalizar la votaci√≥n despu√©s de 20 segundos
    setTimeout(finalizarVotacion, 20000);
}

function finalizarVotacion() {
    if (!votacionActiva) return;

    votacionActiva = false;

    const totalVotosTiempoExtra = votosTiempoExtra.size;
    const totalVotosPenales = votosPenales.size;

    let mensajeResultado;

    if (totalVotosTiempoExtra > totalVotosPenales) {
        mensajeResultado = "¬°Tiempo extra activado! ‚è≥‚öΩ \n ¬øQuieren m√°s emoci√≥n? ¬øM√°s tensi√≥n? Pues aqu√≠ lo tienen.\n Ahora a ver qui√©n aguanta hasta el final üò§";
        // Aqu√≠ puedes agregar la l√≥gica para iniciar el tiempo extra
    } else if (totalVotosPenales > totalVotosTiempoExtra) {
        mensajeResultado = "¬°Se vienen los penales! ü•Ö‚öΩ \n Ahora es cuando necesitamos que el arquero entre en modo ARMANI,NEUR,BUFFON,CHIPI CHIPI Y DIBU AL MISMO TIEMPO, \n o nos toca rezar para que los rivales sean peores que nosotros üò≠";
        // Aqu√≠ puedes agregar la l√≥gica para iniciar los penales
    } else {
        mensajeResultado = "Votaci√≥n empatada! üò± \n De un lado, los que creen en la remontada en tiempo extra ‚è≥üî•. Del otro, los que conf√≠an en su arquero üß§üí•\n En el medio, los que no pueden ni mirar üëÄüíÄ. \n ¬°Esto se va a poner feo! üò¨‚öΩüî•";
        // Iniciar la decisi√≥n del creador
        iniciarDecisionCreador();
    }

    room.sendAnnouncement(mensajeResultado, null, colors.botGold, "bold", 2);
}

function iniciarDecisionCreador() {
    room.sendAnnouncement("¬°Empate en la votaci√≥n! El creador o host debe decidir entre tiempo extra o penales.", null, colors.bot, "bold", 2);
    room.sendAnnouncement("Creador, escribe '1' para tiempo extra o '2' para penales.", creator, colors.bot, "bold", 2);

    // Guardar la funci√≥n original de onPlayerChat para restaurarla despu√©s
    const originalOnPlayerChat = room.onPlayerChat;

    // Sobrescribir onPlayerChat para capturar la decisi√≥n del creador
    room.onPlayerChat = function(player, message) {
        if (player.id === creator && (message === "1" || message === "2")) {
            if (message === "1") {
                room.sendAnnouncement("El creador ha decidido: ¬°Tiempo extra! ‚è≥‚öΩ", null, colors.bot, "bold", 2);
                // Aqu√≠ puedes agregar la l√≥gica para iniciar el tiempo extra
            } else if (message === "2") {
                room.sendAnnouncement("El creador ha decidido: ¬°Penales! ü•Ö‚öΩ", null, colors.bot, "bold", 2);
                // Aqu√≠ puedes agregar la l√≥gica para iniciar los penales
            }

            // Restaurar la funci√≥n original de onPlayerChat
            room.onPlayerChat = originalOnPlayerChat;
            return false;
        }

        // Si no es el creador, continuar con el comportamiento normal
        return originalOnPlayerChat(player, message);
    };
}

function iniciarVotacionRepick() {
    if (votacionRepickActiva) return; // Evitar iniciar m√∫ltiples votaciones

    votacionRepickActiva = true;
    votosRepick.clear();
    votosNoRepick.clear();
    votosEmitidosRepick.clear();

    room.sendAnnouncement("üîÑ ¬°Votaci√≥n para repick iniciada! üîÑ", null, colors.bot, "bold", 2);
    room.sendAnnouncement("Escribe '1' para votar por repick. Escribe '2' para votar en contra del repick.", null, colors.botGold, "bold", 2);
    room.sendAnnouncement("La votaci√≥n durar√° 20 segundos. ‚è≥", null, colors.bot, "bold", 2);

    // Configurar un temporizador para finalizar la votaci√≥n despu√©s de 20 segundos
    setTimeout(finalizarVotacionRepick, 20000);
}

function finalizarVotacionRepick() {
    if (!votacionRepickActiva) return;

    votacionRepickActiva = false;

    const totalVotosRepick = votosRepick.size;
    const totalVotosNoRepick = votosNoRepick.size;

    let mensajeResultado;

    if (totalVotosRepick > totalVotosNoRepick) {
        mensajeResultado = "¬°Repick activado! üîÑ";
        repickTeams(); // L√≥gica para hacer el repick
    } else {
        mensajeResultado = "Repick cancelado. ‚ùå";
    }

    room.sendAnnouncement(mensajeResultado, null, colors.botGold, "bold", 2);
}

function iniciarVotacionMVP() {
    if (votacionMVPActiva) {
        room.sendAnnouncement("Ya hay una votaci√≥n de MVP en curso.", null, colors.mvp, "bold", 2);
        return;
    }

    votacionMVPActiva = true;
    votosMVP.clear();
    votosEmitidosMVP.clear();

    let players = room.getPlayerList().filter(player => player.id !== 0);
    let message = "üèÜ ¬°ùôëùô§ùô©ùôñùôòùôû√≥ùô£ ùôôùôö ùôàùôëùôã ùôûùô£ùôûùôòùôûùôñùôôùôñ! üèÜ\nùôÄùô®ùôòùôßùôûùôóùôö ùôöùô° ùôÑùòø ùôôùôöùô° ùôüùô™ùôúùôñùôôùô§ùôß ùô¶ùô™ùôö ùôòùôßùôöùôöùô® ùô¶ùô™ùôö ùô¢ùôöùôßùôöùôòùôö ùôöùô° ùôàùôëùôã. üî•‚öΩ\n¬°ùôèùô™ ùô´ùô§ùô©ùô§ ùôòùô™ùôöùô£ùô©ùôñ!\n";
    players.forEach(player => {
        message += `${player.id} - ${player.name}\n`;
    });

    room.sendAnnouncement(message, null, colors.mvp, "bold", 2);

    setTimeout(finalizarVotacionMVP, 60000); // 1 minuto para votar
}

function finalizarVotacionMVP() {
    votacionMVPActiva = false;

    if (votosMVP.size === 0) {
        room.sendAnnouncement("No se recibieron votos para MVP.", null, colors.bot, "bold", 2);
        return;
    }

    let maxVotos = 0;
    let mvpPlayer = null;

    votosMVP.forEach((votos, playerId) => {
        if (votos > maxVotos) {
            maxVotos = votos;
            mvpPlayer = room.getPlayer(playerId);
        }
    });

    if (mvpPlayer) {
        assignMVP(mvpPlayer);
    } else {
        room.sendAnnouncement("No se pudo determinar el MVP.", null, colors.bot, "bold", 2);
    }
}

function resetMVP() {
    mvps.forEach(playerId => {
        const player = room.getPlayer(playerId);
        if (player) {
            removeMVP(player);
        }
    });
    mvps.clear();
    room.sendAnnouncement("Todos los roles de MVP han sido reseteados.", null, colors.bot, "bold", 2);
}

function verificarYRestaurarAvataresCapitanes() {
    room.getPlayerList().forEach(player => {
        if (player.id === captains.red && player.avatar !== "‚ìí") {
            room.setPlayerAvatar(player.id, "‚ìí"); // Restaurar avatar de Capit√°n rojo
        } else if (player.id === captains.blue && player.avatar !== "‚ìí") {
            room.setPlayerAvatar(player.id, "‚ìí"); // Restaurar avatar de Capit√°n azul
        }
    });
}

// Ejecutar la funci√≥n cada 15 segundos
setInterval(verificarYRestaurarAvataresCapitanes, 15000);

function verificarYRestaurarAvataresDT() {
    room.getPlayerList().forEach(player => {
        if (player.id === dts.red && player.avatar !== "üëî") {
            room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT rojo
        } else if (player.id === dts.blue && player.avatar !== "üëî") {
            room.setPlayerAvatar(player.id, "üëî"); // Restaurar avatar de DT azul
        }
    });
}

// Ejecutar la funci√≥n cada 15 segundos
setInterval(verificarYRestaurarAvataresDT, 15000);

function verificarYRestaurarAvataresMVP() {
    room.getPlayerList().forEach(player => {
        if (mvps.has(player.id) && player.avatar !== MVP_AVATAR) {
            room.setPlayerAvatar(player.id, MVP_AVATAR); // Restaurar avatar de MVP
        }
    });
}

// Ejecutar la funci√≥n cada 15 segundos
setInterval(verificarYRestaurarAvataresMVP, 15000);

// Funci√≥n para cambiar de mapa
function cambiarMapa() {
    if (penalesTurno === "red") {
        room.setCustomStadium(mapaBlue);
        penalesTurno = "blue";
    } else {
        room.setCustomStadium(mapaRed);
        penalesTurno = "red";
    }
    room.sendAnnouncement(`Cambio de mapa. Turno de ${penalesTurno}.`, null, colors.bot, "bold", 2);
}

const messageTimes = new Map(); // Mapa para almacenar los tiempos de los mensajes de cada usuario
let spammerDetectionEnabled = false; // Flag para habilitar/deshabilitar la detecci√≥n de spam

function onMessage(userId, message) {
    if (message === "!spammer") {
        spammerDetectionEnabled = !spammerDetectionEnabled;
        room.sendAnnouncement(`Spammer detection ${spammerDetectionEnabled ? 'enabled' : 'disabled'}.`);
        return;
    }

    if (!spammerDetectionEnabled) return;

    const now = Date.now();
    if (!messageTimes.has(userId)) {
        messageTimes.set(userId, []);
    }

    const times = messageTimes.get(userId);
    times.push(now);

    // Filtrar mensajes que est√°n fuera del per√≠odo de 15 segundos
    const recentTimes = times.filter(time => now - time <= 15000);
    messageTimes.set(userId, recentTimes);

    // Verificar si hay 3 mensajes en menos de 2 segundos
    if (recentTimes.length >= 3) {
        const [first, second, third] = recentTimes.slice(-3);
        if (third - first <= 2000) {
            kickUser(player.id, "spammer");
            messageTimes.delete(player.id); // Limpiar el registro de mensajes del usuario expulsado
        }
    }

    // Limpiar el registro de mensajes despu√©s de 15 segundos
    setTimeout(() => {
        messageTimes.delete(userId);
    }, 15000);
}

function kickUser(userId, reason) {
    console.log(`User ${userId} has been kicked for ${reason}`);
    // Aqu√≠ ir√≠a el c√≥digo para expulsar al usuario de la plataforma
}

room.onGameStart = function() {
    matchStarted = true;
    startTimedMatch = true;
    if (lockdownMode) {
        room.stopGame();
        room.sendAnnouncement("‚ö†Ô∏è ùòºùôáùôÄùôçùôèùòº: ùôÄùô° ùô®ùôöùôßùô´ùôöùôß ùôöùô®ùô©√° ùôòùô§ùô¢ùô•ùôßùô§ùô¢ùôöùô©ùôûùôôùô§. ùôöùô®ùô©ùôñùô£ ùô®ùôñùôòùôñùô£ùôôùô§ ùô©ùô™ ùôûùô• , ùôôùôöùô®ùôòùô§ùô£√©ùôòùô©ùôñùô©ùôö ùôîùòº.", null, colors.botGold, "bold", 2);
        return;
    }

    setTeamUniforms(true);

    // Anunciar a todos los jugadores sobre el comando "tt"
    room.sendAnnouncement("¬°ùôîùôñ ùôöùô®ùô©ùôñùô¢ùô§ùô® ùôüùô™ùôúùôñùô£ùôôùô§! (ùô©ùô©) ùôéùôû ùô©ùôûùôöùô£ùôöùô® ùôñùô°ùôúùô§ ùôûùô¢ùô•ùô§ùôßùô©ùôñùô£ùô©ùôö ùô¶ùô™ùôö ùôôùôöùôòùôûùôßùô°ùôö ùôñ ùô©ùô™ ùôöùô¶ùô™ùôûùô•ùô§ ùôÆ ùô£ùô§ ùô¶ùô™ùôûùôöùôßùôöùô® ùô¶ùô™ùôö ùô©ùô§ùôôùô§ùô® ùô°ùô§ ùô®ùôöùô•ùôñùô£, ùô™ùô®ùôñ 'ùô©ùô©' ùôñùô° ùôûùô£ùôûùôòùôûùô§ ùôôùôö ùô©ùô™ ùô¢ùôöùô£ùô®ùôñùôüùôö ùô•ùôñùôßùôñ ùô¢ùôñùô£ùô©ùôöùô£ùôöùôß ùô°ùôñùô® ùô©ùôñùôòùô©ùôûùôòùôñùô® ùôöùô£ùô©ùôßùôö ùôöùô° ùôöùô¶ùô™ùôûùô•ùô§. üòúüî•", null, 0x00FF00, "bold", 2);
};
room.setScoreLimit(0);
room.setTimeLimit(10);

function limpiarChat() {
    for (let i = 0; i < 10; i++) {
        room.sendAnnouncement(" ", null, 0xFFFFFF, "normal", 0);
    }
    room.sendAnnouncement("¬°ùêÑùê• ùêúùê°ùêöùê≠ ùê°ùêö ùê¨ùê¢ùêùùê® ùê•ùê¢ùê¶ùê©ùê¢ùêöùêùùê®! ¬°ùêÉùêûùê£ùêûùêß ùêûùê• ùê¶ùêöùê•ùê©ùêöùê´ùê¢ùêùùê® ùê¨ùê©ùêöùê¶ ùêùùêû ùêÆùêßùêö ùêØùêûùê≥! ùêíùê¢ ùêßùê® ùê≠ùê¢ùêûùêßùêûùêß ùêßùêöùêùùêö ùê™ùêÆùêû ùêùùêûùêúùê¢ùê´, ùê¶ùêûùê£ùê®ùê´ ùê™ùêÆ√©ùêùùêûùêßùê¨ùêû ùêúùêöùê•ùê•ùêöùêùùê®ùê¨. üî•üí¢", null, 0x00FF00, "bold", 1);
}